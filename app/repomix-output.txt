This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-02T13:51:39.223Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
(home)/
  blog/
    [slug]/
      page.tsx
    page.tsx
  layout.tsx
  page.tsx
global.css
layout.config.tsx
layout.tsx

================================================================
Repository Files
================================================================

================
File: (home)/blog/[slug]/page.tsx
================
import { notFound } from "next/navigation";
import Link from "next/link";
import { InlineTOC } from "fumadocs-ui/components/inline-toc";
import defaultMdxComponents from "fumadocs-ui/mdx";
import { blog } from "@/lib/source";

export default async function Page(props: {
	params: Promise<{ slug: string }>;
}) {
	const params = await props.params;
	const page = blog.getPage([params.slug]);

	if (!page) notFound();
	const Mdx = page.data.body;

	return (
		<>
			<div className="container py-12 border rounded-xl md:px-8">
				<h1 className="mb-2 text-3xl font-bold">{page.data.title}</h1>
				<p className="mb-4 text-fd-muted-foreground">{page.data.description}</p>
				<Link href="/blog">Back</Link>
			</div>
			<article className="container flex flex-col px-4 py-8">
				<div className="min-w-0 prose">
					<InlineTOC items={page.data.toc} />
					<Mdx components={defaultMdxComponents} />
				</div>
				<div className="flex flex-col gap-4 text-sm">
					<div>
						<p className="mb-1 text-fd-muted-foreground">Written by</p>
						<p className="font-medium">{page.data.author}</p>
					</div>
					<div>
						<p className="mb-1 text-sm text-fd-muted-foreground">At</p>
						<p className="font-medium">
							{new Date(page.data.date).toDateString()}
						</p>
					</div>
				</div>
			</article>
		</>
	);
}

export function generateStaticParams(): { slug: string }[] {
	return blog.getPages().map((page) => ({
		slug: page.slugs[0],
	}));
}

================
File: (home)/blog/page.tsx
================
import Link from "next/link";
import { blog } from "@/lib/source";

export default function Home() {
	const posts = blog.getPages();

	return (
		<main className="grow container mx-auto px-4 py-8">
			<h1 className="text-4xl font-bold mb-8">Latest Blog Posts</h1>
			<div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
				{posts.map((post) => (
					<Link
						key={post.url}
						href={post.url}
						className="block bg-fd-secondary rounded-lg shadow-md overflow-hidden p-6"
					>
						<h2 className="text-xl font-semibold mb-2">{post.data.title}</h2>
						<p className="mb-4">{post.data.description}</p>
					</Link>
				))}
			</div>
		</main>
	);
}

================
File: (home)/layout.tsx
================
import type { ReactNode } from "react";
import { HomeLayout } from "fumadocs-ui/layouts/home";
import { baseOptions } from "@/app/layout.config";

export default function Layout({ children }: { children: ReactNode }) {
	return <HomeLayout {...baseOptions}>{children}</HomeLayout>;
}

================
File: (home)/page.tsx
================
import React from "react";
import Hero from "@/components/landing/Hero";
import Blog from "@/components/landing/Blog";
import About from "@/components/landing/About";
import Contact from "@/components/landing/Contact";

const Home = () => {
	return (
		<main className="max-w-5xl mx-auto">
			<Hero />
			<About />
			<Blog />
			<Contact />
		</main>
	);
};

export default Home;

================
File: global.css
================
@import "tailwindcss";
@import "fumadocs-ui/css/neutral.css";
@import "fumadocs-ui/css/preset.css";

@source '../node_modules/fumadocs-ui/dist/**/*.js';

@custom-variant dark (&:is(.dark *));

================
File: layout.config.tsx
================
import type { BaseLayoutProps } from "fumadocs-ui/layouts/shared";

/**
 * Shared layout configurations
 *
 * you can configure layouts individually from:
 * Home Layout: app/(home)/layout.tsx
 * Docs Layout: app/docs/layout.tsx
 */
export const baseOptions: BaseLayoutProps = {
	nav: {
		title: "Stav Fernandes",
	},
	links: [
		{
			text: "Blog",
			url: "/blog",
			active: "nested-url",
		},
	],
};

================
File: layout.tsx
================
import "./global.css";
import { RootProvider } from "fumadocs-ui/provider";
import { Inter } from "next/font/google";
import type { ReactNode } from "react";

const inter = Inter({
	subsets: ["latin"],
});

export default function Layout({ children }: { children: ReactNode }) {
	return (
		<html lang="en" className={inter.className} suppressHydrationWarning>
			<body className="min-h-screen">
				<RootProvider
					search={{
						enabled: false,
					}}
				>
					{children}
				</RootProvider>
			</body>
		</html>
	);
}
