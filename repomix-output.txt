This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-28T20:04:03.600Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.cursor/
  rules/
    portfolio.mdc
app/
  (home)/
    blog/
      [slug]/
        page.tsx
      page.tsx
    layout.tsx
    page.tsx
  helpers/
    Unicorn-studio.tsx
  fonts.ts
  global.css
  layout.config.tsx
  layout.tsx
  repomix-output.txt
components/
  landing/
    About.tsx
    Blog.tsx
    Contact.tsx
    Hero.tsx
    PageHeader.tsx
  ui/
    blog/
      react-compiler/
        compiler-comparison.tsx
        step-list.tsx
      react-complier/
        compiler-comparison.tsx
        step-list.tsx
      react-server-component/
        FlowDiagram.tsx
    accordion.tsx
    alert-dialog.tsx
    alert.tsx
    aspect-ratio.tsx
    AuthorDisplay.tsx
    avatar.tsx
    Badge.tsx
    BlogCard.tsx
    breadcrumb.tsx
    button.tsx
    calendar.tsx
    card.tsx
    carousel.tsx
    chart.tsx
    checkbox.tsx
    collapsible.tsx
    command.tsx
    context-menu.tsx
    dialog.tsx
    drawer.tsx
    dropdown-menu.tsx
    FeatureCard.tsx
    form.tsx
    hover-card.tsx
    input-otp.tsx
    input.tsx
    label.tsx
    LongCards.tsx
    menubar.tsx
    MidCards.tsx
    navigation-menu.tsx
    Orb.tsx
    pagination.tsx
    popover.tsx
    progress.tsx
    radio-group.tsx
    resizable.tsx
    scroll-area.tsx
    select.tsx
    separator.tsx
    sheet.tsx
    skeleton.tsx
    slider.tsx
    sonner.tsx
    switch.tsx
    table.tsx
    tabs.tsx
    Text-reveal.tsx
    textarea.tsx
    toggle-group.tsx
    toggle.tsx
    tooltip.tsx
    WaveCards.tsx
  AuthorsDisplay.tsx
  typography.tsx
content/
  blog/
    react-compiler.mdx
    react-server-components.mdx
    react-useActionState.mdx
lib/
  custom-components.tsx
  source.ts
  utils.ts
.eslintrc.json
.gitignore
components.json
next.config.mjs
package.json
postcss.config.mjs
README.md
source.config.ts
tsconfig.json

================================================================
Repository Files
================================================================

================
File: .cursor/rules/portfolio.mdc
================
---
description: when on my potfolio
globs: 
---
Next.js Best Practices:

Utilize Next.js App Router for improved performance and easier routing
Implement proper error boundaries to handle and display errors gracefully
Use server components for better performance and reduced client-side JavaScript
Leverage Next.js built-in image optimization for faster image loading
Implement proper data fetching patterns using getServerSideProps or getStaticProps
Use Next.js built-in internationalization features for multi-language support
Implement proper security measures like CSRF protection and secure headers

React Best Practices:

Use functional components and hooks instead of class components for better code organization
Implement proper React.memo and useMemo for performance optimization
Follow the React hooks rules strictly to avoid common pitfalls
Use context API for efficient state management across components
Implement proper prop-types or TypeScript interfaces for type checking
Use React.lazy and Suspense for code-splitting and lazy loading of components
Implement proper error boundaries to catch and handle errors in components

Tailwind CSS Best Practices:

Use utility-first approach for consistent and maintainable styles
Implement proper responsive design using Tailwind's responsive utilities
Use Tailwind's custom theme configuration for consistent design system
Implement proper dark mode support using Tailwind's dark mode utilities
Use Tailwind's @apply directive for component-specific styles
Implement proper accessibility practices using Tailwind's accessibility utilities
Use Tailwind's JIT mode for faster build times and smaller CSS output

Zod Best Practices:

Use Zod for runtime type checking and validation of user inputs
Implement proper error handling and user feedback for validation errors
Use Zod's inferred types for TypeScript integration and type safety
Implement proper schema composition for complex data structures
Use Zod's built-in transformations for data normalization and processing
Implement proper unit tests for Zod schemas to ensure correctness
Use Zod's async validation for handling asynchronous data validation

Fumadocs Best Practices:

Use Fumadocs for creating consistent and maintainable documentation
Implement proper MDX support for rich content and interactive elements
Use Fumadocs' built-in search functionality for better user experience
Implement proper versioning and navigation for large documentation sets
Use Fumadocs' custom components for consistent UI across documentation
Implement proper SEO optimization for documentation pages
Use Fumadocs' built-in analytics for tracking user engagement

Lucide-react Best Practices:

Use Lucide icons for consistent and customizable iconography
Implement proper icon sizing and styling using Lucide's props
Use Lucide's built-in accessibility features for better user experience
Implement proper icon theming for dark mode and custom color schemes
Use Lucide's custom icon creation for brand-specific icons
Implement proper icon loading and caching for performance optimization
Use Lucide's icon search functionality for easy icon discovery

Framer Motion Best Practices:

Use Framer Motion for creating smooth and performant animations
Implement proper animation variants for reusable animation patterns
Use Framer Motion's built-in gesture recognition for interactive animations
Implement proper animation optimization for performance-critical scenarios
Use Framer Motion's layout animations for smooth transitions between states
Implement proper accessibility practices for animated elements
Use Framer Motion's declarative API for easier animation management

Class Variance Authority Best Practices:

Use Class Variance Authority for creating consistent and maintainable class variants
Implement proper variant composition for complex UI components
Use Class Variance Authority's built-in TypeScript support for type-safe variants
Implement proper variant naming conventions for better code readability
Use Class Variance Authority's custom variant creation for project-specific needs
Implement proper variant documentation for easier team collaboration
Use Class Variance Authority's built-in utility classes for common styling patterns

Tailwind Merge Best Practices:

Use Tailwind Merge for combining multiple Tailwind classes efficiently
Implement proper class merging for complex component styles
Use Tailwind Merge's built-in conflict resolution for handling class conflicts
Implement proper class ordering for consistent styling results
Use Tailwind Merge's custom configuration for project-specific merging rules
Implement proper performance optimization for large-scale applications
Use Tailwind Merge's TypeScript support for type-safe class merging

General Standards:

Keep components small and focused for better maintainability
Follow proper state management patterns for efficient data flow
Implement proper testing practices for ensuring code quality
Use proper code splitting and lazy loading for improved performance
Implement proper error handling and logging for better debugging
Follow proper code organization and modularization for easier maintenance
Implement proper security measures to protect against common vulnerabilities

================
File: app/(home)/blog/[slug]/page.tsx
================
import { notFound } from "next/navigation";
import Link from "next/link";
import { InlineTOC } from "fumadocs-ui/components/inline-toc";
import { blog } from "@/lib/source";
import customComponents from "@/lib/custom-components";
import { Button } from "@/components/ui/button";

export default async function Page(props: {
	params: Promise<{ slug: string }>;
}) {
	const params = await props.params;
	const page = blog.getPage([params.slug]);

	if (!page) notFound();
	const Mdx = page.data.body;

	return (
		<>
			<header>
				<div className="container py-12  rounded-xl md:px-8">
					<h1 className="mb-2 text-3xl font-bold">{page.data.title}</h1>
					<p className="mb-4 text-fd-muted-foreground">
						{page.data.description}
					</p>
					<Button variant="outline" asChild>
						<Link href="/blog">Back</Link>
					</Button>
				</div>
			</header>
			<article className="max-w-3xl mx-auto container flex flex-col px-4 py-8">
				<div className="min-w-0 prose">
					<InlineTOC items={page.data.toc} />
					<Mdx components={customComponents} />
				</div>
			</article>
			<footer className="mx-auto container">
				<div className="flex items-center justify-between gap-4 text-sm border-t border-dashed border-muted-foreground mt-10 py-10">
					<div className="flex items-center gap-2 justify-center">
						<p className="text-fd-muted-foreground">Written by</p>
						<p className="font-medium">{page.data.author}</p>
					</div>
					<div className="flex items-center gap-2">
						<p className="text-sm text-fd-muted-foreground">At</p>
						<p className="font-medium">
							{new Date(page.data.date).toDateString()}
						</p>
					</div>
				</div>
			</footer>
		</>
	);
}

export function generateStaticParams(): { slug: string }[] {
	return blog.getPages().map((page) => ({
		slug: page.slugs[0],
	}));
}

================
File: app/(home)/blog/page.tsx
================
"use client";

import { blog } from "@/lib/source";
import { MidCard } from "@/components/ui/MidCards";
import { LongCard } from "@/components/ui/LongCards";
import { FeatureCard } from "@/components/ui/FeatureCard";

export default function Home() {
	const posts = blog.getPages();
	const [featured, ...otherPosts] = posts;
	const [secondPost, thirdPost, ...remainingPosts] = otherPosts;

	return (
		<main className="grow container mx-auto px-4 py-8">
			<h1 className="text-4xl font-bold mb-8">Latest Blog Posts</h1>
			<div className="grid md:grid-cols-2">
				{featured && (
					<FeatureCard
						title={featured.data.title || ""}
						description={featured.data.description || ""}
						author={{
							name: featured.data.author || "",
							image: "/images/profile.jpeg",
						}}
					/>
				)}
				<div>
					{secondPost && (
						<MidCard
							title={secondPost.data.title || ""}
							description={secondPost.data.description || ""}
							author={{
								name: secondPost.data.author || "",
								image: "/images/profile.jpeg",
							}}
							className="md:border-l-0"
						/>
					)}
					{thirdPost && (
						<MidCard
							title={thirdPost.data.title || ""}
							description={thirdPost.data.description || ""}
							author={{
								name: thirdPost.data.author || "",
								image: "/images/profile.jpeg",
							}}
							className="md:border-l-0"
						/>
					)}
				</div>
			</div>
			<div>
				<ul>
					{remainingPosts.map((post) => (
						<LongCard
							key={post.url}
							title={post.data.title || ""}
							description={post.data.description || ""}
							author={{
								name: post.data.author || "",
								image: "/images/profile.jpeg",
							}}
							date={
								post.data.date instanceof Date
									? post.data.date.toISOString().split("T")[0]
									: post.data.date
							}
							link={post.url}
						/>
					))}
				</ul>
			</div>
		</main>
	);
}

================
File: app/(home)/layout.tsx
================
import type { ReactNode } from "react";
import { HomeLayout } from "fumadocs-ui/layouts/home";
import { baseOptions } from "@/app/layout.config";

export default function Layout({ children }: { children: ReactNode }) {
	return (
		<HomeLayout style={{ borderRadius: 0 }} {...baseOptions}>
			{children}
		</HomeLayout>
	);
}

================
File: app/(home)/page.tsx
================
import React from "react";
import Hero from "@/components/landing/Hero";
import Blog from "@/components/landing/Blog";
import About from "@/components/landing/About";
import Contact from "@/components/landing/Contact";

const Home = () => {
	return (
		<>
			<main className="bg-black">
				<Hero />
				<About />
				<Blog />
				<Contact />
			</main>
			<footer className="bg-black border-t border-dashed border-muted py-10">
				<p className="text-center text-sm text-fd-muted-foreground flex items-center justify-center gap-2">
					&copy; {new Date().getFullYear()} Stav Fernandes. All rights reserved.
				</p>
			</footer>
		</>
	);
};

export default Home;

================
File: app/helpers/Unicorn-studio.tsx
================
/* eslint-disable @typescript-eslint/no-explicit-any */
"use client";

import { useEffect, useRef, useState } from "react";

export type UnicornSceneProps = {
	projectId: string;
	width?: number | string;
	height?: number | string;
	scale?: number;
	dpi?: number;
	fps?: number;
	altText?: string;
	ariaLabel?: string;
	className?: string;
	lazyLoad?: boolean;
};

export default function UnicornScene({
	projectId,
	width = "100%",
	height = "100%",
	scale = 1,
	dpi = 1.5,
	fps = 60,
	altText = "Unicorn Studio Animation",
	ariaLabel = altText,
	className = "",
	lazyLoad = false,
}: UnicornSceneProps) {
	const elementRef = useRef<HTMLDivElement>(null);
	const sceneRef = useRef<any>(null);
	const [error, setError] = useState<string | null>(null);
	const [scriptLoaded, setScriptLoaded] = useState(false);

	useEffect(() => {
		if (typeof window === "undefined") return;

		const initializeScript = (callback: () => void) => {
			const version = "1.4.0";

			const existingScript = document.querySelector(
				'script[src^="https://cdn.unicorn.studio"]'
			);

			if (existingScript) {
				if (scriptLoaded) {
					callback();
				} else {
					existingScript.addEventListener("load", callback);
				}
				return;
			}

			const script = document.createElement("script");
			script.src = `https://cdn.unicorn.studio/v${version}/unicornStudio.umd.js`;
			script.async = true;

			script.onload = () => {
				setScriptLoaded(true);
				callback();
			};
			script.onerror = () => setError("Failed to load UnicornStudio script");

			document.body.appendChild(script);
		};

		const initializeScene = () => {
			if (!elementRef.current) return;

			const cleanProjectId = projectId.split("?")[0];

			elementRef.current.setAttribute("data-us-project", cleanProjectId);

			const UnicornStudio = (window as any).UnicornStudio;

			if (!UnicornStudio) {
				throw new Error("UnicornStudio not found");
			}

			if (sceneRef.current) {
				sceneRef.current.destroy();
			}

			UnicornStudio.init({
				scale,
				dpi,
			}).then((scenes: any[]) => {
				const ourScene = scenes.find(
					(scene) =>
						scene.element === elementRef.current ||
						scene.element.contains(elementRef.current)
				);
				if (ourScene) {
					sceneRef.current = ourScene;
				}
			});
		};

		initializeScript(initializeScene);

		return () => {
			if (sceneRef.current) {
				sceneRef.current.destroy();
				sceneRef.current = null;
			}
		};
	}, [projectId, scale, dpi]);

	return (
		<div
			ref={elementRef}
			style={{
				width: typeof width === "number" ? `${width}px` : width,
				height: typeof height === "number" ? `${height}px` : height,
			}}
			className={`relative ${className}`}
			role="img"
			aria-label={ariaLabel}
			data-us-dpi={dpi}
			data-us-scale={scale}
			data-us-fps={fps}
			data-us-alttext={altText}
			data-us-arialabel={ariaLabel}
			data-us-lazyload={lazyLoad ? "true" : ""}
			data-us-production
		>
			{error && <div className="text-red-500">{error}</div>}
		</div>
	);
}

================
File: app/fonts.ts
================
import { Inter, Playfair_Display } from "next/font/google";

export const inter = Inter({
	subsets: ["latin"],
});

export const playfair = Playfair_Display({
	subsets: ["latin"],
});

================
File: app/global.css
================
@import "tailwindcss";

@plugin "tailwindcss-animate";

@custom-variant dark (&:is(.dark *));
@import "fumadocs-ui/css/black.css";
@import "fumadocs-ui/css/preset.css";

@source '../node_modules/fumadocs-ui/dist/**/*.js';

@layer utilities {
	.primary-gradient {
		@apply bg-gradient-to-r from-green-200 via-teal-400 to-cyan-600 text-transparent bg-clip-text;
	}

	.small {
		font-size: 1.125rem;
	}
}

:root {
	--background: oklch(1 0 0);

	--foreground: oklch(0.145 0 0);

	--card: oklch(1 0 0);

	--card-foreground: oklch(0.145 0 0);

	--popover: oklch(1 0 0);

	--popover-foreground: oklch(0.145 0 0);

	--primary: oklch(0.205 0 0);

	--primary-foreground: oklch(0.985 0 0);

	--secondary: oklch(0.97 0 0);

	--secondary-foreground: oklch(0.205 0 0);

	--muted: oklch(0.97 0 0);

	--muted-foreground: oklch(0.556 0 0);

	--accent: oklch(0.97 0 0);

	--accent-foreground: oklch(0.205 0 0);

	--destructive: oklch(0.577 0.245 27.325);

	--destructive-foreground: oklch(0.577 0.245 27.325);

	--border: oklch(0.922 0 0);

	--input: oklch(0.922 0 0);

	--ring: oklch(0.87 0 0);

	--chart-1: oklch(0.646 0.222 41.116);

	--chart-2: oklch(0.6 0.118 184.704);

	--chart-3: oklch(0.398 0.07 227.392);

	--chart-4: oklch(0.828 0.189 84.429);

	--chart-5: oklch(0.769 0.188 70.08);

	--radius: 0.625rem;

	--sidebar: oklch(0.985 0 0);

	--sidebar-foreground: oklch(0.145 0 0);

	--sidebar-primary: oklch(0.205 0 0);

	--sidebar-primary-foreground: oklch(0.985 0 0);

	--sidebar-accent: oklch(0.97 0 0);

	--sidebar-accent-foreground: oklch(0.205 0 0);

	--sidebar-border: oklch(0.922 0 0);

	--sidebar-ring: oklch(0.87 0 0);
}

.dark {
	--background: oklch(0.145 0 0);

	--foreground: oklch(0.985 0 0);

	--card: oklch(0.145 0 0);

	--card-foreground: oklch(0.985 0 0);

	--popover: oklch(0.145 0 0);

	--popover-foreground: oklch(0.985 0 0);

	--primary: oklch(0.985 0 0);

	--primary-foreground: oklch(0.205 0 0);

	--secondary: oklch(0.269 0 0);

	--secondary-foreground: oklch(0.985 0 0);

	--muted: oklch(0.269 0 0);

	--muted-foreground: oklch(0.708 0 0);

	--accent: oklch(0.269 0 0);

	--accent-foreground: oklch(0.985 0 0);

	--destructive: oklch(0.396 0.141 25.723);

	--destructive-foreground: oklch(0.637 0.237 25.331);

	--border: oklch(0.269 0 0);

	--input: oklch(0.269 0 0);

	--ring: oklch(0.439 0 0);

	--chart-1: oklch(0.488 0.243 264.376);

	--chart-2: oklch(0.696 0.17 162.48);

	--chart-3: oklch(0.769 0.188 70.08);

	--chart-4: oklch(0.627 0.265 303.9);

	--chart-5: oklch(0.645 0.246 16.439);

	--sidebar: oklch(0.205 0 0);

	--sidebar-foreground: oklch(0.985 0 0);

	--sidebar-primary: oklch(0.488 0.243 264.376);

	--sidebar-primary-foreground: oklch(0.985 0 0);

	--sidebar-accent: oklch(0.269 0 0);

	--sidebar-accent-foreground: oklch(0.985 0 0);

	--sidebar-border: oklch(0.269 0 0);

	--sidebar-ring: oklch(0.439 0 0);
}

@theme inline {
	--color-background: var(--background);

	--color-foreground: var(--foreground);

	--color-card: var(--card);

	--color-card-foreground: var(--card-foreground);

	--color-popover: var(--popover);

	--color-popover-foreground: var(--popover-foreground);

	--color-primary: var(--primary);

	--color-primary-foreground: var(--primary-foreground);

	--color-secondary: var(--secondary);

	--color-secondary-foreground: var(--secondary-foreground);

	--color-muted: var(--muted);

	--color-muted-foreground: var(--muted-foreground);

	--color-accent: var(--accent);

	--color-accent-foreground: var(--accent-foreground);

	--color-destructive: var(--destructive);

	--color-destructive-foreground: var(--destructive-foreground);

	--color-border: var(--border);

	--color-input: var(--input);

	--color-ring: var(--ring);

	--color-chart-1: var(--chart-1);

	--color-chart-2: var(--chart-2);

	--color-chart-3: var(--chart-3);

	--color-chart-4: var(--chart-4);

	--color-chart-5: var(--chart-5);

	--radius-sm: calc(var(--radius) - 4px);

	--radius-md: calc(var(--radius) - 2px);

	--radius-lg: var(--radius);

	--radius-xl: calc(var(--radius) + 4px);

	--color-sidebar: var(--sidebar);

	--color-sidebar-foreground: var(--sidebar-foreground);

	--color-sidebar-primary: var(--sidebar-primary);

	--color-sidebar-primary-foreground: var(--sidebar-primary-foreground);

	--color-sidebar-accent: var(--sidebar-accent);

	--color-sidebar-accent-foreground: var(--sidebar-accent-foreground);

	--color-sidebar-border: var(--sidebar-border);

	--color-sidebar-ring: var(--sidebar-ring);
	--animate-accordion-down: accordion-down 0.2s ease-out;
	--animate-accordion-up: accordion-up 0.2s ease-out;

	@keyframes accordion-down {
		from {
			height: 0;
		}
		to {
			height: var(--radix-accordion-content-height);
		}
	}

	@keyframes accordion-up {
		from {
			height: var(--radix-accordion-content-height);
		}
		to {
			height: 0;
		}
	}
}

@layer base {
	* {
		@apply border-border outline-ring/50;
	}
	body {
		@apply bg-background text-foreground;
	}
}

================
File: app/layout.config.tsx
================
import type { BaseLayoutProps } from "fumadocs-ui/layouts/shared";

export const baseOptions: BaseLayoutProps = {
	nav: {
		title: "Stav Fernandes",
	},
	disableThemeSwitch: true,
	links: [
		{
			text: "Posts",
			url: "/blog",
			active: "nested-url",
		},
	],
};

================
File: app/layout.tsx
================
import "./global.css";
import { RootProvider } from "fumadocs-ui/provider";
import localFont from "next/font/local";
import type { ReactNode } from "react";

const DM_Sans = localFont({
	src: "../public/fonts/DMSerifDisplay-Regular.ttf",
});

export default function Layout({ children }: { children: ReactNode }) {
	return (
		<html lang="en" className={DM_Sans.className} suppressHydrationWarning>
			<body className="min-h-screen bg-black">
				<RootProvider search={{ enabled: false }}>{children}</RootProvider>
			</body>
		</html>
	);
}

================
File: app/repomix-output.txt
================
This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-02T13:51:39.223Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
(home)/
  blog/
    [slug]/
      page.tsx
    page.tsx
  layout.tsx
  page.tsx
global.css
layout.config.tsx
layout.tsx

================================================================
Repository Files
================================================================

================
File: (home)/blog/[slug]/page.tsx
================
import { notFound } from "next/navigation";
import Link from "next/link";
import { InlineTOC } from "fumadocs-ui/components/inline-toc";
import defaultMdxComponents from "fumadocs-ui/mdx";
import { blog } from "@/lib/source";

export default async function Page(props: {
	params: Promise<{ slug: string }>;
}) {
	const params = await props.params;
	const page = blog.getPage([params.slug]);

	if (!page) notFound();
	const Mdx = page.data.body;

	return (
		<>
			<div className="container py-12 border rounded-xl md:px-8">
				<h1 className="mb-2 text-3xl font-bold">{page.data.title}</h1>
				<p className="mb-4 text-fd-muted-foreground">{page.data.description}</p>
				<Link href="/blog">Back</Link>
			</div>
			<article className="container flex flex-col px-4 py-8">
				<div className="min-w-0 prose">
					<InlineTOC items={page.data.toc} />
					<Mdx components={defaultMdxComponents} />
				</div>
				<div className="flex flex-col gap-4 text-sm">
					<div>
						<p className="mb-1 text-fd-muted-foreground">Written by</p>
						<p className="font-medium">{page.data.author}</p>
					</div>
					<div>
						<p className="mb-1 text-sm text-fd-muted-foreground">At</p>
						<p className="font-medium">
							{new Date(page.data.date).toDateString()}
						</p>
					</div>
				</div>
			</article>
		</>
	);
}

export function generateStaticParams(): { slug: string }[] {
	return blog.getPages().map((page) => ({
		slug: page.slugs[0],
	}));
}

================
File: (home)/blog/page.tsx
================
import Link from "next/link";
import { blog } from "@/lib/source";

export default function Home() {
	const posts = blog.getPages();

	return (
		<main className="grow container mx-auto px-4 py-8">
			<h1 className="text-4xl font-bold mb-8">Latest Blog Posts</h1>
			<div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
				{posts.map((post) => (
					<Link
						key={post.url}
						href={post.url}
						className="block bg-fd-secondary rounded-lg shadow-md overflow-hidden p-6"
					>
						<h2 className="text-xl font-semibold mb-2">{post.data.title}</h2>
						<p className="mb-4">{post.data.description}</p>
					</Link>
				))}
			</div>
		</main>
	);
}

================
File: (home)/layout.tsx
================
import type { ReactNode } from "react";
import { HomeLayout } from "fumadocs-ui/layouts/home";
import { baseOptions } from "@/app/layout.config";

export default function Layout({ children }: { children: ReactNode }) {
	return <HomeLayout {...baseOptions}>{children}</HomeLayout>;
}

================
File: (home)/page.tsx
================
import React from "react";
import Hero from "@/components/landing/Hero";
import Blog from "@/components/landing/Blog";
import About from "@/components/landing/About";
import Contact from "@/components/landing/Contact";

const Home = () => {
	return (
		<main className="max-w-5xl mx-auto">
			<Hero />
			<About />
			<Blog />
			<Contact />
		</main>
	);
};

export default Home;

================
File: global.css
================
@import "tailwindcss";
@import "fumadocs-ui/css/neutral.css";
@import "fumadocs-ui/css/preset.css";

@source '../node_modules/fumadocs-ui/dist/**/*.js';

@custom-variant dark (&:is(.dark *));

================
File: layout.config.tsx
================
import type { BaseLayoutProps } from "fumadocs-ui/layouts/shared";

/**
 * Shared layout configurations
 *
 * you can configure layouts individually from:
 * Home Layout: app/(home)/layout.tsx
 * Docs Layout: app/docs/layout.tsx
 */
export const baseOptions: BaseLayoutProps = {
	nav: {
		title: "Stav Fernandes",
	},
	links: [
		{
			text: "Blog",
			url: "/blog",
			active: "nested-url",
		},
	],
};

================
File: layout.tsx
================
import "./global.css";
import { RootProvider } from "fumadocs-ui/provider";
import { Inter } from "next/font/google";
import type { ReactNode } from "react";

const inter = Inter({
	subsets: ["latin"],
});

export default function Layout({ children }: { children: ReactNode }) {
	return (
		<html lang="en" className={inter.className} suppressHydrationWarning>
			<body className="min-h-screen">
				<RootProvider
					search={{
						enabled: false,
					}}
				>
					{children}
				</RootProvider>
			</body>
		</html>
	);
}

================
File: components/landing/About.tsx
================
import { H2 } from "../typography";
import TextReveal from "../ui/Text-reveal";

const About = () => {
	return (
		<section className="max-w-5xl mx-auto ">
			<div className="text-center border border-[bg-muted-foreground] border-dashed grid grid-cols-12">
				<div className="col-span-1 border-r border-[bg-muted-foreground] border-dashed" />
				<H2 className="col-span-10 p-10">About</H2>
				<div className="col-span-1 border-l border-[bg-muted-foreground] border-dashed" />
			</div>
			<div className="z-10 flex items-center justify-center border border-[bg-mu-f] border-dashed border-t-0 min-h-64 ">
				<TextReveal
					text="Hey, I’m Stav, a software engineer who loves building AI-driven experiences. I’m all about learning, experimenting, and creating things that make an impact. Whether it’s pushing boundaries in frontend or bridging AI with great design, I enjoy turning bold ideas into reality. If you’re into building and exploring what’s next, let’s connect!"
					highlightWords={["learning,", "experimenting,", "creating"]}
				/>
			</div>
		</section>
	);
};

export default About;

================
File: components/landing/Blog.tsx
================
import React from "react";
import PageHeader from "./PageHeader";
import BlogCard from "../ui/BlogCard";
import { blog } from "@/lib/source";

const Blog = () => {
	const posts = blog.getPages().slice(0, 3);
	const projectIds = [
		"O5x0kQ0Xk0UavLvJlv3A",
		"kb9IHnXSZRLNGZkqtIJN",
		"VzcZVpiOIfumxV4NDHWm",
	];

	return (
		<div className="max-w-5xl mx-auto">
			<PageHeader title="Latest posts" />
			<div className="flex flex-col items-center justify-center border border-[bg-muted-foreground] border-dashed border-t-0 min-h-64">
				<ul className="w-full">
					{posts.map((post, index) => (
						<BlogCard
							key={post.slugs[0]}
							projectId={projectIds[index]}
							title={post.data.title}
							description={post.data.description}
							author={{
								name: post.data.author,
								avatar: "",
							}}
							date={post.data.date.toString()}
							className={index === posts.length - 1 ? "border-b-none" : ""}
							slug={post.slugs[0]}
						/>
					))}
				</ul>
			</div>
		</div>
	);
};

export default Blog;

================
File: components/landing/Contact.tsx
================
import PageHeader from "./PageHeader";
import Link from "next/link";
import { Mail, Linkedin } from "lucide-react";
import { H3, P } from "../typography";
import { Button } from "../ui/button";
import UnicornScene from "@/app/helpers/Unicorn-studio";

const Contact = () => {
	return (
		<div className="max-w-5xl mx-auto h-full ">
			<PageHeader title="Contact" />
			<div className="relative border-b-none p-5 z-10 flex flex-col items-center justify-center gap-8 min-h-[calc(100vh-20rem)] py-20 text-center border border-dashed ">
				<H3>Want to connect?</H3>

				<P className="text-balance text-fd-muted-foreground">
					I&apos;m always open to new opportunities and collaborations. Feel
					free to reach out through email or connect with me on LinkedIn.
				</P>

				<div className="flex flex-col gap-4 sm:flex-row">
					<Button
						variant="ghost"
						asChild
						className="hover:bg-muted-foreground/10"
					>
						<Link
							href="mailto:your-email@example.com"
							target="_blank"
							rel="noopener noreferrer"
						>
							<Mail className="w-5 h-5" />
							Send Email
						</Link>
					</Button>

					<Button
						variant="ghost"
						asChild
						className="hover:bg-muted-foreground/10"
					>
						<Link
							href="https://linkedin.com/in/stavfernandes24"
							target="_blank"
							rel="noopener noreferrer"
						>
							<Linkedin className="w-5 h-5" />
							LinkedIn
						</Link>
					</Button>
				</div>

				<div className="absolute inset-0 z-[-1] w-full h-full">
					<UnicornScene
						height="100%"
						width="100%"
						projectId="lWZ52g5lT6Q9X7tgKQcl"
						className="absolute inset-0 z-10 w-full h-full object-cover"
					/>
				</div>
			</div>
		</div>
	);
};

export default Contact;

================
File: components/landing/Hero.tsx
================
import React from "react";
import { H1, H4 } from "../typography";
import Orb from "../ui/Orb";

const Hero = () => {
	return (
		<div className="h-full max-w-5xl mx-auto">
			<div className="relative max-w-5xl max-sm:border-none border-l border-r border-dashed border-[bg-muted-foreground] mx-auto h-[calc(100vh-65px)]">
				<div className="relative w-full h-full">
					<Orb
						hoverIntensity={1}
						rotateOnHover={true}
						forceHoverState={false}
					/>
					<H1 className="absolute z-10 w-full text-center -translate-x-1/2 -translate-y-1/2 top-1/2 left-1/2 text-balance text-foreground">
						STAV FERNANDES
					</H1>
					<H4 className="absolute z-10 w-full text-center -translate-x-1/2 sm:translate-y-12 translate-y-8 top-1/2 left-1/2 font-thin">
						<span className="primary-gradient">Software Engineer</span>
					</H4>
				</div>
			</div>
		</div>
	);
};

export default Hero;

================
File: components/landing/PageHeader.tsx
================
import { H2 } from "../typography";

interface PageHeaderProps {
	title: string;
}

const PageHeader = ({ title }: PageHeaderProps) => {
	return (
		<div className="text-center border border-[bg-fd-muted-foreground] border-dashed grid grid-cols-12">
			<div className="col-span-1 border-r border-[bg-fd-muted-foreground] border-dashed" />
			<H2 className="col-span-10 p-10">{title}</H2>
			<div className="col-span-1 border-l border-[bg-fd-muted-foreground] border-dashed" />
		</div>
	);
};

export default PageHeader;

================
File: components/ui/blog/react-compiler/compiler-comparison.tsx
================
"use client";

import * as React from "react";
import {
	Play,
	Pause,
	Code,
	Cpu,
	Monitor,
	Zap,
	FileCode,
	Cog,
	Boxes,
	type LucideIcon,
} from "lucide-react";

import { Card, CardContent } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import StepList from "./step-list";
import { Button } from "@/components/ui/button";

interface Step {
	id: number;
	title: string;
	icon: LucideIcon;
	description: string;
}

interface Flows {
	traditional: Step[];
	react19: Step[];
}

const CompilerComparison = () => {
	const [currentStep, setCurrentStep] = React.useState<number>(1);
	const [activeFlow, setActiveFlow] = React.useState<"traditional" | "react19">(
		"traditional"
	);
	const [isPlaying, setIsPlaying] = React.useState<boolean>(true);

	const flows: Flows = React.useMemo(
		() => ({
			traditional: [
				{
					id: 1,
					title: "JSX Writing",
					icon: Code,
					description:
						"Developers write components using JSX, a syntax extension that allows mixing HTML-like code with JavaScript.",
				},
				{
					id: 2,
					title: "Babel Transform",
					icon: FileCode,
					description:
						"Babel, a JavaScript compiler, converts JSX into standard JavaScript functions that browsers can interpret.",
				},
				{
					id: 3,
					title: "Bundler Process",
					icon: Boxes,
					description:
						"Tools like Webpack bundle JavaScript files, including transformed JSX, into build artifacts for deployment.",
				},
				{
					id: 4,
					title: "Manual Optimization",
					icon: Cpu,
					description:
						"Developers manually apply optimizations using React.memo, useMemo, and useCallback to prevent unnecessary re-renders.",
				},
				{
					id: 5,
					title: "Runtime Execution",
					icon: Monitor,
					description:
						"The browser executes the bundled JavaScript, with performance depending on the effectiveness of manual optimizations.",
				},
				{
					id: 6,
					title: "Debug & Optimize",
					icon: Cog,
					description:
						"Developers monitor component behavior, using tools like React DevTools to identify and address unnecessary re-renders.",
				},
			],
			react19: [
				{
					id: 1,
					title: "JSX Writing",
					icon: Code,
					description: "Developers continue to write components using JSX.",
				},
				{
					id: 2,
					title: "Build Transform",
					icon: FileCode,
					description:
						"Babel, along with the new React Compiler, processes JSX and JavaScript code during the build, preparing it for optimization.",
				},
				{
					id: 3,
					title: "Compiler Optimization",
					icon: Cpu,
					description:
						"The compiler analyzes the code to identify components for optimization, automatically apply memoization, and enforce immutability rules.",
				},
				{
					id: 4,
					title: "Build Generation",
					icon: Boxes,
					description:
						"The build process produces JavaScript files that include these optimizations, ready for deployment.",
				},
				{
					id: 5,
					title: "Optimized Execution",
					icon: Zap,
					description:
						"The browser runs the optimized code, resulting in fewer unnecessary re-renders and improved performance.",
				},
				{
					id: 6,
					title: "Optional Configuration",
					icon: Cog,
					description:
						"Developers can adjust compiler settings to control which components or hooks are optimized, providing flexibility as needed.",
				},
			],
		}),
		[]
	);

	React.useEffect(() => {
		let timer: NodeJS.Timeout;
		if (isPlaying) {
			timer = setInterval(() => {
				setCurrentStep((prev) =>
					prev >= flows[activeFlow].length ? 1 : prev + 1
				);
			}, 3000);
		}
		return () => clearInterval(timer);
	}, [isPlaying, activeFlow, flows]);

	return (
		<Card className="w-full max-w-3xl mx-auto">
			<CardContent className="p-6">
				<Tabs
					value={activeFlow}
					onValueChange={(value) =>
						setActiveFlow(value as "traditional" | "react19")
					}
				>
					<div className="flex justify-between items-center mb-4">
						<TabsList>
							<TabsTrigger value="traditional">Traditional React</TabsTrigger>
							<TabsTrigger value="react19">React 19</TabsTrigger>
						</TabsList>
						<div className="flex items-center gap-4">
							<Button
								variant={isPlaying ? "default" : "secondary"}
								size="sm"
								onClick={() => setIsPlaying(!isPlaying)}
							>
								{isPlaying ? (
									<Pause className="w-4 h-4 mr-2" />
								) : (
									<Play className="w-4 h-4 mr-2" />
								)}
								{isPlaying ? "Pause" : "Play"}
							</Button>
							<span className="text-sm text-muted-foreground">
								Step: {currentStep}/{flows[activeFlow].length}
							</span>
						</div>
					</div>
					<TabsContent value="traditional">
						<StepList
							steps={flows.traditional}
							currentStep={currentStep}
							setCurrentStep={setCurrentStep}
							setIsPlaying={setIsPlaying}
						/>
					</TabsContent>
					<TabsContent value="react19">
						<StepList
							steps={flows.react19}
							currentStep={currentStep}
							setCurrentStep={setCurrentStep}
							setIsPlaying={setIsPlaying}
						/>
					</TabsContent>
				</Tabs>
			</CardContent>
		</Card>
	);
};

export default CompilerComparison;

================
File: components/ui/blog/react-compiler/step-list.tsx
================
import type * as React from "react";
import { Card, CardContent } from "@/components/ui/card";
import { cn } from "@/lib/utils";
import type { LucideIcon } from "lucide-react";

interface StepProps {
	step: {
		id: number;
		title: string;
		icon: LucideIcon;
		description: string;
	};
	isActive: boolean;
	onClick: () => void;
}

const Step: React.FC<StepProps> = ({ step, isActive, onClick }) => {
	const Icon = step.icon;

	return (
		<Card
			className={cn(
				"mb-4 transition-all duration-300 cursor-pointer",
				isActive ? "border-primary" : "border-muted"
			)}
			onClick={onClick}
		>
			<CardContent className="p-4 flex items-start gap-4">
				<div
					className={cn(
						"p-2 rounded-full flex items-center justify-center",
						isActive
							? "bg-primary text-primary-foreground"
							: "bg-muted text-muted-foreground"
					)}
				>
					<Icon className="w-5 h-5" />
				</div>
				<div className="flex-1">
					<h3
						className={cn(
							"text-sm font-medium mb-1 mt-2",
							isActive ? "text-primary" : "text-foreground"
						)}
					>
						{step.title}
					</h3>
					{isActive && (
						<p className="text-sm text-muted-foreground">{step.description}</p>
					)}
				</div>
				<div
					className={cn(
						"w-6 h-6 rounded-full flex items-center justify-center text-xs font-bold",
						isActive
							? "bg-primary text-primary-foreground"
							: "bg-muted text-muted-foreground"
					)}
				>
					{step.id}
				</div>
			</CardContent>
		</Card>
	);
};

interface StepListProps {
	steps: Array<{
		id: number;
		title: string;
		icon: LucideIcon;
		description: string;
	}>;
	currentStep: number;
	setCurrentStep: (step: number) => void;
	setIsPlaying: (isPlaying: boolean) => void;
}

const StepList: React.FC<StepListProps> = ({
	steps,
	currentStep,
	setCurrentStep,
	setIsPlaying,
}) => {
	if (!steps || steps.length === 0) {
		return <div>No steps available.</div>;
	}

	return (
		<div>
			{steps.map((step) => (
				<Step
					key={step.id}
					step={step}
					isActive={currentStep === step.id}
					onClick={() => {
						setCurrentStep(step.id);
						setIsPlaying(false);
					}}
				/>
			))}
		</div>
	);
};

export default StepList;

================
File: components/ui/blog/react-complier/compiler-comparison.tsx
================
"use client";

import * as React from "react";
import {
	Play,
	Pause,
	Code,
	Cpu,
	Monitor,
	Zap,
	FileCode,
	Cog,
	Boxes,
	type LucideIcon,
} from "lucide-react";

import { Card, CardContent } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import StepList from "./step-list";
import { Button } from "@/components/ui/button";

interface Step {
	id: number;
	title: string;
	icon: LucideIcon;
	description: string;
}

interface Flows {
	traditional: Step[];
	react19: Step[];
}

const CompilerComparison = () => {
	const [currentStep, setCurrentStep] = React.useState<number>(1);
	const [activeFlow, setActiveFlow] = React.useState<"traditional" | "react19">(
		"traditional"
	);
	const [isPlaying, setIsPlaying] = React.useState<boolean>(true);

	const flows: Flows = React.useMemo(
		() => ({
			traditional: [
				{
					id: 1,
					title: "JSX Writing",
					icon: Code,
					description:
						"Developers write components using JSX, a syntax extension that allows mixing HTML-like code with JavaScript.",
				},
				{
					id: 2,
					title: "Babel Transform",
					icon: FileCode,
					description:
						"Babel, a JavaScript compiler, converts JSX into standard JavaScript functions that browsers can interpret.",
				},
				{
					id: 3,
					title: "Bundler Process",
					icon: Boxes,
					description:
						"Tools like Webpack bundle JavaScript files, including transformed JSX, into build artifacts for deployment.",
				},
				{
					id: 4,
					title: "Manual Optimization",
					icon: Cpu,
					description:
						"Developers manually apply optimizations using React.memo, useMemo, and useCallback to prevent unnecessary re-renders.",
				},
				{
					id: 5,
					title: "Runtime Execution",
					icon: Monitor,
					description:
						"The browser executes the bundled JavaScript, with performance depending on the effectiveness of manual optimizations.",
				},
				{
					id: 6,
					title: "Debug & Optimize",
					icon: Cog,
					description:
						"Developers monitor component behavior, using tools like React DevTools to identify and address unnecessary re-renders.",
				},
			],
			react19: [
				{
					id: 1,
					title: "JSX Writing",
					icon: Code,
					description: "Developers continue to write components using JSX.",
				},
				{
					id: 2,
					title: "Build Transform",
					icon: FileCode,
					description:
						"Babel, along with the new React Compiler, processes JSX and JavaScript code during the build, preparing it for optimization.",
				},
				{
					id: 3,
					title: "Compiler Optimization",
					icon: Cpu,
					description:
						"The compiler analyzes the code to identify components for optimization, automatically apply memoization, and enforce immutability rules.",
				},
				{
					id: 4,
					title: "Build Generation",
					icon: Boxes,
					description:
						"The build process produces JavaScript files that include these optimizations, ready for deployment.",
				},
				{
					id: 5,
					title: "Optimized Execution",
					icon: Zap,
					description:
						"The browser runs the optimized code, resulting in fewer unnecessary re-renders and improved performance.",
				},
				{
					id: 6,
					title: "Optional Configuration",
					icon: Cog,
					description:
						"Developers can adjust compiler settings to control which components or hooks are optimized, providing flexibility as needed.",
				},
			],
		}),
		[]
	);

	React.useEffect(() => {
		let timer: NodeJS.Timeout;
		if (isPlaying) {
			timer = setInterval(() => {
				setCurrentStep((prev) =>
					prev >= flows[activeFlow].length ? 1 : prev + 1
				);
			}, 3000);
		}
		return () => clearInterval(timer);
	}, [isPlaying, activeFlow, flows]);

	return (
		<Card className="w-full max-w-3xl mx-auto">
			<CardContent className="p-6">
				<Tabs
					value={activeFlow}
					onValueChange={(value) =>
						setActiveFlow(value as "traditional" | "react19")
					}
				>
					<div className="flex justify-between items-center mb-4">
						<TabsList>
							<TabsTrigger value="traditional">Traditional React</TabsTrigger>
							<TabsTrigger value="react19">React 19</TabsTrigger>
						</TabsList>
						<div className="flex items-center gap-4">
							<Button
								variant={isPlaying ? "default" : "secondary"}
								size="sm"
								onClick={() => setIsPlaying(!isPlaying)}
							>
								{isPlaying ? (
									<Pause className="w-4 h-4 mr-2" />
								) : (
									<Play className="w-4 h-4 mr-2" />
								)}
								{isPlaying ? "Pause" : "Play"}
							</Button>
							<span className="text-sm text-muted-foreground">
								Step: {currentStep}/{flows[activeFlow].length}
							</span>
						</div>
					</div>
					<TabsContent value="traditional">
						<StepList
							steps={flows.traditional}
							currentStep={currentStep}
							setCurrentStep={setCurrentStep}
							setIsPlaying={setIsPlaying}
						/>
					</TabsContent>
					<TabsContent value="react19">
						<StepList
							steps={flows.react19}
							currentStep={currentStep}
							setCurrentStep={setCurrentStep}
							setIsPlaying={setIsPlaying}
						/>
					</TabsContent>
				</Tabs>
			</CardContent>
		</Card>
	);
};

export default CompilerComparison;

================
File: components/ui/blog/react-complier/step-list.tsx
================
import type * as React from "react";
import { Card, CardContent } from "@/components/ui/card";
import { cn } from "@/lib/utils";
import type { LucideIcon } from "lucide-react";

interface StepProps {
	step: {
		id: number;
		title: string;
		icon: LucideIcon;
		description: string;
	};
	isActive: boolean;
	onClick: () => void;
}

const Step: React.FC<StepProps> = ({ step, isActive, onClick }) => {
	const Icon = step.icon;

	return (
		<Card
			className={cn(
				"mb-4 transition-all duration-300 cursor-pointer",
				isActive ? "border-primary" : "border-muted"
			)}
			onClick={onClick}
		>
			<CardContent className="p-4 flex items-start gap-4">
				<div
					className={cn(
						"p-2 rounded-full flex items-center justify-center",
						isActive
							? "bg-primary text-primary-foreground"
							: "bg-muted text-muted-foreground"
					)}
				>
					<Icon className="w-5 h-5" />
				</div>
				<div className="flex-1">
					<h3
						className={cn(
							"text-sm font-medium mb-1 mt-2",
							isActive ? "text-primary" : "text-foreground"
						)}
					>
						{step.title}
					</h3>
					{isActive && (
						<p className="text-sm text-muted-foreground">{step.description}</p>
					)}
				</div>
				<div
					className={cn(
						"w-6 h-6 rounded-full flex items-center justify-center text-xs font-bold",
						isActive
							? "bg-primary text-primary-foreground"
							: "bg-muted text-muted-foreground"
					)}
				>
					{step.id}
				</div>
			</CardContent>
		</Card>
	);
};

interface StepListProps {
	steps: Array<{
		id: number;
		title: string;
		icon: LucideIcon;
		description: string;
	}>;
	currentStep: number;
	setCurrentStep: (step: number) => void;
	setIsPlaying: (isPlaying: boolean) => void;
}

const StepList: React.FC<StepListProps> = ({
	steps,
	currentStep,
	setCurrentStep,
	setIsPlaying,
}) => {
	if (!steps || steps.length === 0) {
		return <div>No steps available.</div>;
	}

	return (
		<div>
			{steps.map((step) => (
				<Step
					key={step.id}
					step={step}
					isActive={currentStep === step.id}
					onClick={() => {
						setCurrentStep(step.id);
						setIsPlaying(false);
					}}
				/>
			))}
		</div>
	);
};

export default StepList;

================
File: components/ui/blog/react-server-component/FlowDiagram.tsx
================
"use client";

import * as React from "react";
import {
	ArrowRight,
	ArrowDown,
	Database,
	Globe,
	Cpu,
	Package,
	Zap,
	Palette,
	Pause,
	Play,
	type LucideIcon,
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Separator } from "@/components/ui/separator";

interface StepExplanation {
	title: string;
	description: string;
}

interface StepExplanations {
	[key: number]: StepExplanation;
}

interface BoxProps {
	title: string;
	icon: LucideIcon;
	isServer?: boolean;
	step: number;
	currentStep: number;
	onClick: (step: number) => void;
}

const FlowDiagram: React.FC = () => {
	const [currentStep, setCurrentStep] = React.useState<number>(1);
	const [isPlaying, setIsPlaying] = React.useState<boolean>(true);
	const totalSteps = 6;

	const stepExplanations: StepExplanations = {
		1: {
			title: "Component Request",
			description:
				"The client initiates a request for a React Server Component. This is typically triggered by a user action or during the initial page load.",
		},
		2: {
			title: "Server-Side Rendering",
			description:
				"The server receives the request and begins the rendering process. React starts executing the server component code.",
		},
		3: {
			title: "Data Fetching",
			description:
				"During the server-side rendering process, the component can directly access databases, APIs, or other data sources.",
		},
		4: {
			title: "Serialization",
			description:
				"The server serializes the output into a format that can be efficiently transmitted to the client.",
		},
		5: {
			title: "Client Integration",
			description:
				"The client receives the serialized server component output and begins integrating it into the page.",
		},
		6: {
			title: "Interactive DOM",
			description:
				"The server component is fully integrated into the client-side DOM and becomes interactive.",
		},
	};

	React.useEffect(() => {
		let interval: NodeJS.Timeout;
		if (isPlaying) {
			interval = setInterval(() => {
				setCurrentStep((prev) => (prev % totalSteps) + 1);
			}, 2000);
		}
		return () => clearInterval(interval);
	}, [isPlaying]);

	const Box: React.FC<BoxProps> = ({
		title,
		icon: Icon,
		step,
		currentStep,
		onClick,
	}) => {
		const isActive = currentStep === step;
		return (
			<Card
				className={`w-24 h-24 flex flex-col items-center justify-center cursor-pointer transition-all  ${
					isActive ? "border-primary" : "border-muted"
				}`}
				onClick={() => onClick(step)}
			>
				<CardContent className="p-2 text-center">
					<Icon
						className={`mx-auto mb-2 ${
							isActive ? "text-primary" : "text-muted-foreground"
						}`}
					/>
					<p className="text-xs">{title}</p>
				</CardContent>
			</Card>
		);
	};

	const Arrow: React.FC<{
		direction?: "right" | "down";
		isActive: boolean;
	}> = ({ direction = "right", isActive }) => (
		<div className="flex items-center justify-center p-1">
			{direction === "right" ? (
				<ArrowRight
					className={isActive ? "text-primary" : "text-muted-foreground"}
				/>
			) : (
				<ArrowDown
					className={isActive ? "text-primary" : "text-muted-foreground"}
				/>
			)}
		</div>
	);

	const handleStepClick = (step: number) => {
		setCurrentStep(step);
		setIsPlaying(false);
	};

	const isClientInitialActive = currentStep === 1;
	const isServerActive = currentStep >= 2 && currentStep <= 4;
	const isClientFinalActive = currentStep >= 5;

	return (
		<Card className="w-full mx-auto ">
			<CardContent className="p-6 space-y-6">
				<div className="flex justify-center items-center space-x-4">
					<Button
						onClick={() => setIsPlaying(!isPlaying)}
						variant="outline"
						size="sm"
						className="cursor-pointer"
					>
						{isPlaying ? (
							<Pause className="mr-2 h-4 w-4" />
						) : (
							<Play className="mr-2 h-4 w-4" />
						)}
						{isPlaying ? "Pause" : "Play"}
					</Button>
					<p className="text-sm">
						Step: <strong>{currentStep}</strong> of {totalSteps}
					</p>
				</div>

				<div className="space-y-4">
					<Card className={isClientInitialActive ? "border-primary" : ""}>
						<CardHeader>
							<CardTitle className="text-sm">Client - Initial</CardTitle>
						</CardHeader>
						<CardContent className="flex justify-center mb-4">
							<Box
								title="Component Request"
								icon={Globe}
								step={1}
								currentStep={currentStep}
								onClick={handleStepClick}
							/>
						</CardContent>
					</Card>

					<Card className={isServerActive ? "border-primary " : ""}>
						<CardHeader>
							<CardTitle className="text-sm">Server Side</CardTitle>
						</CardHeader>
						<CardContent className="flex items-center justify-between mb-4">
							<Box
								title="Server-Side Rendering"
								icon={Cpu}
								isServer
								step={2}
								currentStep={currentStep}
								onClick={handleStepClick}
							/>
							<Arrow isActive={isServerActive} />
							<Box
								title="Data Fetching"
								icon={Database}
								isServer
								step={3}
								currentStep={currentStep}
								onClick={handleStepClick}
							/>
							<Arrow isActive={isServerActive} />
							<Box
								title="Serialization"
								icon={Package}
								isServer
								step={4}
								currentStep={currentStep}
								onClick={handleStepClick}
							/>
						</CardContent>
					</Card>

					<Card className={isClientFinalActive ? "border-primary" : ""}>
						<CardHeader>
							<CardTitle className="text-sm">Client - Final</CardTitle>
						</CardHeader>
						<CardContent className="flex items-center justify-center space-x-4 mb-4">
							<Box
								title="Client Integration"
								icon={Zap}
								step={5}
								currentStep={currentStep}
								onClick={handleStepClick}
							/>
							<Arrow isActive={isClientFinalActive} />
							<Box
								title="Interactive DOM"
								icon={Palette}
								step={6}
								currentStep={currentStep}
								onClick={handleStepClick}
							/>
						</CardContent>
					</Card>
				</div>

				<Card>
					<CardHeader>
						<CardTitle className="text-sm">
							Step {currentStep}: {stepExplanations[currentStep].title}
						</CardTitle>
					</CardHeader>
					<CardContent>
						<p className="text-sm">
							{stepExplanations[currentStep].description}
						</p>
					</CardContent>
				</Card>

				<Separator />

				<p className="text-xs text-muted-foreground">
					Flow: Request → Server Processing → Data → Serialization → Integration
					→ DOM
				</p>
			</CardContent>
		</Card>
	);
};

export default FlowDiagram;

================
File: components/ui/accordion.tsx
================
"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDownIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Accordion({
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Root>) {
  return <AccordionPrimitive.Root data-slot="accordion" {...props} />
}

function AccordionItem({
  className,
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Item>) {
  return (
    <AccordionPrimitive.Item
      data-slot="accordion-item"
      className={cn("border-b last:border-b-0", className)}
      {...props}
    />
  )
}

function AccordionTrigger({
  className,
  children,
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Trigger>) {
  return (
    <AccordionPrimitive.Header className="flex">
      <AccordionPrimitive.Trigger
        data-slot="accordion-trigger"
        className={cn(
          "focus-visible:border-ring focus-visible:ring-ring/50 flex flex-1 items-start justify-between gap-4 rounded-md py-4 text-left text-sm font-medium transition-all outline-none hover:underline focus-visible:ring-[3px] disabled:pointer-events-none disabled:opacity-50 [&[data-state=open]>svg]:rotate-180",
          className
        )}
        {...props}
      >
        {children}
        <ChevronDownIcon className="text-muted-foreground pointer-events-none size-4 shrink-0 translate-y-0.5 transition-transform duration-200" />
      </AccordionPrimitive.Trigger>
    </AccordionPrimitive.Header>
  )
}

function AccordionContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Content>) {
  return (
    <AccordionPrimitive.Content
      data-slot="accordion-content"
      className="data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down overflow-hidden text-sm"
      {...props}
    >
      <div className={cn("pt-0 pb-4", className)}>{children}</div>
    </AccordionPrimitive.Content>
  )
}

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }

================
File: components/ui/alert-dialog.tsx
================
"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

function AlertDialog({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Root>) {
  return <AlertDialogPrimitive.Root data-slot="alert-dialog" {...props} />
}

function AlertDialogTrigger({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Trigger>) {
  return (
    <AlertDialogPrimitive.Trigger data-slot="alert-dialog-trigger" {...props} />
  )
}

function AlertDialogPortal({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Portal>) {
  return (
    <AlertDialogPrimitive.Portal data-slot="alert-dialog-portal" {...props} />
  )
}

function AlertDialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Overlay>) {
  return (
    <AlertDialogPrimitive.Overlay
      data-slot="alert-dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/80",
        className
      )}
      {...props}
    />
  )
}

function AlertDialogContent({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Content>) {
  return (
    <AlertDialogPortal>
      <AlertDialogOverlay />
      <AlertDialogPrimitive.Content
        data-slot="alert-dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      />
    </AlertDialogPortal>
  )
}

function AlertDialogHeader({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}

function AlertDialogFooter({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}

function AlertDialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Title>) {
  return (
    <AlertDialogPrimitive.Title
      data-slot="alert-dialog-title"
      className={cn("text-lg font-semibold", className)}
      {...props}
    />
  )
}

function AlertDialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Description>) {
  return (
    <AlertDialogPrimitive.Description
      data-slot="alert-dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function AlertDialogAction({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Action>) {
  return (
    <AlertDialogPrimitive.Action
      className={cn(buttonVariants(), className)}
      {...props}
    />
  )
}

function AlertDialogCancel({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Cancel>) {
  return (
    <AlertDialogPrimitive.Cancel
      className={cn(buttonVariants({ variant: "outline" }), className)}
      {...props}
    />
  )
}

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}

================
File: components/ui/alert.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-0.5 items-start [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "text-destructive-foreground [&>svg]:text-current *:data-[slot=alert-description]:text-destructive-foreground/80",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Alert({
  className,
  variant,
  ...props
}: React.ComponentProps<"div"> & VariantProps<typeof alertVariants>) {
  return (
    <div
      data-slot="alert"
      role="alert"
      className={cn(alertVariants({ variant }), className)}
      {...props}
    />
  )
}

function AlertTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-title"
      className={cn(
        "col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight",
        className
      )}
      {...props}
    />
  )
}

function AlertDescription({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-description"
      className={cn(
        "text-muted-foreground col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed",
        className
      )}
      {...props}
    />
  )
}

export { Alert, AlertTitle, AlertDescription }

================
File: components/ui/aspect-ratio.tsx
================
"use client"

import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

function AspectRatio({
  ...props
}: React.ComponentProps<typeof AspectRatioPrimitive.Root>) {
  return <AspectRatioPrimitive.Root data-slot="aspect-ratio" {...props} />
}

export { AspectRatio }

================
File: components/ui/AuthorDisplay.tsx
================
import Image from "next/image";

interface AuthorDisplayProps {
	author: {
		name: string;
		image: string;
	};
	className?: string;
	imageSize?: number;
}

export default function AuthorDisplay({
	author,
	className,
	imageSize = 48,
}: AuthorDisplayProps) {
	return (
		<div className={`flex items-center gap-3 ${className}`}>
			<Image
				src={author.image}
				alt={author.name}
				className="rounded-full"
				width={imageSize}
				height={imageSize}
			/>
			<p className="text-fd-muted-foreground">{author.name}</p>
		</div>
	);
}

================
File: components/ui/avatar.tsx
================
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

function Avatar({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Root>) {
  return (
    <AvatarPrimitive.Root
      data-slot="avatar"
      className={cn(
        "relative flex size-8 shrink-0 overflow-hidden rounded-full",
        className
      )}
      {...props}
    />
  )
}

function AvatarImage({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Image>) {
  return (
    <AvatarPrimitive.Image
      data-slot="avatar-image"
      className={cn("aspect-square size-full", className)}
      {...props}
    />
  )
}

function AvatarFallback({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {
  return (
    <AvatarPrimitive.Fallback
      data-slot="avatar-fallback"
      className={cn(
        "bg-muted flex size-full items-center justify-center rounded-full",
        className
      )}
      {...props}
    />
  )
}

export { Avatar, AvatarImage, AvatarFallback }

================
File: components/ui/Badge.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-auto",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90",
        destructive:
          "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40",
        outline:
          "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Badge({
  className,
  variant,
  asChild = false,
  ...props
}: React.ComponentProps<"span"> &
  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : "span"

  return (
    <Comp
      data-slot="badge"
      className={cn(badgeVariants({ variant }), className)}
      {...props}
    />
  )
}

export { Badge, badgeVariants }

================
File: components/ui/BlogCard.tsx
================
"use client";

import UnicornScene from "@/app/helpers/Unicorn-studio";
import { ArrowRightIcon } from "lucide-react";
import { motion } from "motion/react";

import { H4, P } from "../typography";
import { cn } from "@/lib/utils";
import Link from "next/link";

interface BlogCardProps {
	title: string;
	description: string | undefined;
	author:
		| {
				name: string;
				avatar: string;
		  }
		| undefined;
	date: string | undefined;
	projectId: string;
	className?: string;
	slug: string;
}

export default function BlogCard({
	title,
	description,
	projectId,
	className,
	slug,
}: BlogCardProps) {
	return (
		<motion.div
			transition={{ type: "spring", stiffness: 300, damping: 20 }}
			className={cn("w-full cursor-pointer group", className)}
		>
			<Link href={`/blog/${slug}`} prefetch={true} rel="noopener noreferrer">
				<article className="relative w-full h-full min-h-[400px] overflow-hidden border-b border-[bg-fd-muted-foreground] border-dashed text-fd-muted-foreground">
					<UnicornScene
						height="400px"
						width="100%"
						projectId={projectId}
						className="absolute inset-0 z-10 w-full h-full object-cover"
					/>
					<div className="absolute inset-0 z-20 bg-gradient-to-b from-black via-transparent to-black" />
					<div className="absolute inset-10 z-20">
						<div className="flex items-center justify-between">
							<H4>{title}</H4>
							<div className="z-20 items-center gap-2 opacity-100 md:opacity-0 md:group-hover:opacity-100 transition-opacity duration-200">
								<div className="flex items-center gap-1">
									<P className="text-center text-md text-fd-muted-foreground">
										Read more
									</P>
									<ArrowRightIcon className="text-fd-muted-foreground w-4 h-4" />
								</div>
							</div>
						</div>
					</div>

					<div className="absolute bottom-10 left-10 z-20">
						<P className="text-fd-muted-foreground">{description}</P>
					</div>
				</article>
			</Link>
		</motion.div>
	);
}

================
File: components/ui/breadcrumb.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

function Breadcrumb({ ...props }: React.ComponentProps<"nav">) {
  return <nav aria-label="breadcrumb" data-slot="breadcrumb" {...props} />
}

function BreadcrumbList({ className, ...props }: React.ComponentProps<"ol">) {
  return (
    <ol
      data-slot="breadcrumb-list"
      className={cn(
        "text-muted-foreground flex flex-wrap items-center gap-1.5 text-sm break-words sm:gap-2.5",
        className
      )}
      {...props}
    />
  )
}

function BreadcrumbItem({ className, ...props }: React.ComponentProps<"li">) {
  return (
    <li
      data-slot="breadcrumb-item"
      className={cn("inline-flex items-center gap-1.5", className)}
      {...props}
    />
  )
}

function BreadcrumbLink({
  asChild,
  className,
  ...props
}: React.ComponentProps<"a"> & {
  asChild?: boolean
}) {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      data-slot="breadcrumb-link"
      className={cn("hover:text-foreground transition-colors", className)}
      {...props}
    />
  )
}

function BreadcrumbPage({ className, ...props }: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="breadcrumb-page"
      role="link"
      aria-disabled="true"
      aria-current="page"
      className={cn("text-foreground font-normal", className)}
      {...props}
    />
  )
}

function BreadcrumbSeparator({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) {
  return (
    <li
      data-slot="breadcrumb-separator"
      role="presentation"
      aria-hidden="true"
      className={cn("[&>svg]:size-3.5", className)}
      {...props}
    >
      {children ?? <ChevronRight />}
    </li>
  )
}

function BreadcrumbEllipsis({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="breadcrumb-ellipsis"
      role="presentation"
      aria-hidden="true"
      className={cn("flex size-9 items-center justify-center", className)}
      {...props}
    >
      <MoreHorizontal className="size-4" />
      <span className="sr-only">More</span>
    </span>
  )
}

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}

================
File: components/ui/button.tsx
================
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const buttonVariants = cva(
	"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-[color,box-shadow] disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
	{
		variants: {
			variant: {
				default:
					"bg-primary text-primary-foreground shadow-sm hover:bg-primary/90",
				destructive:
					"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40",
				outline:
					"border border-input bg-background shadow-xs hover:bg-accent hover:text-accent-foreground",
				secondary:
					"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
				ghost: "hover:bg-accent hover:text-accent-foreground",
				link: "text-primary underline-offset-4 hover:underline",
			},
			size: {
				default: "h-9 px-4 py-2 has-[>svg]:px-3",
				sm: "h-8 rounded-md px-3 has-[>svg]:px-2.5",
				lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
				icon: "size-9",
			},
		},
		defaultVariants: {
			variant: "default",
			size: "default",
		},
	}
);

function Button({
	className,
	variant,
	size,
	asChild = false,
	...props
}: React.ComponentProps<"button"> &
	VariantProps<typeof buttonVariants> & {
		asChild?: boolean;
	}) {
	const Comp = asChild ? Slot : "button";

	return (
		<Comp
			data-slot="button"
			className={cn(buttonVariants({ variant, size, className }))}
			{...props}
		/>
	);
}

export { Button, buttonVariants };

================
File: components/ui/calendar.tsx
================
"use client"

import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: React.ComponentProps<typeof DayPicker>) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row gap-2",
        month: "flex flex-col gap-4",
        caption: "flex justify-center pt-1 relative items-center w-full",
        caption_label: "text-sm font-medium",
        nav: "flex items-center gap-1",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "size-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-x-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: cn(
          "relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-range-end)]:rounded-r-md",
          props.mode === "range"
            ? "[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md"
            : "[&:has([aria-selected])]:rounded-md"
        ),
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "size-8 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_start:
          "day-range-start aria-selected:bg-primary aria-selected:text-primary-foreground",
        day_range_end:
          "day-range-end aria-selected:bg-primary aria-selected:text-primary-foreground",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ className, ...props }) => (
          <ChevronLeft className={cn("size-4", className)} {...props} />
        ),
        IconRight: ({ className, ...props }) => (
          <ChevronRight className={cn("size-4", className)} {...props} />
        ),
      }}
      {...props}
    />
  )
}

export { Calendar }

================
File: components/ui/card.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

function Card({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border shadow-sm",
        className
      )}
      {...props}
    />
  )
}

function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn("flex flex-col gap-1.5 px-6 pt-6", className)}
      {...props}
    />
  )
}

function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  )
}

function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-content"
      className={cn("px-6", className)}
      {...props}
    />
  )
}

function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6 pb-6", className)}
      {...props}
    />
  )
}

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: components/ui/carousel.tsx
================
"use client"

import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

function Carousel({
  orientation = "horizontal",
  opts,
  setApi,
  plugins,
  className,
  children,
  ...props
}: React.ComponentProps<"div"> & CarouselProps) {
  const [carouselRef, api] = useEmblaCarousel(
    {
      ...opts,
      axis: orientation === "horizontal" ? "x" : "y",
    },
    plugins
  )
  const [canScrollPrev, setCanScrollPrev] = React.useState(false)
  const [canScrollNext, setCanScrollNext] = React.useState(false)

  const onSelect = React.useCallback((api: CarouselApi) => {
    if (!api) return
    setCanScrollPrev(api.canScrollPrev())
    setCanScrollNext(api.canScrollNext())
  }, [])

  const scrollPrev = React.useCallback(() => {
    api?.scrollPrev()
  }, [api])

  const scrollNext = React.useCallback(() => {
    api?.scrollNext()
  }, [api])

  const handleKeyDown = React.useCallback(
    (event: React.KeyboardEvent<HTMLDivElement>) => {
      if (event.key === "ArrowLeft") {
        event.preventDefault()
        scrollPrev()
      } else if (event.key === "ArrowRight") {
        event.preventDefault()
        scrollNext()
      }
    },
    [scrollPrev, scrollNext]
  )

  React.useEffect(() => {
    if (!api || !setApi) return
    setApi(api)
  }, [api, setApi])

  React.useEffect(() => {
    if (!api) return
    onSelect(api)
    api.on("reInit", onSelect)
    api.on("select", onSelect)

    return () => {
      api?.off("select", onSelect)
    }
  }, [api, onSelect])

  return (
    <CarouselContext.Provider
      value={{
        carouselRef,
        api: api,
        opts,
        orientation:
          orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
        scrollPrev,
        scrollNext,
        canScrollPrev,
        canScrollNext,
      }}
    >
      <div
        onKeyDownCapture={handleKeyDown}
        className={cn("relative", className)}
        role="region"
        aria-roledescription="carousel"
        data-slot="carousel"
        {...props}
      >
        {children}
      </div>
    </CarouselContext.Provider>
  )
}

function CarouselContent({ className, ...props }: React.ComponentProps<"div">) {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div
      ref={carouselRef}
      className="overflow-hidden"
      data-slot="carousel-content"
    >
      <div
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
}

function CarouselItem({ className, ...props }: React.ComponentProps<"div">) {
  const { orientation } = useCarousel()

  return (
    <div
      role="group"
      aria-roledescription="slide"
      data-slot="carousel-item"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
}

function CarouselPrevious({
  className,
  variant = "outline",
  size = "icon",
  ...props
}: React.ComponentProps<typeof Button>) {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      data-slot="carousel-previous"
      variant={variant}
      size={size}
      className={cn(
        "absolute size-8 rounded-full",
        orientation === "horizontal"
          ? "top-1/2 -left-12 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
}

function CarouselNext({
  className,
  variant = "outline",
  size = "icon",
  ...props
}: React.ComponentProps<typeof Button>) {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      data-slot="carousel-next"
      variant={variant}
      size={size}
      className={cn(
        "absolute size-8 rounded-full",
        orientation === "horizontal"
          ? "top-1/2 -right-12 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight />
      <span className="sr-only">Next slide</span>
    </Button>
  )
}

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}

================
File: components/ui/chart.tsx
================
"use client"

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

function ChartContainer({
  id,
  className,
  children,
  config,
  ...props
}: React.ComponentProps<"div"> & {
  config: ChartConfig
  children: React.ComponentProps<
    typeof RechartsPrimitive.ResponsiveContainer
  >["children"]
}) {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-slot="chart"
        data-chart={chartId}
        className={cn(
          "[&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border flex aspect-video justify-center text-xs [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-hidden [&_.recharts-sector]:outline-hidden [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-surface]:outline-hidden",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
}

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

function ChartTooltipContent({
  active,
  payload,
  className,
  indicator = "dot",
  hideLabel = false,
  hideIndicator = false,
  label,
  labelFormatter,
  labelClassName,
  formatter,
  color,
  nameKey,
  labelKey,
}: React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
  React.ComponentProps<"div"> & {
    hideLabel?: boolean
    hideIndicator?: boolean
    indicator?: "line" | "dot" | "dashed"
    nameKey?: string
    labelKey?: string
  }) {
  const { config } = useChart()

  const tooltipLabel = React.useMemo(() => {
    if (hideLabel || !payload?.length) {
      return null
    }

    const [item] = payload
    const key = `${labelKey || item.dataKey || item.name || "value"}`
    const itemConfig = getPayloadConfigFromPayload(config, item, key)
    const value =
      !labelKey && typeof label === "string"
        ? config[label as keyof typeof config]?.label || label
        : itemConfig?.label

    if (labelFormatter) {
      return (
        <div className={cn("font-medium", labelClassName)}>
          {labelFormatter(value, payload)}
        </div>
      )
    }

    if (!value) {
      return null
    }

    return <div className={cn("font-medium", labelClassName)}>{value}</div>
  }, [
    label,
    labelFormatter,
    payload,
    hideLabel,
    labelClassName,
    config,
    labelKey,
  ])

  if (!active || !payload?.length) {
    return null
  }

  const nestLabel = payload.length === 1 && indicator !== "dot"

  return (
    <div
      className={cn(
        "border-border/50 bg-background grid min-w-[8rem] items-start gap-1.5 rounded-lg border px-2.5 py-1.5 text-xs shadow-xl",
        className
      )}
    >
      {!nestLabel ? tooltipLabel : null}
      <div className="grid gap-1.5">
        {payload.map((item, index) => {
          const key = `${nameKey || item.name || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)
          const indicatorColor = color || item.payload.fill || item.color

          return (
            <div
              key={item.dataKey}
              className={cn(
                "[&>svg]:text-muted-foreground flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5",
                indicator === "dot" && "items-center"
              )}
            >
              {formatter && item?.value !== undefined && item.name ? (
                formatter(item.value, item.name, item, index, item.payload)
              ) : (
                <>
                  {itemConfig?.icon ? (
                    <itemConfig.icon />
                  ) : (
                    !hideIndicator && (
                      <div
                        className={cn(
                          "shrink-0 rounded-[2px] border-(--color-border) bg-(--color-bg)",
                          {
                            "h-2.5 w-2.5": indicator === "dot",
                            "w-1": indicator === "line",
                            "w-0 border-[1.5px] border-dashed bg-transparent":
                              indicator === "dashed",
                            "my-0.5": nestLabel && indicator === "dashed",
                          }
                        )}
                        style={
                          {
                            "--color-bg": indicatorColor,
                            "--color-border": indicatorColor,
                          } as React.CSSProperties
                        }
                      />
                    )
                  )}
                  <div
                    className={cn(
                      "flex flex-1 justify-between leading-none",
                      nestLabel ? "items-end" : "items-center"
                    )}
                  >
                    <div className="grid gap-1.5">
                      {nestLabel ? tooltipLabel : null}
                      <span className="text-muted-foreground">
                        {itemConfig?.label || item.name}
                      </span>
                    </div>
                    {item.value && (
                      <span className="text-foreground font-mono font-medium tabular-nums">
                        {item.value.toLocaleString()}
                      </span>
                    )}
                  </div>
                </>
              )}
            </div>
          )
        })}
      </div>
    </div>
  )
}

const ChartLegend = RechartsPrimitive.Legend

function ChartLegendContent({
  className,
  hideIcon = false,
  payload,
  verticalAlign = "bottom",
  nameKey,
}: React.ComponentProps<"div"> &
  Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
    hideIcon?: boolean
    nameKey?: string
  }) {
  const { config } = useChart()

  if (!payload?.length) {
    return null
  }

  return (
    <div
      className={cn(
        "flex items-center justify-center gap-4",
        verticalAlign === "top" ? "pb-3" : "pt-3",
        className
      )}
    >
      {payload.map((item) => {
        const key = `${nameKey || item.dataKey || "value"}`
        const itemConfig = getPayloadConfigFromPayload(config, item, key)

        return (
          <div
            key={item.value}
            className={cn(
              "[&>svg]:text-muted-foreground flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3"
            )}
          >
            {itemConfig?.icon && !hideIcon ? (
              <itemConfig.icon />
            ) : (
              <div
                className="h-2 w-2 shrink-0 rounded-[2px]"
                style={{
                  backgroundColor: item.color,
                }}
              />
            )}
            {itemConfig?.label}
          </div>
        )
      })}
    </div>
  )
}

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}

================
File: components/ui/checkbox.tsx
================
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { CheckIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Checkbox({
  className,
  ...props
}: React.ComponentProps<typeof CheckboxPrimitive.Root>) {
  return (
    <CheckboxPrimitive.Root
      data-slot="checkbox"
      className={cn(
        "peer border-input data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <CheckboxPrimitive.Indicator
        data-slot="checkbox-indicator"
        className="flex items-center justify-center text-current"
      >
        <CheckIcon className="size-3.5" />
      </CheckboxPrimitive.Indicator>
    </CheckboxPrimitive.Root>
  )
}

export { Checkbox }

================
File: components/ui/collapsible.tsx
================
"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

function Collapsible({
  ...props
}: React.ComponentProps<typeof CollapsiblePrimitive.Root>) {
  return <CollapsiblePrimitive.Root data-slot="collapsible" {...props} />
}

function CollapsibleTrigger({
  ...props
}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleTrigger>) {
  return (
    <CollapsiblePrimitive.CollapsibleTrigger
      data-slot="collapsible-trigger"
      {...props}
    />
  )
}

function CollapsibleContent({
  ...props
}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleContent>) {
  return (
    <CollapsiblePrimitive.CollapsibleContent
      data-slot="collapsible-content"
      {...props}
    />
  )
}

export { Collapsible, CollapsibleTrigger, CollapsibleContent }

================
File: components/ui/command.tsx
================
"use client"

import * as React from "react"
import { Command as CommandPrimitive } from "cmdk"
import { SearchIcon } from "lucide-react"

import { cn } from "@/lib/utils"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"

function Command({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive>) {
  return (
    <CommandPrimitive
      data-slot="command"
      className={cn(
        "bg-popover text-popover-foreground flex h-full w-full flex-col overflow-hidden rounded-md",
        className
      )}
      {...props}
    />
  )
}

function CommandDialog({
  title = "Command Palette",
  description = "Search for a command to run...",
  children,
  ...props
}: React.ComponentProps<typeof Dialog> & {
  title?: string
  description?: string
}) {
  return (
    <Dialog {...props}>
      <DialogHeader className="sr-only">
        <DialogTitle>{title}</DialogTitle>
        <DialogDescription>{description}</DialogDescription>
      </DialogHeader>
      <DialogContent className="overflow-hidden p-0">
        <Command className="[&_[cmdk-group-heading]]:text-muted-foreground **:data-[slot=command-input-wrapper]:h-12 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group]]:px-2 [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

function CommandInput({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Input>) {
  return (
    <div
      data-slot="command-input-wrapper"
      className="flex h-9 items-center gap-2 border-b px-3"
    >
      <SearchIcon className="size-4 shrink-0 opacity-50" />
      <CommandPrimitive.Input
        data-slot="command-input"
        className={cn(
          "placeholder:text-muted-foreground flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-hidden disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        {...props}
      />
    </div>
  )
}

function CommandList({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.List>) {
  return (
    <CommandPrimitive.List
      data-slot="command-list"
      className={cn(
        "max-h-[300px] scroll-py-1 overflow-x-hidden overflow-y-auto",
        className
      )}
      {...props}
    />
  )
}

function CommandEmpty({
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Empty>) {
  return (
    <CommandPrimitive.Empty
      data-slot="command-empty"
      className="py-6 text-center text-sm"
      {...props}
    />
  )
}

function CommandGroup({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Group>) {
  return (
    <CommandPrimitive.Group
      data-slot="command-group"
      className={cn(
        "text-foreground [&_[cmdk-group-heading]]:text-muted-foreground overflow-hidden p-1 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium",
        className
      )}
      {...props}
    />
  )
}

function CommandSeparator({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Separator>) {
  return (
    <CommandPrimitive.Separator
      data-slot="command-separator"
      className={cn("bg-border -mx-1 h-px", className)}
      {...props}
    />
  )
}

function CommandItem({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Item>) {
  return (
    <CommandPrimitive.Item
      data-slot="command-item"
      className={cn(
        "data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function CommandShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="command-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className
      )}
      {...props}
    />
  )
}

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}

================
File: components/ui/context-menu.tsx
================
"use client"

import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { CheckIcon, ChevronRightIcon, CircleIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function ContextMenu({
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Root>) {
  return <ContextMenuPrimitive.Root data-slot="context-menu" {...props} />
}

function ContextMenuTrigger({
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Trigger>) {
  return (
    <ContextMenuPrimitive.Trigger data-slot="context-menu-trigger" {...props} />
  )
}

function ContextMenuGroup({
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Group>) {
  return (
    <ContextMenuPrimitive.Group data-slot="context-menu-group" {...props} />
  )
}

function ContextMenuPortal({
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Portal>) {
  return (
    <ContextMenuPrimitive.Portal data-slot="context-menu-portal" {...props} />
  )
}

function ContextMenuSub({
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Sub>) {
  return <ContextMenuPrimitive.Sub data-slot="context-menu-sub" {...props} />
}

function ContextMenuRadioGroup({
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.RadioGroup>) {
  return (
    <ContextMenuPrimitive.RadioGroup
      data-slot="context-menu-radio-group"
      {...props}
    />
  )
}

function ContextMenuSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.SubTrigger> & {
  inset?: boolean
}) {
  return (
    <ContextMenuPrimitive.SubTrigger
      data-slot="context-menu-sub-trigger"
      data-inset={inset}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      {children}
      <ChevronRightIcon className="ml-auto" />
    </ContextMenuPrimitive.SubTrigger>
  )
}

function ContextMenuSubContent({
  className,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.SubContent>) {
  return (
    <ContextMenuPrimitive.SubContent
      data-slot="context-menu-sub-content"
      className={cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] overflow-hidden rounded-md border p-1 shadow-lg",
        className
      )}
      {...props}
    />
  )
}

function ContextMenuContent({
  className,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Content>) {
  return (
    <ContextMenuPrimitive.Portal>
      <ContextMenuPrimitive.Content
        data-slot="context-menu-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] overflow-hidden rounded-md border p-1 shadow-md",
          className
        )}
        {...props}
      />
    </ContextMenuPrimitive.Portal>
  )
}

function ContextMenuItem({
  className,
  inset,
  variant = "default",
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Item> & {
  inset?: boolean
  variant?: "default" | "destructive"
}) {
  return (
    <ContextMenuPrimitive.Item
      data-slot="context-menu-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive-foreground data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/40 data-[variant=destructive]:focus:text-destructive-foreground data-[variant=destructive]:*:[svg]:!text-destructive-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function ContextMenuCheckboxItem({
  className,
  children,
  checked,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.CheckboxItem>) {
  return (
    <ContextMenuPrimitive.CheckboxItem
      data-slot="context-menu-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      checked={checked}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <ContextMenuPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </ContextMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </ContextMenuPrimitive.CheckboxItem>
  )
}

function ContextMenuRadioItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.RadioItem>) {
  return (
    <ContextMenuPrimitive.RadioItem
      data-slot="context-menu-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <ContextMenuPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </ContextMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </ContextMenuPrimitive.RadioItem>
  )
}

function ContextMenuLabel({
  className,
  inset,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Label> & {
  inset?: boolean
}) {
  return (
    <ContextMenuPrimitive.Label
      data-slot="context-menu-label"
      data-inset={inset}
      className={cn(
        "text-foreground px-2 py-1.5 text-sm font-medium data-[inset]:pl-8",
        className
      )}
      {...props}
    />
  )
}

function ContextMenuSeparator({
  className,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Separator>) {
  return (
    <ContextMenuPrimitive.Separator
      data-slot="context-menu-separator"
      className={cn("bg-border -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function ContextMenuShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="context-menu-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className
      )}
      {...props}
    />
  )
}

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}

================
File: components/ui/dialog.tsx
================
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Dialog({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Root>) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />
}

function DialogTrigger({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />
}

function DialogPortal({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Portal>) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />
}

function DialogClose({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Close>) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />
}

function DialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/80",
        className
      )}
      {...props}
    />
  )
}

function DialogContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Content>) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      >
        {children}
        <DialogPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4">
          <XIcon />
          <span className="sr-only">Close</span>
        </DialogPrimitive.Close>
      </DialogPrimitive.Content>
    </DialogPortal>
  )
}

function DialogHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}

function DialogFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}

function DialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Title>) {
  return (
    <DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn("text-lg leading-none font-semibold", className)}
      {...props}
    />
  )
}

function DialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Description>) {
  return (
    <DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
}

================
File: components/ui/drawer.tsx
================
"use client"

import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

function Drawer({
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) {
  return <DrawerPrimitive.Root data-slot="drawer" {...props} />
}

function DrawerTrigger({
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Trigger>) {
  return <DrawerPrimitive.Trigger data-slot="drawer-trigger" {...props} />
}

function DrawerPortal({
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Portal>) {
  return <DrawerPrimitive.Portal data-slot="drawer-portal" {...props} />
}

function DrawerClose({
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Close>) {
  return <DrawerPrimitive.Close data-slot="drawer-close" {...props} />
}

function DrawerOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Overlay>) {
  return (
    <DrawerPrimitive.Overlay
      data-slot="drawer-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/80",
        className
      )}
      {...props}
    />
  )
}

function DrawerContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Content>) {
  return (
    <DrawerPortal data-slot="drawer-portal">
      <DrawerOverlay />
      <DrawerPrimitive.Content
        data-slot="drawer-content"
        className={cn(
          "group/drawer-content bg-background fixed z-50 flex h-auto flex-col",
          "data-[vaul-drawer-direction=top]:inset-x-0 data-[vaul-drawer-direction=top]:top-0 data-[vaul-drawer-direction=top]:mb-24 data-[vaul-drawer-direction=top]:max-h-[80vh] data-[vaul-drawer-direction=top]:rounded-b-lg",
          "data-[vaul-drawer-direction=bottom]:inset-x-0 data-[vaul-drawer-direction=bottom]:bottom-0 data-[vaul-drawer-direction=bottom]:mt-24 data-[vaul-drawer-direction=bottom]:max-h-[80vh] data-[vaul-drawer-direction=bottom]:rounded-t-lg",
          "data-[vaul-drawer-direction=right]:inset-y-0 data-[vaul-drawer-direction=right]:right-0 data-[vaul-drawer-direction=right]:w-3/4 data-[vaul-drawer-direction=right]:sm:max-w-sm",
          "data-[vaul-drawer-direction=left]:inset-y-0 data-[vaul-drawer-direction=left]:left-0 data-[vaul-drawer-direction=left]:w-3/4 data-[vaul-drawer-direction=left]:sm:max-w-sm",
          className
        )}
        {...props}
      >
        <div className="bg-muted mx-auto mt-4 hidden h-2 w-[100px] shrink-0 rounded-full group-data-[vaul-drawer-direction=bottom]/drawer-content:block" />
        {children}
      </DrawerPrimitive.Content>
    </DrawerPortal>
  )
}

function DrawerHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="drawer-header"
      className={cn("flex flex-col gap-1.5 p-4", className)}
      {...props}
    />
  )
}

function DrawerFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="drawer-footer"
      className={cn("mt-auto flex flex-col gap-2 p-4", className)}
      {...props}
    />
  )
}

function DrawerTitle({
  className,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Title>) {
  return (
    <DrawerPrimitive.Title
      data-slot="drawer-title"
      className={cn("text-foreground font-semibold", className)}
      {...props}
    />
  )
}

function DrawerDescription({
  className,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Description>) {
  return (
    <DrawerPrimitive.Description
      data-slot="drawer-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}

================
File: components/ui/dropdown-menu.tsx
================
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { CheckIcon, ChevronRightIcon, CircleIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function DropdownMenu({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {
  return <DropdownMenuPrimitive.Root data-slot="dropdown-menu" {...props} />
}

function DropdownMenuPortal({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {
  return (
    <DropdownMenuPrimitive.Portal data-slot="dropdown-menu-portal" {...props} />
  )
}

function DropdownMenuTrigger({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {
  return (
    <DropdownMenuPrimitive.Trigger
      data-slot="dropdown-menu-trigger"
      {...props}
    />
  )
}

function DropdownMenuContent({
  className,
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {
  return (
    <DropdownMenuPrimitive.Portal>
      <DropdownMenuPrimitive.Content
        data-slot="dropdown-menu-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] overflow-hidden rounded-md border p-1 shadow-md",
          className
        )}
        {...props}
      />
    </DropdownMenuPrimitive.Portal>
  )
}

function DropdownMenuGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {
  return (
    <DropdownMenuPrimitive.Group data-slot="dropdown-menu-group" {...props} />
  )
}

function DropdownMenuItem({
  className,
  inset,
  variant = "default",
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {
  inset?: boolean
  variant?: "default" | "destructive"
}) {
  return (
    <DropdownMenuPrimitive.Item
      data-slot="dropdown-menu-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive-foreground data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/40 data-[variant=destructive]:focus:text-destructive-foreground data-[variant=destructive]:*:[svg]:!text-destructive-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuCheckboxItem({
  className,
  children,
  checked,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {
  return (
    <DropdownMenuPrimitive.CheckboxItem
      data-slot="dropdown-menu-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      checked={checked}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.CheckboxItem>
  )
}

function DropdownMenuRadioGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {
  return (
    <DropdownMenuPrimitive.RadioGroup
      data-slot="dropdown-menu-radio-group"
      {...props}
    />
  )
}

function DropdownMenuRadioItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {
  return (
    <DropdownMenuPrimitive.RadioItem
      data-slot="dropdown-menu-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.RadioItem>
  )
}

function DropdownMenuLabel({
  className,
  inset,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {
  inset?: boolean
}) {
  return (
    <DropdownMenuPrimitive.Label
      data-slot="dropdown-menu-label"
      data-inset={inset}
      className={cn(
        "px-2 py-1.5 text-sm font-medium data-[inset]:pl-8",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuSeparator({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {
  return (
    <DropdownMenuPrimitive.Separator
      data-slot="dropdown-menu-separator"
      className={cn("bg-border -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function DropdownMenuShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="dropdown-menu-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuSub({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {
  return <DropdownMenuPrimitive.Sub data-slot="dropdown-menu-sub" {...props} />
}

function DropdownMenuSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {
  inset?: boolean
}) {
  return (
    <DropdownMenuPrimitive.SubTrigger
      data-slot="dropdown-menu-sub-trigger"
      data-inset={inset}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8",
        className
      )}
      {...props}
    >
      {children}
      <ChevronRightIcon className="ml-auto size-4" />
    </DropdownMenuPrimitive.SubTrigger>
  )
}

function DropdownMenuSubContent({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {
  return (
    <DropdownMenuPrimitive.SubContent
      data-slot="dropdown-menu-sub-content"
      className={cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] overflow-hidden rounded-md border p-1 shadow-lg",
        className
      )}
      {...props}
    />
  )
}

export {
  DropdownMenu,
  DropdownMenuPortal,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuLabel,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuSub,
  DropdownMenuSubTrigger,
  DropdownMenuSubContent,
}

================
File: components/ui/FeatureCard.tsx
================
import {
	Card,
	CardContent,
	CardFooter,
	CardHeader,
	CardTitle,
} from "@/components/ui/card";
import { AuthorDisplay } from "@/components/AuthorsDisplay";
import { Badge } from "@/components/ui/Badge";
import Link from "next/link";
import { Button } from "./button";
import { ArrowRightIcon } from "lucide-react";

interface FeatureCardProps {
	tag?: string;
	title: string;
	description: string;
	author: {
		name: string;
		image: string;
	};
	className?: string;
	href?: string;
}

export function FeatureCard({
	tag = "Featured Post",
	title,
	description,
	author,
	className,
	href = "#",
}: FeatureCardProps) {
	return (
		<Link href={href} className={className}>
			<Card className="h-full flex flex-col border border-dashed bg-black rounded-none group transition-all hover:bg-fd-muted-foreground/5 duration-300">
				<CardHeader>
					{tag && (
						<Badge variant="outline" className="mb-4 py-2 px-4 rounded-full">
							<span className="primary-gradient">{tag}</span>
						</Badge>
					)}

					<CardTitle>{title}</CardTitle>
				</CardHeader>
				<CardContent className="flex-grow">
					<p className="text-muted-foreground">{description}</p>
				</CardContent>
				<CardFooter className="flex items-center justify-between">
					<AuthorDisplay author={author} />
					<Button
						variant="link"
						className="text-muted-foreground opacity-0 group-hover:opacity-100 transition-all duration-300"
					>
						<span className="flex items-center gap-2">
							Read more
							<ArrowRightIcon className="w-4 h-4" />
						</span>
					</Button>
				</CardFooter>
			</Card>
		</Link>
	);
}

================
File: components/ui/form.tsx
================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
  useFormState,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState } = useFormContext()
  const formState = useFormState({ name: fieldContext.name })
  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

function FormItem({ className, ...props }: React.ComponentProps<"div">) {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div
        data-slot="form-item"
        className={cn("grid gap-2", className)}
        {...props}
      />
    </FormItemContext.Provider>
  )
}

function FormLabel({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  const { error, formItemId } = useFormField()

  return (
    <Label
      data-slot="form-label"
      data-error={!!error}
      className={cn("data-[error=true]:text-destructive-foreground", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
}

function FormControl({ ...props }: React.ComponentProps<typeof Slot>) {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      data-slot="form-control"
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
}

function FormDescription({ className, ...props }: React.ComponentProps<"p">) {
  const { formDescriptionId } = useFormField()

  return (
    <p
      data-slot="form-description"
      id={formDescriptionId}
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function FormMessage({ className, ...props }: React.ComponentProps<"p">) {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : props.children

  if (!body) {
    return null
  }

  return (
    <p
      data-slot="form-message"
      id={formMessageId}
      className={cn("text-destructive-foreground text-sm", className)}
      {...props}
    >
      {body}
    </p>
  )
}

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}

================
File: components/ui/hover-card.tsx
================
"use client"

import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

function HoverCard({
  ...props
}: React.ComponentProps<typeof HoverCardPrimitive.Root>) {
  return <HoverCardPrimitive.Root data-slot="hover-card" {...props} />
}

function HoverCardTrigger({
  ...props
}: React.ComponentProps<typeof HoverCardPrimitive.Trigger>) {
  return (
    <HoverCardPrimitive.Trigger data-slot="hover-card-trigger" {...props} />
  )
}

function HoverCardContent({
  className,
  align = "center",
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof HoverCardPrimitive.Content>) {
  return (
    <HoverCardPrimitive.Content
      data-slot="hover-card-content"
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-64 rounded-md border p-4 shadow-md outline-hidden",
        className
      )}
      {...props}
    />
  )
}

export { HoverCard, HoverCardTrigger, HoverCardContent }

================
File: components/ui/input-otp.tsx
================
"use client"

import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { MinusIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function InputOTP({
  className,
  containerClassName,
  ...props
}: React.ComponentProps<typeof OTPInput> & {
  containerClassName?: string
}) {
  return (
    <OTPInput
      data-slot="input-otp"
      containerClassName={cn(
        "flex items-center gap-2 has-disabled:opacity-50",
        containerClassName
      )}
      className={cn("disabled:cursor-not-allowed", className)}
      {...props}
    />
  )
}

function InputOTPGroup({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="input-otp-group"
      className={cn("flex items-center", className)}
      {...props}
    />
  )
}

function InputOTPSlot({
  index,
  className,
  ...props
}: React.ComponentProps<"div"> & {
  index: number
}) {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      data-slot="input-otp-slot"
      data-active={isActive}
      className={cn(
        "border-input ring-ring/10 dark:ring-ring/20 dark:outline-ring/40 outline-ring/50 relative flex h-9 w-9 items-center justify-center border-y border-r text-sm shadow-xs transition-all first:rounded-l-md first:border-l last:rounded-r-md data-[active=true]:z-10 data-[active=true]:ring-4 data-[active=true]:outline-1",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="animate-caret-blink bg-foreground h-4 w-px duration-1000" />
        </div>
      )}
    </div>
  )
}

function InputOTPSeparator({ ...props }: React.ComponentProps<"div">) {
  return (
    <div data-slot="input-otp-separator" role="separator" {...props}>
      <MinusIcon />
    </div>
  )
}

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }

================
File: components/ui/input.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "border-input file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props}
    />
  )
}

export { Input }

================
File: components/ui/label.tsx
================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"

import { cn } from "@/lib/utils"

function Label({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className
      )}
      {...props}
    />
  )
}

export { Label }

================
File: components/ui/LongCards.tsx
================
import Link from "next/link";
import {
	Card,
	CardContent,
	CardFooter,
	CardHeader,
	CardTitle,
} from "@/components/ui/card";
import { AuthorDisplay } from "@/components/AuthorsDisplay";
import { Button } from "./button";
import { ArrowRightIcon } from "lucide-react";
import Image from "next/image";
import { cn } from "@/lib/utils";
interface LongCardProps {
	title: string;
	description: string;
	author: {
		name: string;
		image: string;
	};
	date: string;
	link: string;
	className?: string;
}

export function LongCard({
	title,
	description,
	author,
	link,
	className,
}: LongCardProps) {
	return (
		<Link href={link} className={cn("relative group", className)}>
			<Image
				src="/public/images/image-test.webp"
				alt="Blog"
				width={1000}
				height={1000}
				className="hidden group-hover:absolute inset-0 object-cover"
			/>
			<Card className="h-full border border-dashed rounded-none group transition-all bg-black hover:bg-fd-muted-foreground/5 duration-300">
				<CardHeader>
					<CardTitle className="line-clamp-1">{title}</CardTitle>
				</CardHeader>
				<CardContent>
					<p className="text-muted-foreground">{description}</p>
				</CardContent>
				<CardFooter className="flex items-center justify-between">
					<AuthorDisplay author={author} />
					<Button
						variant="link"
						className="text-muted-foreground opacity-0 group-hover:opacity-100 transition-all duration-300"
					>
						<span className="flex items-center gap-2">
							Read more
							<ArrowRightIcon className="w-4 h-4" />
						</span>
					</Button>
				</CardFooter>
			</Card>
		</Link>
	);
}

================
File: components/ui/menubar.tsx
================
"use client"

import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { CheckIcon, ChevronRightIcon, CircleIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Menubar({
  className,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Root>) {
  return (
    <MenubarPrimitive.Root
      data-slot="menubar"
      className={cn(
        "bg-background flex h-9 items-center gap-1 rounded-md border p-1 shadow-xs",
        className
      )}
      {...props}
    />
  )
}

function MenubarMenu({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {
  return <MenubarPrimitive.Menu data-slot="menubar-menu" {...props} />
}

function MenubarGroup({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Group>) {
  return <MenubarPrimitive.Group data-slot="menubar-group" {...props} />
}

function MenubarPortal({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {
  return <MenubarPrimitive.Portal data-slot="menubar-portal" {...props} />
}

function MenubarRadioGroup({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {
  return (
    <MenubarPrimitive.RadioGroup data-slot="menubar-radio-group" {...props} />
  )
}

function MenubarTrigger({
  className,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Trigger>) {
  return (
    <MenubarPrimitive.Trigger
      data-slot="menubar-trigger"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex items-center rounded-sm px-2 py-1 text-sm font-medium outline-hidden select-none",
        className
      )}
      {...props}
    />
  )
}

function MenubarContent({
  className,
  align = "start",
  alignOffset = -4,
  sideOffset = 8,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Content>) {
  return (
    <MenubarPortal>
      <MenubarPrimitive.Content
        data-slot="menubar-content"
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[12rem] overflow-hidden rounded-md border p-1 shadow-md",
          className
        )}
        {...props}
      />
    </MenubarPortal>
  )
}

function MenubarItem({
  className,
  inset,
  variant = "default",
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Item> & {
  inset?: boolean
  variant?: "default" | "destructive"
}) {
  return (
    <MenubarPrimitive.Item
      data-slot="menubar-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive-foreground data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/40 data-[variant=destructive]:focus:text-destructive-foreground data-[variant=destructive]:*:[svg]:!text-destructive-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function MenubarCheckboxItem({
  className,
  children,
  checked,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.CheckboxItem>) {
  return (
    <MenubarPrimitive.CheckboxItem
      data-slot="menubar-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-xs py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      checked={checked}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <MenubarPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </MenubarPrimitive.ItemIndicator>
      </span>
      {children}
    </MenubarPrimitive.CheckboxItem>
  )
}

function MenubarRadioItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.RadioItem>) {
  return (
    <MenubarPrimitive.RadioItem
      data-slot="menubar-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-xs py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <MenubarPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </MenubarPrimitive.ItemIndicator>
      </span>
      {children}
    </MenubarPrimitive.RadioItem>
  )
}

function MenubarLabel({
  className,
  inset,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Label> & {
  inset?: boolean
}) {
  return (
    <MenubarPrimitive.Label
      data-slot="menubar-label"
      data-inset={inset}
      className={cn(
        "px-2 py-1.5 text-sm font-medium data-[inset]:pl-8",
        className
      )}
      {...props}
    />
  )
}

function MenubarSeparator({
  className,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Separator>) {
  return (
    <MenubarPrimitive.Separator
      data-slot="menubar-separator"
      className={cn("bg-border -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function MenubarShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="menubar-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className
      )}
      {...props}
    />
  )
}

function MenubarSub({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {
  return <MenubarPrimitive.Sub data-slot="menubar-sub" {...props} />
}

function MenubarSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.SubTrigger> & {
  inset?: boolean
}) {
  return (
    <MenubarPrimitive.SubTrigger
      data-slot="menubar-sub-trigger"
      data-inset={inset}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-none select-none data-[inset]:pl-8",
        className
      )}
      {...props}
    >
      {children}
      <ChevronRightIcon className="ml-auto h-4 w-4" />
    </MenubarPrimitive.SubTrigger>
  )
}

function MenubarSubContent({
  className,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.SubContent>) {
  return (
    <MenubarPrimitive.SubContent
      data-slot="menubar-sub-content"
      className={cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] overflow-hidden rounded-md border p-1 shadow-lg",
        className
      )}
      {...props}
    />
  )
}

export {
  Menubar,
  MenubarPortal,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarGroup,
  MenubarSeparator,
  MenubarLabel,
  MenubarItem,
  MenubarShortcut,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarSub,
  MenubarSubTrigger,
  MenubarSubContent,
}

================
File: components/ui/MidCards.tsx
================
import Link from "next/link";
import {
	Card,
	CardContent,
	CardFooter,
	CardHeader,
	CardTitle,
} from "@/components/ui/card";
import { AuthorDisplay } from "@/components/AuthorsDisplay";
import { ArrowRightIcon } from "lucide-react";
import { Button } from "@/components/ui/button";

interface MidCardProps {
	title: string;
	description: string;
	author: {
		name: string;
		image: string;
	};
	href?: string;
	className?: string;
}

export function MidCard({
	title,
	description,
	author,
	href = "#",
	className,
}: MidCardProps) {
	return (
		<Link href={href} className={className}>
			<Card className="border border-dashed rounded-none group transition-all bg-black hover:bg-fd-muted-foreground/5 duration-300">
				<CardHeader>
					<CardTitle>{title}</CardTitle>
				</CardHeader>
				<CardContent>
					<p className="text-muted-foreground">{description}</p>
				</CardContent>
				<CardFooter className="flex items-center justify-between">
					<AuthorDisplay author={author} />
					<Button
						variant="link"
						className="text-muted-foreground opacity-0 group-hover:opacity-100 transition-all duration-300"
					>
						<span className="flex items-center gap-2">
							Read more
							<ArrowRightIcon className="w-4 h-4" />
						</span>
					</Button>
				</CardFooter>
			</Card>
		</Link>
	);
}

================
File: components/ui/navigation-menu.tsx
================
"use client"

import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDownIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function NavigationMenu({
  className,
  children,
  viewport = true,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Root> & {
  viewport?: boolean
}) {
  return (
    <NavigationMenuPrimitive.Root
      data-slot="navigation-menu"
      data-viewport={viewport}
      className={cn(
        "group/navigation-menu relative flex max-w-max flex-1 items-center justify-center",
        className
      )}
      {...props}
    >
      {children}
      {viewport && <NavigationMenuViewport />}
    </NavigationMenuPrimitive.Root>
  )
}

function NavigationMenuList({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.List>) {
  return (
    <NavigationMenuPrimitive.List
      data-slot="navigation-menu-list"
      className={cn(
        "group flex flex-1 list-none items-center justify-center gap-1",
        className
      )}
      {...props}
    />
  )
}

function NavigationMenuItem({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Item>) {
  return (
    <NavigationMenuPrimitive.Item
      data-slot="navigation-menu-item"
      className={cn("relative", className)}
      {...props}
    />
  )
}

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground disabled:pointer-events-none disabled:opacity-50 data-[active=true]:bg-accent/50 data-[state=open]:bg-accent/50 data-[active=true]:text-accent-foreground ring-ring/10 dark:ring-ring/20 dark:outline-ring/40 outline-ring/50 transition-[color,box-shadow] focus-visible:ring-4 focus-visible:outline-1"
)

function NavigationMenuTrigger({
  className,
  children,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Trigger>) {
  return (
    <NavigationMenuPrimitive.Trigger
      data-slot="navigation-menu-trigger"
      className={cn(navigationMenuTriggerStyle(), "group", className)}
      {...props}
    >
      {children}{" "}
      <ChevronDownIcon
        className="relative top-[1px] ml-1 size-3 transition duration-300 group-data-[state=open]:rotate-180"
        aria-hidden="true"
      />
    </NavigationMenuPrimitive.Trigger>
  )
}

function NavigationMenuContent({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Content>) {
  return (
    <NavigationMenuPrimitive.Content
      data-slot="navigation-menu-content"
      className={cn(
        "data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 top-0 left-0 w-full p-2 pr-2.5 md:absolute md:w-auto",
        "group-data-[viewport=false]/navigation-menu:bg-popover group-data-[viewport=false]/navigation-menu:text-popover-foreground group-data-[viewport=false]/navigation-menu:data-[state=open]:animate-in group-data-[viewport=false]/navigation-menu:data-[state=closed]:animate-out group-data-[viewport=false]/navigation-menu:data-[state=closed]:zoom-out-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:zoom-in-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:fade-in-0 group-data-[viewport=false]/navigation-menu:data-[state=closed]:fade-out-0 group-data-[viewport=false]/navigation-menu:top-full group-data-[viewport=false]/navigation-menu:mt-1.5 group-data-[viewport=false]/navigation-menu:overflow-hidden group-data-[viewport=false]/navigation-menu:rounded-md group-data-[viewport=false]/navigation-menu:border group-data-[viewport=false]/navigation-menu:shadow group-data-[viewport=false]/navigation-menu:duration-200 **:data-[slot=navigation-menu-link]:focus:ring-0 **:data-[slot=navigation-menu-link]:focus:outline-none",
        className
      )}
      {...props}
    />
  )
}

function NavigationMenuViewport({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Viewport>) {
  return (
    <div
      className={cn(
        "absolute top-full left-0 isolate z-50 flex justify-center"
      )}
    >
      <NavigationMenuPrimitive.Viewport
        data-slot="navigation-menu-viewport"
        className={cn(
          "origin-top-center bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border shadow md:w-[var(--radix-navigation-menu-viewport-width)]",
          className
        )}
        {...props}
      />
    </div>
  )
}

function NavigationMenuLink({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Link>) {
  return (
    <NavigationMenuPrimitive.Link
      data-slot="navigation-menu-link"
      className={cn(
        "hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground data-[active=true]:bg-accent/50 data-[active=true]:text-accent-foreground ring-ring/10 dark:ring-ring/20 dark:outline-ring/40 outline-ring/50 [&_svg:not([class*='text-'])]:text-muted-foreground flex flex-col gap-1 rounded-sm p-2 text-sm transition-[color,box-shadow] focus-visible:ring-4 focus-visible:outline-1 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function NavigationMenuIndicator({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Indicator>) {
  return (
    <NavigationMenuPrimitive.Indicator
      data-slot="navigation-menu-indicator"
      className={cn(
        "data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden",
        className
      )}
      {...props}
    >
      <div className="bg-border relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm shadow-md" />
    </NavigationMenuPrimitive.Indicator>
  )
}

export {
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
  navigationMenuTriggerStyle,
}

================
File: components/ui/Orb.tsx
================
"use client";

import { useEffect, useRef } from "react";
import { Renderer, Program, Mesh, Triangle, Vec3 } from "ogl";

interface OrbProps {
	hue?: number;
	hoverIntensity?: number;
	rotateOnHover?: boolean;
	forceHoverState?: boolean;
}

export default function Orb({
	hue = 0,
	hoverIntensity = 0.2,
	rotateOnHover = true,
	forceHoverState = false,
}: OrbProps) {
	const ctnDom = useRef<HTMLDivElement>(null);

	const vert = /* glsl */ `
    precision highp float;
    attribute vec2 position;
    attribute vec2 uv;
    varying vec2 vUv;
    void main() {
      vUv = uv;
      gl_Position = vec4(position, 0.0, 1.0);
    }
  `;

	const frag = /* glsl */ `
    precision highp float;

    uniform float iTime;
    uniform vec3 iResolution;
    uniform float hue;
    uniform float hover;
    uniform float rot;
    uniform float hoverIntensity;
    varying vec2 vUv;

    vec3 rgb2yiq(vec3 c) {
      float y = dot(c, vec3(0.299, 0.587, 0.114));
      float i = dot(c, vec3(0.596, -0.274, -0.322));
      float q = dot(c, vec3(0.211, -0.523, 0.312));
      return vec3(y, i, q);
    }
    
    vec3 yiq2rgb(vec3 c) {
      float r = c.x + 0.956 * c.y + 0.621 * c.z;
      float g = c.x - 0.272 * c.y - 0.647 * c.z;
      float b = c.x - 1.106 * c.y + 1.703 * c.z;
      return vec3(r, g, b);
    }
    
    vec3 adjustHue(vec3 color, float hueDeg) {
      float hueRad = hueDeg * 3.14159265 / 180.0;
      vec3 yiq = rgb2yiq(color);
      float cosA = cos(hueRad);
      float sinA = sin(hueRad);
      float i = yiq.y * cosA - yiq.z * sinA;
      float q = yiq.y * sinA + yiq.z * cosA;
      yiq.y = i;
      yiq.z = q;
      return yiq2rgb(yiq);
    }
    
    vec3 hash33(vec3 p3) {
      p3 = fract(p3 * vec3(0.1031, 0.11369, 0.13787));
      p3 += dot(p3, p3.yxz + 19.19);
      return -1.0 + 2.0 * fract(vec3(
        p3.x + p3.y,
        p3.x + p3.z,
        p3.y + p3.z
      ) * p3.zyx);
    }
    
    float snoise3(vec3 p) {
      const float K1 = 0.333333333;
      const float K2 = 0.166666667;
      vec3 i = floor(p + (p.x + p.y + p.z) * K1);
      vec3 d0 = p - (i - (i.x + i.y + i.z) * K2);
      vec3 e = step(vec3(0.0), d0 - d0.yzx);
      vec3 i1 = e * (1.0 - e.zxy);
      vec3 i2 = 1.0 - e.zxy * (1.0 - e);
      vec3 d1 = d0 - (i1 - K2);
      vec3 d2 = d0 - (i2 - K1);
      vec3 d3 = d0 - 0.5;
      vec4 h = max(0.6 - vec4(
        dot(d0, d0),
        dot(d1, d1),
        dot(d2, d2),
        dot(d3, d3)
      ), 0.0);
      vec4 n = h * h * h * h * vec4(
        dot(d0, hash33(i)),
        dot(d1, hash33(i + i1)),
        dot(d2, hash33(i + i2)),
        dot(d3, hash33(i + 1.0))
      );
      return dot(vec4(31.316), n);
    }
    
    vec4 extractAlpha(vec3 colorIn) {
      float a = max(max(colorIn.r, colorIn.g), colorIn.b);
      return vec4(colorIn.rgb / (a + 1e-5), a);
    }
    
    const vec3 baseColor1 = vec3(0.435, 0.898, 0.675);  // green-300 (#6EE7B7)
    const vec3 baseColor2 = vec3(0.173, 0.737, 0.718);  // teal-400
    const vec3 baseColor3 = vec3(0.082, 0.522, 0.678);  // cyan-600
    const float innerRadius = 0.6;
    const float noiseScale = 0.65;
    
    float light1(float intensity, float attenuation, float dist) {
      return intensity / (1.0 + dist * attenuation);
    }
    
    float light2(float intensity, float attenuation, float dist) {
      return intensity / (1.0 + dist * dist * attenuation);
    }
    
    vec4 draw(vec2 uv) {
      vec3 color1 = adjustHue(baseColor1, hue);
      vec3 color2 = adjustHue(baseColor2, hue);
      vec3 color3 = adjustHue(baseColor3, hue);
      
      float ang = atan(uv.y, uv.x);
      float len = length(uv);
      float invLen = len > 0.0 ? 1.0 / len : 0.0;
      
      float n0 = snoise3(vec3(uv * noiseScale, iTime * 0.5)) * 0.5 + 0.5;
      float r0 = mix(mix(innerRadius, 1.0, 0.4), mix(innerRadius, 1.0, 0.6), n0);
      float d0 = distance(uv, (r0 * invLen) * uv);
      float v0 = light1(1.0, 10.0, d0);
      v0 *= smoothstep(r0 * 1.05, r0, len);
      float cl = cos(ang + iTime * 2.0) * 0.5 + 0.5;
      
      float a = iTime * -1.0;
      vec2 pos = vec2(cos(a), sin(a)) * r0;
      float d = distance(uv, pos);
      float v1 = light2(1.5, 5.0, d);
      v1 *= light1(1.0, 50.0, d0);
      
      float v2 = smoothstep(1.0, mix(innerRadius, 1.0, n0 * 0.5), len);
      float v3 = smoothstep(innerRadius, mix(innerRadius, 1.0, 0.5), len);
      
      vec3 col = mix(color1, color2, cl);
      col = mix(color3, col, v0);
      col = (col + v1) * v2 * v3;
      col = clamp(col, 0.0, 1.0);
      
      return extractAlpha(col);
    }
    
    vec4 mainImage(vec2 fragCoord) {
      vec2 center = iResolution.xy * 0.5;
      float size = min(iResolution.x, iResolution.y);
      vec2 uv = (fragCoord - center) / size * 2.0;
      
      float angle = rot;
      float s = sin(angle);
      float c = cos(angle);
      uv = vec2(c * uv.x - s * uv.y, s * uv.x + c * uv.y);
      
      uv.x += hover * hoverIntensity * 0.1 * sin(uv.y * 10.0 + iTime);
      uv.y += hover * hoverIntensity * 0.1 * sin(uv.x * 10.0 + iTime);
      
      return draw(uv);
    }
    
    void main() {
      vec2 fragCoord = vUv * iResolution.xy;
      vec4 col = mainImage(fragCoord);
      gl_FragColor = vec4(col.rgb * col.a, col.a);
    }
  `;

	useEffect(() => {
		const container = ctnDom.current;
		if (!container) return;

		const renderer = new Renderer({ alpha: true, premultipliedAlpha: false });
		const gl = renderer.gl;
		gl.clearColor(0, 0, 0, 0);
		container.appendChild(gl.canvas);

		const geometry = new Triangle(gl);
		const program = new Program(gl, {
			vertex: vert,
			fragment: frag,
			uniforms: {
				iTime: { value: 0 },
				iResolution: {
					value: new Vec3(
						gl.canvas.width,
						gl.canvas.height,
						gl.canvas.width / gl.canvas.height
					),
				},
				hue: { value: hue },
				hover: { value: 0 },
				rot: { value: 0 },
				hoverIntensity: { value: hoverIntensity },
			},
		});

		const mesh = new Mesh(gl, { geometry, program });

		function resize() {
			if (!container) return;
			const dpr = window.devicePixelRatio || 1;
			const width = container.clientWidth;
			const height = container.clientHeight;
			renderer.setSize(width * dpr, height * dpr);
			gl.canvas.style.width = width + "px";
			gl.canvas.style.height = height + "px";
			program.uniforms.iResolution.value.set(
				gl.canvas.width,
				gl.canvas.height,
				gl.canvas.width / gl.canvas.height
			);
		}
		window.addEventListener("resize", resize);
		resize();

		let targetHover = 0;
		let lastTime = 0;
		let currentRot = 0;
		const rotationSpeed = 0.3; // radians per second

		const handleMouseMove = (e: MouseEvent) => {
			const rect = container.getBoundingClientRect();
			const x = e.clientX - rect.left;
			const y = e.clientY - rect.top;
			const width = rect.width;
			const height = rect.height;
			const size = Math.min(width, height);
			const centerX = width / 2;
			const centerY = height / 2;
			const uvX = ((x - centerX) / size) * 2.0;
			const uvY = ((y - centerY) / size) * 2.0;

			if (Math.sqrt(uvX * uvX + uvY * uvY) < 0.8) {
				targetHover = 1;
			} else {
				targetHover = 0;
			}
		};

		const handleMouseLeave = () => {
			targetHover = 0;
		};

		container.addEventListener("mousemove", handleMouseMove);
		container.addEventListener("mouseleave", handleMouseLeave);

		let rafId: number;
		const update = (t: number) => {
			rafId = requestAnimationFrame(update);
			const dt = (t - lastTime) * 0.001;
			lastTime = t;
			program.uniforms.iTime.value = t * 0.001;
			program.uniforms.hue.value = hue;
			program.uniforms.hoverIntensity.value = hoverIntensity;

			const effectiveHover = forceHoverState ? 1 : targetHover;
			program.uniforms.hover.value +=
				(effectiveHover - program.uniforms.hover.value) * 0.1;

			if (rotateOnHover && effectiveHover > 0.5) {
				currentRot += dt * rotationSpeed;
			}
			program.uniforms.rot.value = currentRot;

			renderer.render({ scene: mesh });
		};
		rafId = requestAnimationFrame(update);

		return () => {
			cancelAnimationFrame(rafId);
			window.removeEventListener("resize", resize);
			container.removeEventListener("mousemove", handleMouseMove);
			container.removeEventListener("mouseleave", handleMouseLeave);
			container.removeChild(gl.canvas);
			gl.getExtension("WEBGL_lose_context")?.loseContext();
		};
	}, [hue, hoverIntensity, rotateOnHover, forceHoverState]);

	return <div ref={ctnDom} className="w-full h-full" />;
}

================
File: components/ui/pagination.tsx
================
import * as React from "react"
import {
  ChevronLeftIcon,
  ChevronRightIcon,
  MoreHorizontalIcon,
} from "lucide-react"

import { cn } from "@/lib/utils"
import { Button, buttonVariants } from "@/components/ui/button"

function Pagination({ className, ...props }: React.ComponentProps<"nav">) {
  return (
    <nav
      role="navigation"
      aria-label="pagination"
      data-slot="pagination"
      className={cn("mx-auto flex w-full justify-center", className)}
      {...props}
    />
  )
}

function PaginationContent({
  className,
  ...props
}: React.ComponentProps<"ul">) {
  return (
    <ul
      data-slot="pagination-content"
      className={cn("flex flex-row items-center gap-1", className)}
      {...props}
    />
  )
}

function PaginationItem({ ...props }: React.ComponentProps<"li">) {
  return <li data-slot="pagination-item" {...props} />
}

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<React.ComponentProps<typeof Button>, "size"> &
  React.ComponentProps<"a">

function PaginationLink({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) {
  return (
    <a
      aria-current={isActive ? "page" : undefined}
      data-slot="pagination-link"
      data-active={isActive}
      className={cn(
        buttonVariants({
          variant: isActive ? "outline" : "ghost",
          size,
        }),
        className
      )}
      {...props}
    />
  )
}

function PaginationPrevious({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) {
  return (
    <PaginationLink
      aria-label="Go to previous page"
      size="default"
      className={cn("gap-1 px-2.5 sm:pl-2.5", className)}
      {...props}
    >
      <ChevronLeftIcon />
      <span className="hidden sm:block">Previous</span>
    </PaginationLink>
  )
}

function PaginationNext({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) {
  return (
    <PaginationLink
      aria-label="Go to next page"
      size="default"
      className={cn("gap-1 px-2.5 sm:pr-2.5", className)}
      {...props}
    >
      <span className="hidden sm:block">Next</span>
      <ChevronRightIcon />
    </PaginationLink>
  )
}

function PaginationEllipsis({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      aria-hidden
      data-slot="pagination-ellipsis"
      className={cn("flex size-9 items-center justify-center", className)}
      {...props}
    >
      <MoreHorizontalIcon className="size-4" />
      <span className="sr-only">More pages</span>
    </span>
  )
}

export {
  Pagination,
  PaginationContent,
  PaginationLink,
  PaginationItem,
  PaginationPrevious,
  PaginationNext,
  PaginationEllipsis,
}

================
File: components/ui/popover.tsx
================
"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

function Popover({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Root>) {
  return <PopoverPrimitive.Root data-slot="popover" {...props} />
}

function PopoverTrigger({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {
  return <PopoverPrimitive.Trigger data-slot="popover-trigger" {...props} />
}

function PopoverContent({
  className,
  align = "center",
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Content>) {
  return (
    <PopoverPrimitive.Portal>
      <PopoverPrimitive.Content
        data-slot="popover-content"
        align={align}
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 rounded-md border p-4 shadow-md outline-hidden",
          className
        )}
        {...props}
      />
    </PopoverPrimitive.Portal>
  )
}

function PopoverAnchor({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {
  return <PopoverPrimitive.Anchor data-slot="popover-anchor" {...props} />
}

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }

================
File: components/ui/progress.tsx
================
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

function Progress({
  className,
  value,
  ...props
}: React.ComponentProps<typeof ProgressPrimitive.Root>) {
  return (
    <ProgressPrimitive.Root
      data-slot="progress"
      className={cn(
        "bg-primary/20 relative h-2 w-full overflow-hidden rounded-full",
        className
      )}
      {...props}
    >
      <ProgressPrimitive.Indicator
        data-slot="progress-indicator"
        className="bg-primary h-full w-full flex-1 transition-all"
        style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
      />
    </ProgressPrimitive.Root>
  )
}

export { Progress }

================
File: components/ui/radio-group.tsx
================
"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { CircleIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function RadioGroup({
  className,
  ...props
}: React.ComponentProps<typeof RadioGroupPrimitive.Root>) {
  return (
    <RadioGroupPrimitive.Root
      data-slot="radio-group"
      className={cn("grid gap-3", className)}
      {...props}
    />
  )
}

function RadioGroupItem({
  className,
  ...props
}: React.ComponentProps<typeof RadioGroupPrimitive.Item>) {
  return (
    <RadioGroupPrimitive.Item
      data-slot="radio-group-item"
      className={cn(
        "border-input text-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive aspect-square size-4 shrink-0 rounded-full border shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator
        data-slot="radio-group-indicator"
        className="relative flex items-center justify-center"
      >
        <CircleIcon className="fill-primary absolute top-1/2 left-1/2 size-2 -translate-x-1/2 -translate-y-1/2" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
}

export { RadioGroup, RadioGroupItem }

================
File: components/ui/resizable.tsx
================
"use client"

import * as React from "react"
import { GripVerticalIcon } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

function ResizablePanelGroup({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) {
  return (
    <ResizablePrimitive.PanelGroup
      data-slot="resizable-panel-group"
      className={cn(
        "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
        className
      )}
      {...props}
    />
  )
}

function ResizablePanel({
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.Panel>) {
  return <ResizablePrimitive.Panel data-slot="resizable-panel" {...props} />
}

function ResizableHandle({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) {
  return (
    <ResizablePrimitive.PanelResizeHandle
      data-slot="resizable-handle"
      className={cn(
        "bg-border focus-visible:ring-ring relative flex w-px items-center justify-center after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:ring-1 focus-visible:ring-offset-1 focus-visible:outline-hidden data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
        className
      )}
      {...props}
    >
      {withHandle && (
        <div className="bg-border z-10 flex h-4 w-3 items-center justify-center rounded-xs border">
          <GripVerticalIcon className="size-2.5" />
        </div>
      )}
    </ResizablePrimitive.PanelResizeHandle>
  )
}

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }

================
File: components/ui/scroll-area.tsx
================
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

function ScrollArea({
  className,
  children,
  ...props
}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {
  return (
    <ScrollAreaPrimitive.Root
      data-slot="scroll-area"
      className={cn("relative", className)}
      {...props}
    >
      <ScrollAreaPrimitive.Viewport
        data-slot="scroll-area-viewport"
        className="ring-ring/10 dark:ring-ring/20 dark:outline-ring/40 outline-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] focus-visible:ring-4 focus-visible:outline-1"
      >
        {children}
      </ScrollAreaPrimitive.Viewport>
      <ScrollBar />
      <ScrollAreaPrimitive.Corner />
    </ScrollAreaPrimitive.Root>
  )
}

function ScrollBar({
  className,
  orientation = "vertical",
  ...props
}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {
  return (
    <ScrollAreaPrimitive.ScrollAreaScrollbar
      data-slot="scroll-area-scrollbar"
      orientation={orientation}
      className={cn(
        "flex touch-none p-px transition-colors select-none",
        orientation === "vertical" &&
          "h-full w-2.5 border-l border-l-transparent",
        orientation === "horizontal" &&
          "h-2.5 flex-col border-t border-t-transparent",
        className
      )}
      {...props}
    >
      <ScrollAreaPrimitive.ScrollAreaThumb
        data-slot="scroll-area-thumb"
        className="bg-border relative flex-1 rounded-full"
      />
    </ScrollAreaPrimitive.ScrollAreaScrollbar>
  )
}

export { ScrollArea, ScrollBar }

================
File: components/ui/select.tsx
================
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Select({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Root>) {
  return <SelectPrimitive.Root data-slot="select" {...props} />
}

function SelectGroup({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Group>) {
  return <SelectPrimitive.Group data-slot="select-group" {...props} />
}

function SelectValue({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Value>) {
  return <SelectPrimitive.Value data-slot="select-value" {...props} />
}

function SelectTrigger({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Trigger>) {
  return (
    <SelectPrimitive.Trigger
      data-slot="select-trigger"
      className={cn(
        "border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive flex h-9 w-full items-center justify-between rounded-md border bg-transparent px-3 py-2 text-sm shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 [&>span]:line-clamp-1",
        className
      )}
      {...props}
    >
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDownIcon className="size-4 opacity-50" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  )
}

function SelectContent({
  className,
  children,
  position = "popper",
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Content>) {
  return (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        data-slot="select-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border shadow-md",
          position === "popper" &&
            "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
          className
        )}
        position={position}
        {...props}
      >
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn(
            "p-1",
            position === "popper" &&
              "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1"
          )}
        >
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  )
}

function SelectLabel({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Label>) {
  return (
    <SelectPrimitive.Label
      data-slot="select-label"
      className={cn("px-2 py-1.5 text-sm font-medium", className)}
      {...props}
    />
  )
}

function SelectItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Item>) {
  return (
    <SelectPrimitive.Item
      data-slot="select-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2",
        className
      )}
      {...props}
    >
      <span className="absolute right-2 flex size-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  )
}

function SelectSeparator({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Separator>) {
  return (
    <SelectPrimitive.Separator
      data-slot="select-separator"
      className={cn("bg-border pointer-events-none -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function SelectScrollUpButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {
  return (
    <SelectPrimitive.ScrollUpButton
      data-slot="select-scroll-up-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronUpIcon className="size-4" />
    </SelectPrimitive.ScrollUpButton>
  )
}

function SelectScrollDownButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {
  return (
    <SelectPrimitive.ScrollDownButton
      data-slot="select-scroll-down-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronDownIcon className="size-4" />
    </SelectPrimitive.ScrollDownButton>
  )
}

export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
}

================
File: components/ui/separator.tsx
================
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

function Separator({
  className,
  orientation = "horizontal",
  decorative = true,
  ...props
}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {
  return (
    <SeparatorPrimitive.Root
      data-slot="separator-root"
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px",
        className
      )}
      {...props}
    />
  )
}

export { Separator }

================
File: components/ui/sheet.tsx
================
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Sheet({ ...props }: React.ComponentProps<typeof SheetPrimitive.Root>) {
  return <SheetPrimitive.Root data-slot="sheet" {...props} />
}

function SheetTrigger({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Trigger>) {
  return <SheetPrimitive.Trigger data-slot="sheet-trigger" {...props} />
}

function SheetClose({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Close>) {
  return <SheetPrimitive.Close data-slot="sheet-close" {...props} />
}

function SheetPortal({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Portal>) {
  return <SheetPrimitive.Portal data-slot="sheet-portal" {...props} />
}

function SheetOverlay({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Overlay>) {
  return (
    <SheetPrimitive.Overlay
      data-slot="sheet-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/80",
        className
      )}
      {...props}
    />
  )
}

function SheetContent({
  className,
  children,
  side = "right",
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Content> & {
  side?: "top" | "right" | "bottom" | "left"
}) {
  return (
    <SheetPortal>
      <SheetOverlay />
      <SheetPrimitive.Content
        data-slot="sheet-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 flex flex-col gap-4 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
          side === "right" &&
            "data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm",
          side === "left" &&
            "data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm",
          side === "top" &&
            "data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 h-auto border-b",
          side === "bottom" &&
            "data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 h-auto border-t",
          className
        )}
        {...props}
      >
        {children}
        <SheetPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none">
          <XIcon className="size-4" />
          <span className="sr-only">Close</span>
        </SheetPrimitive.Close>
      </SheetPrimitive.Content>
    </SheetPortal>
  )
}

function SheetHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sheet-header"
      className={cn("flex flex-col gap-1.5 p-4", className)}
      {...props}
    />
  )
}

function SheetFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sheet-footer"
      className={cn("mt-auto flex flex-col gap-2 p-4", className)}
      {...props}
    />
  )
}

function SheetTitle({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Title>) {
  return (
    <SheetPrimitive.Title
      data-slot="sheet-title"
      className={cn("text-foreground font-semibold", className)}
      {...props}
    />
  )
}

function SheetDescription({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Description>) {
  return (
    <SheetPrimitive.Description
      data-slot="sheet-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Sheet,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}

================
File: components/ui/skeleton.tsx
================
import { cn } from "@/lib/utils"

function Skeleton({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="skeleton"
      className={cn("bg-primary/10 animate-pulse rounded-md", className)}
      {...props}
    />
  )
}

export { Skeleton }

================
File: components/ui/slider.tsx
================
"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

function Slider({
  className,
  defaultValue,
  value,
  min = 0,
  max = 100,
  ...props
}: React.ComponentProps<typeof SliderPrimitive.Root>) {
  const _values = React.useMemo(
    () =>
      Array.isArray(value)
        ? value
        : Array.isArray(defaultValue)
          ? defaultValue
          : [min, max],
    [value, defaultValue, min, max]
  )

  return (
    <SliderPrimitive.Root
      data-slot="slider"
      defaultValue={defaultValue}
      value={value}
      min={min}
      max={max}
      className={cn(
        "relative flex w-full touch-none items-center select-none data-[disabled]:opacity-50 data-[orientation=vertical]:h-full data-[orientation=vertical]:min-h-44 data-[orientation=vertical]:w-auto data-[orientation=vertical]:flex-col",
        className
      )}
      {...props}
    >
      <SliderPrimitive.Track
        data-slot="slider-track"
        className={cn(
          "bg-muted relative grow overflow-hidden rounded-full data-[orientation=horizontal]:h-1.5 data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-1.5"
        )}
      >
        <SliderPrimitive.Range
          data-slot="slider-range"
          className={cn(
            "bg-primary absolute data-[orientation=horizontal]:h-full data-[orientation=vertical]:w-full"
          )}
        />
      </SliderPrimitive.Track>
      {Array.from({ length: _values.length }, (_, index) => (
        <SliderPrimitive.Thumb
          data-slot="slider-thumb"
          key={index}
          className="border-primary bg-background ring-ring/50 block size-4 shrink-0 rounded-full border shadow-sm transition-[color,box-shadow] hover:ring-4 focus-visible:ring-4 focus-visible:outline-hidden disabled:pointer-events-none disabled:opacity-50"
        />
      ))}
    </SliderPrimitive.Root>
  )
}

export { Slider }

================
File: components/ui/sonner.tsx
================
"use client"

import { useTheme } from "next-themes"
import { Toaster as Sonner, ToasterProps } from "sonner"

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground font-medium",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground font-medium",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }

================
File: components/ui/switch.tsx
================
"use client"

import * as React from "react"
import * as SwitchPrimitive from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

function Switch({
  className,
  ...props
}: React.ComponentProps<typeof SwitchPrimitive.Root>) {
  return (
    <SwitchPrimitive.Root
      data-slot="switch"
      className={cn(
        "peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 inline-flex h-5 w-9 shrink-0 items-center rounded-full border-2 border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <SwitchPrimitive.Thumb
        data-slot="switch-thumb"
        className={cn(
          "bg-background pointer-events-none block size-4 rounded-full ring-0 shadow-lg transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0"
        )}
      />
    </SwitchPrimitive.Root>
  )
}

export { Switch }

================
File: components/ui/table.tsx
================
"use client"

import * as React from "react"

import { cn } from "@/lib/utils"

function Table({ className, ...props }: React.ComponentProps<"table">) {
  return (
    <div className="relative w-full overflow-auto">
      <table
        data-slot="table"
        className={cn("w-full caption-bottom text-sm", className)}
        {...props}
      />
    </div>
  )
}

function TableHeader({ className, ...props }: React.ComponentProps<"thead">) {
  return (
    <thead
      data-slot="table-header"
      className={cn("[&_tr]:border-b", className)}
      {...props}
    />
  )
}

function TableBody({ className, ...props }: React.ComponentProps<"tbody">) {
  return (
    <tbody
      data-slot="table-body"
      className={cn("[&_tr:last-child]:border-0", className)}
      {...props}
    />
  )
}

function TableFooter({ className, ...props }: React.ComponentProps<"tfoot">) {
  return (
    <tfoot
      data-slot="table-footer"
      className={cn(
        "bg-muted/50 border-t font-medium [&>tr]:last:border-b-0",
        className
      )}
      {...props}
    />
  )
}

function TableRow({ className, ...props }: React.ComponentProps<"tr">) {
  return (
    <tr
      data-slot="table-row"
      className={cn(
        "hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors",
        className
      )}
      {...props}
    />
  )
}

function TableHead({ className, ...props }: React.ComponentProps<"th">) {
  return (
    <th
      data-slot="table-head"
      className={cn(
        "text-muted-foreground h-10 px-2 text-left align-middle font-medium [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
        className
      )}
      {...props}
    />
  )
}

function TableCell({ className, ...props }: React.ComponentProps<"td">) {
  return (
    <td
      data-slot="table-cell"
      className={cn(
        "p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
        className
      )}
      {...props}
    />
  )
}

function TableCaption({
  className,
  ...props
}: React.ComponentProps<"caption">) {
  return (
    <caption
      data-slot="table-caption"
      className={cn("text-muted-foreground mt-4 text-sm", className)}
      {...props}
    />
  )
}

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}

================
File: components/ui/tabs.tsx
================
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

function Tabs({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Root>) {
  return (
    <TabsPrimitive.Root
      data-slot="tabs"
      className={cn("flex flex-col gap-2", className)}
      {...props}
    />
  )
}

function TabsList({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.List>) {
  return (
    <TabsPrimitive.List
      data-slot="tabs-list"
      className={cn(
        "bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-1",
        className
      )}
      {...props}
    />
  )
}

function TabsTrigger({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {
  return (
    <TabsPrimitive.Trigger
      data-slot="tabs-trigger"
      className={cn(
        "data-[state=active]:bg-background data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring inline-flex items-center justify-center gap-2 rounded-md px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function TabsContent({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Content>) {
  return (
    <TabsPrimitive.Content
      data-slot="tabs-content"
      className={cn("flex-1 outline-none", className)}
      {...props}
    />
  )
}

export { Tabs, TabsList, TabsTrigger, TabsContent }

================
File: components/ui/Text-reveal.tsx
================
"use client";

import {
	motion,
	type MotionValue,
	useScroll,
	useTransform,
} from "framer-motion";
import {
	type ComponentPropsWithoutRef,
	type FC,
	type ReactNode,
	useRef,
} from "react";

import { cn } from "@/lib/utils";

export interface TextRevealProps extends ComponentPropsWithoutRef<"div"> {
	text: string;
	highlightWords: string[];
}

export const TextReveal: FC<TextRevealProps> = ({
	text,
	highlightWords,
	className,
}) => {
	const targetRef = useRef<HTMLDivElement | null>(null);

	const { scrollYProgress } = useScroll({
		target: targetRef,
	});
	const words = text.split(" ");

	return (
		<div ref={targetRef} className={cn("relative z-0 h-[200vh]", className)}>
			<div
				className={
					"sticky  top-0 mx-auto flex h-[50%]  text-center max-w-3xl items-center bg-transparent px-[1rem] py-[5rem] "
				}
			>
				<p
					ref={targetRef}
					className={
						"flex about flex-wrap p-5 text-2xl font-bold text-black/20 dark:text-white/20 md:p-8 md:text-3xl lg:p-10 lg:text-4xl xl:text-5xl"
					}
				>
					{words.map((word, i) => {
						const start = i / words.length;
						const end = start + 1 / words.length;
						return (
							<Word
								key={i}
								progress={scrollYProgress}
								range={[start, end]}
								isHighlighted={highlightWords.includes(word)}
							>
								{word}
							</Word>
						);
					})}
				</p>
			</div>
		</div>
	);
};

interface WordProps {
	children: ReactNode;
	progress: MotionValue<number>;
	range: [number, number];
	isHighlighted: boolean;
}

const Word: FC<WordProps> = ({ children, progress, range, isHighlighted }) => {
	const opacity = useTransform(progress, range, [0, 1]);
	return (
		<span className="xl:lg-3 relative mx-1 lg:mx-2.5">
			<span className={"absolute opacity-30"}>{children}</span>
			<motion.span
				style={{ opacity: opacity }}
				className={cn("dark:text-white", isHighlighted && "primary-gradient")}
			>
				{children}
			</motion.span>
		</span>
	);
};

export default TextReveal;

================
File: components/ui/textarea.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

function Textarea({ className, ...props }: React.ComponentProps<"textarea">) {
  return (
    <textarea
      data-slot="textarea"
      className={cn(
        "border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      {...props}
    />
  )
}

export { Textarea }

================
File: components/ui/toggle-group.tsx
================
"use client"

import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

function ToggleGroup({
  className,
  variant,
  size,
  children,
  ...props
}: React.ComponentProps<typeof ToggleGroupPrimitive.Root> &
  VariantProps<typeof toggleVariants>) {
  return (
    <ToggleGroupPrimitive.Root
      data-slot="toggle-group"
      data-variant={variant}
      data-size={size}
      className={cn(
        "group/toggle-group flex items-center justify-center rounded-md data-[variant=outline]:shadow-xs",
        className
      )}
      {...props}
    >
      <ToggleGroupContext.Provider value={{ variant, size }}>
        {children}
      </ToggleGroupContext.Provider>
    </ToggleGroupPrimitive.Root>
  )
}

function ToggleGroupItem({
  className,
  children,
  variant,
  size,
  ...props
}: React.ComponentProps<typeof ToggleGroupPrimitive.Item> &
  VariantProps<typeof toggleVariants>) {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      data-slot="toggle-group-item"
      data-variant={context.variant || variant}
      data-size={context.size || size}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        "min-w-0 shrink-0 rounded-none shadow-none first:rounded-l-md last:rounded-r-md focus:z-10 focus-visible:z-10 data-[variant=outline]:border-l-0 data-[variant=outline]:first:border-l",
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
}

export { ToggleGroup, ToggleGroupItem }

================
File: components/ui/toggle.tsx
================
"use client"

import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:shrink-0 focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] outline-none transition-[color,box-shadow] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent shadow-xs hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-9 px-2 min-w-9",
        sm: "h-8 px-1.5 min-w-8",
        lg: "h-10 px-2.5 min-w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Toggle({
  className,
  variant,
  size,
  ...props
}: React.ComponentProps<typeof TogglePrimitive.Root> &
  VariantProps<typeof toggleVariants>) {
  return (
    <TogglePrimitive.Root
      data-slot="toggle"
      className={cn(toggleVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Toggle, toggleVariants }

================
File: components/ui/tooltip.tsx
================
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

function TooltipProvider({
  delayDuration = 0,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {
  return (
    <TooltipPrimitive.Provider
      data-slot="tooltip-provider"
      delayDuration={delayDuration}
      {...props}
    />
  )
}

function Tooltip({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Root>) {
  return (
    <TooltipProvider>
      <TooltipPrimitive.Root data-slot="tooltip" {...props} />
    </TooltipProvider>
  )
}

function TooltipTrigger({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {
  return <TooltipPrimitive.Trigger data-slot="tooltip-trigger" {...props} />
}

function TooltipContent({
  className,
  sideOffset = 4,
  children,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Content>) {
  return (
    <TooltipPrimitive.Portal>
      <TooltipPrimitive.Content
        data-slot="tooltip-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-primary text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-w-sm rounded-md px-3 py-1.5 text-xs",
          className
        )}
        {...props}
      >
        {children}
        <TooltipPrimitive.Arrow className="bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]" />
      </TooltipPrimitive.Content>
    </TooltipPrimitive.Portal>
  )
}

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

================
File: components/ui/WaveCards.tsx
================
"use client";

import React, { useEffect, useRef } from "react";
import { Renderer, Program, Mesh, Triangle, Color } from "ogl";

interface ThreadsProps {
	color?: [number, number, number];
	amplitude?: number;
	distance?: number;
	enableMouseInteraction?: boolean;
}

const vertexShader = `
attribute vec2 position;
attribute vec2 uv;
varying vec2 vUv;
void main() {
  vUv = uv;
  gl_Position = vec4(position, 0.0, 1.0);
}
`;

const fragmentShader = `
precision highp float;
uniform float iTime;
uniform vec3 iResolution;
uniform vec3 uColor;
uniform float uAmplitude;
uniform float uDistance;
uniform vec2 uMouse;

#define PI 3.1415926538

const int u_line_count = 40;
const float u_line_width = 7.0;
const float u_line_blur = 10.0;

float pixel(float count, vec2 resolution) {
    return 1.0 / max(resolution.x, resolution.y) * count;
}

float Perlin2D(vec2 P)
{
    vec2 Pi = floor(P);
    vec4 Pf_Pfmin1 = P.xyxy - vec4(Pi, Pi + 1.0);
    vec4 Pt = vec4(Pi.xy, Pi.xy + 1.0);
    Pt = Pt - floor(Pt * (1.0 / 71.0)) * 71.0;
    Pt += vec2(26.0, 161.0).xyxy;
    Pt *= Pt;
    Pt = Pt.xzxz * Pt.yyww;
    vec4 hash_x = fract(Pt * (1.0 / 951.135664));
    vec4 hash_y = fract(Pt * (1.0 / 642.949883));
    vec4 grad_x = hash_x - 0.49999;
    vec4 grad_y = hash_y - 0.49999;
    vec4 grad_results = inversesqrt(grad_x * grad_x + grad_y * grad_y) * (grad_x * Pf_Pfmin1.xzxz + grad_y * Pf_Pfmin1.yyww);
    grad_results *= 1.4142135623730950488016887242097;
    vec2 blend = Pf_Pfmin1.xy * Pf_Pfmin1.xy * Pf_Pfmin1.xy * (Pf_Pfmin1.xy * (Pf_Pfmin1.xy * 6.0 - 15.0) + 10.0);
    vec4 blend2 = vec4(blend, vec2(1.0 - blend));
    return dot(grad_results, blend2.zxzx * blend2.wwyy);
}

float line(vec2 st, float width, float perc, float offset) {
    float split_offset = (perc * 0.4);
    float split_point = 0.1 + split_offset;
    
    float amplitude_normal = smoothstep(split_point, 0.7, st.x);
    float amplitude_strength = 0.5;
    // Reduced modulation intensity (20% influence from mouse Y)
    float amplitude = amplitude_normal * amplitude_strength * uAmplitude * (1.0 + (uMouse.y - 0.5) * 0.2);

    // Reduced time modulation (only 1.0 factor)
    float time_scaled = iTime / 10.0 + (uMouse.x - 0.5) * 1.0;
    
    float blur = smoothstep(split_point, split_point + 0.05, st.x) * perc;

    float xnoise = mix(
        Perlin2D(vec2(time_scaled, st.x + perc) * 2.5),
        Perlin2D(vec2(time_scaled, st.x + time_scaled) * 3.5) / 1.5,
        st.x * 0.3
    );

    float y = 0.5 + (perc - 0.5) * uDistance + xnoise / 2.0 * amplitude;

    float line_start = smoothstep(
        y + (width / 2.0) + (u_line_blur * pixel(1.0, iResolution.xy) * blur),
        y,
        st.y
    );
        
    float line_end = smoothstep(
        y,
        y - (width / 2.0) - (u_line_blur * pixel(1.0, iResolution.xy) * blur),
        st.y
    );
    
    return clamp(
        (line_start - line_end) * (1.0 - smoothstep(0.0, 1.0, pow(perc, 0.3))),
        0.0,
        1.0
    );
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec2 uv = fragCoord / iResolution.xy;
    
    float line_strength = 1.0;

    for (int i = 0; i < u_line_count; i++) {
        line_strength *= (1.0 - line(
            uv,
            u_line_width * pixel(1.0, iResolution.xy) * (1.0 - float(i) / float(u_line_count)),
            float(i) / float(u_line_count),
            (PI * 1.0) * float(i) / float(u_line_count)
        ));
    }
    
    float color = 1.0 - line_strength;
    fragColor = vec4(uColor * color, color);
}

void main() {
    mainImage(gl_FragColor, gl_FragCoord.xy);
}
`;

const Threads: React.FC<ThreadsProps> = ({
	color = [1, 1, 1],
	amplitude = 1,
	distance = 0,
	enableMouseInteraction = false,
	...rest
}) => {
	const containerRef = useRef<HTMLDivElement>(null);
	const animationFrameId = useRef<number>(null);

	useEffect(() => {
		if (!containerRef.current) return;
		const container = containerRef.current;

		const renderer = new Renderer({ dpr: devicePixelRatio, alpha: true });
		const gl = renderer.gl;
		gl.clearColor(0, 0, 0, 0);
		gl.enable(gl.BLEND);
		gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
		container.appendChild(gl.canvas);

		const geometry = new Triangle(gl);
		const program = new Program(gl, {
			vertex: vertexShader,
			fragment: fragmentShader,
			uniforms: {
				iTime: { value: 0 },
				iResolution: {
					value: new Color(
						gl.canvas.width,
						gl.canvas.height,
						gl.canvas.width / gl.canvas.height
					),
				},
				uColor: { value: new Color(...color) },
				uAmplitude: { value: amplitude },
				uDistance: { value: distance },
				uMouse: { value: new Float32Array([0.5, 0.5]) },
			},
		});
		const mesh = new Mesh(gl, { geometry, program });

		function resize() {
			const { clientWidth, clientHeight } = container;
			renderer.setSize(clientWidth, clientHeight);
			program.uniforms.iResolution.value = new Color(
				clientWidth,
				clientHeight,
				clientWidth / clientHeight
			);
		}
		window.addEventListener("resize", resize);
		resize();

		const currentMouse = [0.5, 0.5];
		let targetMouse = [0.5, 0.5];

		function handleMouseMove(e: MouseEvent) {
			const rect = container.getBoundingClientRect();
			const x = (e.clientX - rect.left) / rect.width;
			const y = 1.0 - (e.clientY - rect.top) / rect.height;
			targetMouse = [x, y];
		}
		function handleMouseLeave() {
			targetMouse = [0.5, 0.5];
		}
		if (enableMouseInteraction) {
			container.addEventListener("mousemove", handleMouseMove);
			container.addEventListener("mouseleave", handleMouseLeave);
		}

		function update(t: number) {
			if (enableMouseInteraction) {
				// Smoothly interpolate the current mouse position toward the target.
				const smoothing = 0.05;
				currentMouse[0] += smoothing * (targetMouse[0] - currentMouse[0]);
				currentMouse[1] += smoothing * (targetMouse[1] - currentMouse[1]);
				program.uniforms.uMouse.value[0] = currentMouse[0];
				program.uniforms.uMouse.value[1] = currentMouse[1];
			} else {
				program.uniforms.uMouse.value[0] = 0.5;
				program.uniforms.uMouse.value[1] = 0.5;
			}
			program.uniforms.iTime.value = t * 0.001;
			renderer.render({ scene: mesh });
			animationFrameId.current = requestAnimationFrame(update);
		}
		animationFrameId.current = requestAnimationFrame(update);

		return () => {
			if (animationFrameId.current)
				cancelAnimationFrame(animationFrameId.current);
			window.removeEventListener("resize", resize);
			if (enableMouseInteraction) {
				container.removeEventListener("mousemove", handleMouseMove);
				container.removeEventListener("mouseleave", handleMouseLeave);
			}
			if (container.contains(gl.canvas)) container.removeChild(gl.canvas);
			gl.getExtension("WEBGL_lose_context")?.loseContext();
		};
	}, [color, amplitude, distance, enableMouseInteraction]);

	return (
		<div ref={containerRef} className="w-full  h-full relative" {...rest} />
	);
};

export default Threads;

================
File: components/AuthorsDisplay.tsx
================
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { cn } from "@/lib/utils";

interface AuthorDisplayProps {
	author: {
		name: string;
		image: string;
	};
	className?: string;
	imageSize?: number;
}

export function AuthorDisplay({
	author,
	className,
	imageSize = 40,
}: AuthorDisplayProps) {
	return (
		<div className={cn("flex items-center space-x-2", className)}>
			<Avatar className={cn(`h-${imageSize} w-${imageSize}`)}>
				<AvatarImage src={author.image} alt={author.name} />
				<AvatarFallback>{author.name.charAt(0)}</AvatarFallback>
			</Avatar>
			<span className="text-sm font-medium">{author.name}</span>
		</div>
	);
}

================
File: components/typography.tsx
================
import { cn } from "@/lib/utils";
import localFont from "next/font/local";

const DM_Serif_Display = localFont({
	src: "../public/fonts/DMSerifDisplay-Regular.ttf",
});

const DM_Sans = localFont({
	src: "../public/fonts/DMSans-VariableFont.ttf",
});

interface TypographyProps extends React.HTMLAttributes<HTMLElement> {
	children: React.ReactNode;
	className?: string;
}

export function H1({ children, className, ...props }: TypographyProps) {
	return (
		<h1
			className={cn(
				DM_Serif_Display.className,
				"prose-h1 text-4xl  tracking-tight sm:text-4xl md:text-6xl lg:text-7xl prose-headings:mx-auto prose-headings:max-w-3xl ",
				className
			)}
			{...props}
		>
			{children}
		</h1>
	);
}

export function H2({ children, className, ...props }: TypographyProps) {
	return (
		<h2
			className={cn(
				"prose-h2  text-3xl tracking-tight sm:text-4xl md:text-5xl prose-headings:mx-auto prose-headings:max-w-3xl",
				DM_Serif_Display.className,
				className
			)}
			{...props}
		>
			{children}
		</h2>
	);
}

export function H3({ children, className, ...props }: TypographyProps) {
	return (
		<h3
			className={cn(
				"prose-h3 text-fd-accent-foreground/85 text-2xl font-semibold tracking-tight sm:text-3xl md:text-4xl prose-headings:mx-auto prose-headings:max-w-3xl",
				DM_Serif_Display.className,
				className
			)}
			{...props}
		>
			{children}
		</h3>
	);
}

export function H4({ children, className, ...props }: TypographyProps) {
	return (
		<h4
			className={cn(
				"prose-h4 text-fd-accent-foreground/85  text-xl font-semibold tracking-tight sm:text-2xl md:text-3xl prose-headings:mx-auto prose-headings:max-w-3xl",
				DM_Serif_Display.className,
				className
			)}
			{...props}
		>
			{children}
		</h4>
	);
}

export function H5({ children, className, ...props }: TypographyProps) {
	return (
		<h5
			className={cn(
				"prose-h5 text-fd-accent-foreground/85  text-lg font-medium tracking-tight sm:text-xl md:text-2xl prose-headings:mx-auto prose-headings:max-w-3xl",
				className
			)}
			{...props}
		>
			{children}
		</h5>
	);
}

export function H6({ children, className, ...props }: TypographyProps) {
	return (
		<h6
			className={cn(
				"prose-h6  text-fd-accent-foreground/85 text-base font-medium tracking-tight sm:text-lg md:text-xl prose-headings:mx-auto prose-headings:max-w-3xl",
				className
			)}
			{...props}
		>
			{children}
		</h6>
	);
}

export function P({ children, className, ...props }: TypographyProps) {
	return (
		<p
			className={cn(
				"prose-p  small text-xl leading-7 [&:not(:first-child)]:mt-6 prose-p:mx-auto prose-p:max-w-3xl text-fd-muted-foreground",
				className
			)}
			{...props}
		>
			{children}
		</p>
	);
}

export function Caption({ children, className, ...props }: TypographyProps) {
	return (
		<p
			className={cn("text-sm text-muted ", DM_Sans.className, className)}
			{...props}
		>
			{children}
		</p>
	);
}

export function SmallPrint({ children, className, ...props }: TypographyProps) {
	return (
		<p
			className={cn(
				"prose-xs  text-xs text-muted ",
				DM_Sans.className,
				className
			)}
			{...props}
		>
			{children}
		</p>
	);
}

================
File: content/blog/react-compiler.mdx
================
---
title: "React 19 Compiler"
description: "An in-depth exploration of React 19's new compiler, its benefits, and how it transforms React development"
date: "2024-10-28"
author: "Stav Fernandes"
image: "/images/image-test.webp"
---

### Introduction

As we approach the release of React 19, we are also approaching the introduction of the React Compiler, which aims to simplify development and enhance performance. This tool promises to change the way we optimise React applications by eliminating the need for manual performance tweaks and allowing developers to focus their time on building great user experiences. In this blog, we'll explore what the React Compiler is, why it is such a big change, and how it's going to make your life as a React developer much easier and more enjoyable.

### What is the React Compiler and Why Was It Introduced?

Traditionally, optimising React code required developers to manually apply techniques like `useMemo`, `useCallback`, and `React.memo`. For a deep dive, I would recommend checking the React documentation; however, I will provide a quick overview in the later sections.

React 19 introduces the React Compiler, which automates code optimisation, allowing developers to write clean, readable code while ensuring efficiency. For beginners, this means you don't need to learn when and how to apply `React.memo` or `useMemo`, it's all handled for you, making it simpler to start building performant applications. The compiler integrates into the build process by working alongside Babel, analysing components, and applying optimisations like memoisation and caching. This compiler has been used in production at Meta and aims to simplify development, freeing developers to focus on creating features instead of manual performance tuning.

### How Does the React Compiler Work?

### The Traditional Approach: Manual Optimisation in React 18 and Earlier

Before we dive into the React Compiler, it's important to understand the previous ways React worked so we can appreciate the improvements it brings. In React 18 and prior versions, developers were tasked with manually optimising application performance. The process began with writing components using JSX, a syntax extension that allows mixing HTML-like code with JavaScript. During the build phase, Babel transformed this JSX into standard JavaScript that browsers could interpret.

_Babel is a JavaScript compiler that helps convert modern JavaScript, including JSX, into backward-compatible versions for older browsers. Webpack is a tool known as a bundler that takes JavaScript modules and other assets (like CSS and images) and combines them into a single bundle, making it easier to deploy applications._

To enhance performance, developers employed various techniques to prevent unnecessary re-renders:

- **`React.memo`**: Wrapped functional components to memoise them, ensuring they re-rendered only when their props changed. For example, in a typical app, you might need to wrap a component like this:
  ```jsx
  const MemoizedComponent = React.memo(function MyComponent({ value }) {
  	return <div>{value}</div>;
  });
  ```
- **`useMemo`**: Memoised the results of computations to avoid recalculating them on every render. This required adding boilerplate to ensure computational efficiency:
  ```jsx
  const memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);
  ```
- **`useCallback`**: Memoised functions to prevent their recreation on each render. This was necessary when passing functions as props to prevent unnecessary re-renders:
  ```jsx
  const handleClick = useCallback(() => {
  	console.log("Button clicked");
  }, []);
  ```

While effective, this manual optimisation required a deep understanding of React's rendering behaviour. Misapplication could lead to over-optimisation or missed performance improvements. Developers relied on tools like React DevTools to monitor component behaviour and debug unnecessary re-renders, a process that could be time-consuming and complex.

### The New Paradigm: Automatic Optimisation with the React 19 Compiler

React 19 introduces a compiler that automates many optimisation tasks previously handled manually. This compiler operates during the build process, working alongside Babel to analyse components and hooks. It automatically applies memoisation and caching strategies, effectively replacing the need for manual implementations of `React.memo`, `useMemo`, and `useCallback`.

Think of the React Compiler as a quality control inspector for your app's data. It makes sure that once your data is set, it doesn't change unexpectedly, like setting a rule that your grocery list can't be changed once you've written it down, to keep things orderly. This concept is called immutability. In React, immutability means data shouldn't be directly modified, which helps keep app behaviour predictable, much like keeping your grocery list consistent helps prevent forgetting anything. By maintaining immutability, React can better determine when to update parts of the interface, improving efficiency and reducing bugs. Developers can also configure the compiler to decide which parts of the code get this quality check. After the build process, the compiler produces optimised JavaScript code that runs more smoothly in the browser.

For those who like to visualise things, I've created an animated diagram to show the steps involved in compiling with React 19 compared to earlier versions. You'll notice that while the number of steps is similar, React 19 is far more optimised and efficient, particularly early in the process.

<CompilerComparison />
### Benefits of Using the React Compiler

- **Automatic Optimisations**: The React Compiler applies memoisation and caching automatically, eliminating the need for `React.memo`, `useMemo`, or `useCallback`. For example, the compiler analyses dependencies and ensures that unchanged values are reused across renders, effectively implementing memoisation. This reduces boilerplate and keeps the codebase cleaner while ensuring efficient performance.

**Code Example - Before and After React Compiler**:

**Traditional Approach (Before React Compiler):**

```jsx
import React, { useCallback } from "react";

function DataList({ items }) {
	const handleItemClick = useCallback((item) => {
		console.log("Item clicked:", item);
	}, []);

	return (
		<ul>
			{items.map((item) => (
				<li key={item.id} onClick={() => handleItemClick(item)}>
					{item.name}
				</li>
			))}
		</ul>
	);
}
```

**Simplified Approach (With React Compiler):**

```jsx
import React from "react";

function DataList({ items }) {
	return (
		<ul>
			{items.map((item) => (
				<li key={item.id} onClick={() => console.log("Item clicked:", item)}>
					{item.name}
				</li>
			))}
		</ul>
	);
}
```

With the React Compiler, there's no need to manually apply `useMemo` or `useCallback` to optimise performance. These optimisations are handled automatically, resulting in cleaner, more maintainable code.

- **Enhanced Developer Experience**: By automating tedious tasks, such as manually wrapping components with `React.memo` or adding `useCallback` to prevent unnecessary re-renders, the React Compiler allows developers to focus on building features rather than managing low-level optimisations, reducing cognitive overhead.
- **Build-Time Enhancements**: Optimisations are applied during the build process, resulting in more efficient runtime performance and reducing the overhead associated with manual optimisations.
- **Enforcement of Best Practices**: The compiler enforces immutability and other React best practices, leading to more predictable and stable applications.
- **Simplified Development Process**: By handling optimisations automatically, the compiler allows developers to focus more on building features rather than managing performance, streamlining the development workflow.

These advancements make React 19 a transformative update, enhancing both the developer experience and the performance of React applications.

### Drawbacks and Challenges of the React Compiler

- **Beta Stage and Stability**: At the time of writing, the React Compiler is in beta, which means it may still be unstable. Expect to encounter some bugs or unexpected behaviours when using it. For a list of known issues and workarounds, you can check the React GitHub repository or official React documentation.
- **Debugging Complexity**: Compiled code can be inherently harder to debug. Since optimisations are applied automatically, it can be challenging to pinpoint the exact source of an issue when debugging. To mitigate these challenges, consider using updated React DevTools, which supports the React Compiler, or implement specific logging strategies to trace component behaviours effectively.
- **Compatibility Issues**: Not all existing libraries are fully compatible with the new React Compiler. As it is a new feature, some libraries may not yet support the optimisations, which may require workarounds or updates to the library ecosystem. However, as stability improves, it is expected that many newer apps and libraries will adjust and ensure compatibility.
- **Limited Community Support**: As the React Compiler is still new, community support and available resources may be limited. This means developers may find it harder to get help or find examples for more advanced use cases. However, as the compiler gains wider adoption, more resources and community support are expected to grow.

### Conclusion

The React Compiler in React 19 is set to be a game-changer, making development faster, cleaner, and more efficient. By eliminating the need for manual optimisations, it helps developers focus on what really matters,building exceptional user experiences. As the compiler matures, it will likely become an essential tool in every React developer's toolkit, transforming the way we write and maintain React applications. If you've had a chance to try it out, I'd love to hear your thoughts on how it's impacted your workflow!

================
File: content/blog/react-server-components.mdx
================
---
title: "Understanding React Server Components"
description: "A comprehensive guide to React Server Components, their benefits, limitations, and best practices"
date: "2024-10-20"
author: "Stav Fernandes"
image: "/images/image-test.webp"
---

Server components are something that every engineer will hear about right now, and it's probably one of the most talked-about topics, often with some controversy depending on who you ask. When I first learned about server components, I didn't immediately see the need for them because the apps I was building at the time didn't really need the performance boost. But now, as I work on more complex applications involving AI integration, streaming, and handling larger datasets, I realize that server components are one of the most impactful update in React in recent years. They allow developers to render components on the server and send a serialized version of the result to the client, offering the benefits of server-side rendering while maintaining the interactivity of traditional React components. This approach is designed to address some of the biggest challenges in modern frontend development, like large JavaScript bundles and slow load times.

The concept behind React Server Components is pretty simple: let the server do all the heavy lifting, and as a result, your app will thank you with faster load times and smoother performance. This not only creates a great user experience but also makes it more enjoyable for developers to work with. Let's get into why React introduced this feature and what makes it so appealing.

## 1. The Benefits Behind RSCs

React Server Components bring many new benefits to Next.js and React in general. I will cover some of the main benefits below and try to explain them in more detail as we go:

**1.1. Performance Improvements**

By rendering components on the server, the client receives only the necessary output rather than the entire component code. This ensures that JavaScript bundle sizes are much smaller, which in turn significantly improves load times. The server handles the heavy lifting, which allows your application to feel snappier and more responsive.

**1.2. Enhanced User and Developer Experience**

Faster load times aren't just about performance metrics—they translate directly to happier users. Imagine a user who doesn't have to wait long for pages to load or services to become available. Less waiting means more interaction and a smoother experience overall.

**1.3. Simplified Data Fetching**

Traditionally, client components needed to manage data fetching using `useState`, `useEffect`, and other hooks, which often led to more code to handle loading states, errors, and API interactions. With React Server Components, data fetching is straightforward and happens server-side, leading to fewer complications and a more secure data-handling approach.

Let's take a quick look at a before and after example of using a server component and a client component.

**Traditional Client Component with Fetching:**

```jsx
// ClientComponent.jsx
import { useState, useEffect } from "react";

export default function ClientComponent() {
	const [data, setData] = useState(null);

	useEffect(() => {
		async function fetchData() {
			const response = await fetch("/api/data");
			const result = await response.json();
			setData(result);
		}
		fetchData();
	}, []);

	if (!data) return <div>Loading...</div>;
	return <div>{data.message}</div>;
}
```

**React Server Component with Direct Fetching:**

```jsx
// ServerComponent.jsx
export default async function ServerComponent() {
	const response = await fetch("https://api.example.com/data");
	const data = await response.json();

	return <div>{data.message}</div>;
}
```

**1.4. SEO Benefits**

Server components can also contribute to significantly better SEO because the entire rendering is done on the server, resulting in the client receiving a fully populated HTML document. This means that all the necessary information is available to search engines straight away, allowing for efficient crawling and indexing. As a result, server components maximise SEO potential by ensuring that search engine crawlers can easily access and understand the content without relying on client-side rendering.

## 2. Server Components vs. Client Components

You may be wondering: when should I use a server component versus a client component? Here's a quick comparison:

**2.1. Client Components**

Client components are components that are rendered on the client side—no surprises there. But it's worth noting that client components can also be rendered on the server initially, before being hydrated on the client. This dual nature makes them extremely versatile.

- **Rendering**: Client components are initially rendered on the server but continue to exist and function within the browser. This allows them to handle dynamic user interactions effectively.
- **Interactivity**: Client components are essential for pages that need user interactions, such as button clicks, form submissions, or anything involving the browser's APIs. They excel when you need immediate feedback and interaction from the user.
- **Usage Scenarios**: Client components are ideal for elements of your application that require frequent and direct user engagement. For example, interactive forms, buttons, modals, or any component requiring access to browser capabilities like local storage, cookies, or other APIs.

**2.2. Server Components**

- **Rendering**: Server components are rendered entirely on the server, while client components are rendered in the browser. This means server components are great for parts of your app that are static or where SEO is a priority.
- **Interactivity**: Since server components are static by nature, they cannot handle user interactions like button clicks. Client components, on the other hand, shine when interactivity is required.
- **Usage Scenarios**: Use server components for the parts of your app that don't need to change based on user actions (like headers, footers, or content that loads once). Use client components for interactive forms, buttons, or anything that requires immediate user feedback.

To put it simply, when you need more interactivity or need to use hooks or browser capabilities, opt for a client component. For most other scenarios, server components are the way to go. To ensure optimal performance, place client components at the deepest level in the component tree where interactivity is required.

## **3. RSC Render Flow**

Understanding the internal mechanics of RSCs can help you unlock their full potential. The following diagram shows the flow of a React Server Component rendering:

<FlowDiagram />

Creating a React Server Component does require a bit of setup, depending on the framework you're using. However, if you're like me and using Next.js 13 or later, all React components you start with are server components by default. Only when you need to opt in to browser functionality or explicitly require a client component, you use the 'use client' directive.

## **4. Best Practices and Considerations**

- **Component Design**: Server components excel at rendering large HTML without involving client-side JavaScript, keeping your app more efficient. Think of server components as builders,responsible for heavy lifting like data-fetching and creating static content. When you need interactivity, you bring in a "client" component, but try to keep that as close to the deepest part of your component tree as possible. This approach keeps performance impacts minimal, like ensuring only the smallest parts of a tree need client-side JavaScript rather than the entire trunk.

- **Performance Tips**: Use server components for content that doesn't change frequently,for example, the layout or a CMS-driven page. Imagine you're designing a website for a museum: the building layout (server component) rarely changes, but daily event information (client component) might. This way, the client bundle remains light and page load times improve.

- **Security Considerations**: Since server components run on the server, they have broader access to sensitive data. Treat them as trusted vaults, handling everything securely. Be careful about what gets serialised and sent to the client; you wouldn't want your precious secrets (like private data) accidentally slipped under the door.

- **Streaming**: React Server Components (RSCs) can stream parts of the page to the client as soon as they're ready, without waiting for everything to load. Picture this like a puzzle where you start with the corners and fill the rest in as they become available. In Next.js, using `Suspense` helps control the streaming process, giving a smooth flow to the user experience and making content feel more responsive.

- **Integration with Existing Apps**: The great thing about RSCs is that you don't need to refactor everything all at once, think of it like redecorating a house room by room, instead of tearing it down and rebuilding it. Server components can be added incrementally. When working on data fetching, try to avoid `useState` or `useEffect` since they are client-side concepts; minimising their use will help maintain simplicity and keep server-side rendering efficient.

## **5. Limitations of React Server Components**

- **Experimental Status**: Remember, RSCs are still experimental and not yet stable for full production. This means they're like a new roller coaster—fun and powerful but not entirely ironed out yet. There could be breaking changes or quirks to deal with as React 19 evolves. Especially without frameworks like Next.js, integrating them may require a few extra steps.

- **Browser Compatibility**: Since RSCs introduce a new rendering method, older browsers might struggle to keep up. It's like asking an old car to handle a superfast motorway—not always ideal! However, as these technologies advance and browser support grows, compatibility issues should reduce, but always test across browsers.

- **Lack of Client-Side Interactivity**: Server components can't use hooks like `useState` or `useEffect`, which restricts their ability to handle real-time user interactions. They're like artisans crafting a statue—precise but unchangeable once built. If your app relies heavily on dynamic user interactions, you'll need to balance server components with client components to ensure the experience remains lively and engaging.

- **Learning Curve and Complexity**: Moving from client-first to server-first can feel like suddenly driving on the opposite side of the road—it takes getting used to, and it's easy to get confused about when to render on the server versus the client. When RSCs were introduced, many developers felt overwhelmed—similar to the introduction of JSX. It might seem complicated initially, but the benefits, such as reduced bundle sizes and improved SEO, gradually shine through, and with community resources, this shift is becoming easier to embrace.

## **6. Conclusion**

Although React Server Components can be a tough topic to grasp at first, they offer many benefits, including faster load times, a better developer experience, and enhanced security aspects. That being said, RSCs are just one of the paradigms available in a React application, so you don't have to exclusively use them. You can and should combine them with client components, static site rendering, and other tools to make your application more performant and accessible.

The best way to get started with React Server Components and understand the benefits they bring to your Next.js app is to first create a regular SPA React app—something simple, like a to-do list. Get familiar with how that works, then build a similar app in Next.js using Server Components. By comparing the two, you'll notice the many advantages Server Components offer, including reduced code complexity and a more streamlined development experience. It's all about exploring and seeing firsthand how these tools can improve your workflow!

================
File: content/blog/react-useActionState.mdx
================
---
title: "React 19 - useActionState"
description: "Simplify Form HandlCallouting with React 19's useActionState Hook"
date: "2024-11-02"
author: "Stav Fernandes"
image: "/images/image-test.webp"
---

## Introduction

Prior to React 19's `useActionState` hook, managing forms in React could be quite challenging, especially when you were first introduced to React. Over time, managing forms might become second nature, but there was still a lot of boilerplate code involved, which made the developer experience less enjoyable. With the release of React 19, the `useActionState` hook has simplified form handling, making the code cleaner, easier to understand, and significantly improving the overall developer experience.

## Understanding the Challenge

Before we dive deep into `useActionState`, let's understand what it takes to manage a simple form in React and how we would typically handle it. This isn't the only way to do it, but it's a common approach you'll often see, especially in beginner-friendly apps. Managing form state in React involves handling multiple pieces of state:

- Managing the main data (e.g., the username)
- Handling the loading state (e.g., whether the action is in progress or completed)
- Handling errors (e.g., displaying error messages)
- Managing multiple data points at the same time

In React 18, this was typically done by using separate states for each of these aspects, such as username, loading, and error. While this approach wasn't inherently difficult, it involved a lot of boilerplate code and could be cumbersome. You'd end up writing and maintaining multiple states and logic for each one, making the component harder to manage. See the example below for a simple form:

```jsx
"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Alert, AlertDescription } from "@/components/ui/alert";

// Simulating a server action
async function submitUserInfo(formData: FormData) {
	// In a real app, this would be a server action
	await new Promise((resolve) => setTimeout(resolve, 1000)); // Simulate network delay
	const name = formData.get("name");
	if (name === "error") {
		throw new Error('Name cannot be "error"');
	}
	return { message: `Hello, ${name}!` };
}

export default function TraditionalForm() {
	const [isLoading, setIsLoading] = useState(false);
	const [error, setError] = (useState < string) | (null > null);
	const [success, setSuccess] = (useState < string) | (null > null);

	async function handleSubmit(event: React.FormEvent<HTMLFormElement>) {
		event.preventDefault();
		setIsLoading(true);
		setError(null);
		setSuccess(null);

		try {
			const formData = new FormData(event.currentTarget);
			const result = await submitUserInfo(formData);
			setSuccess(result.message);
		} catch (e) {
			setError(e instanceof Error ? e.message : "An unknown error occurred");
		} finally {
			setIsLoading(false);
		}
	}

	return (
		<form onSubmit={handleSubmit} className="space-y-4 w-full max-w-md">
			<div>
				<Label htmlFor="name">Name</Label>
				<Input id="name" name="name" required />
			</div>
			<Button type="submit" disabled={isLoading}>
				{isLoading ? "Submitting..." : "Submit"}
			</Button>
			{error && (
				<Alert variant="destructive">
					<AlertDescription>{error}</AlertDescription>
				</Alert>
			)}
			{success && (
				<Alert>
					<AlertDescription>{success}</AlertDescription>
				</Alert>
			)}
		</form>
	);
}
```

In the example above you can see how managing form state without `useActionState` requires multiple pieces of state and a lot of boilerplate logic to handle loading and error states, which can make the component harder to read and maintain.

## Breakdown `useActionState` Hook

Let's do a quick dive into the `useActionState` hook, and then we'll refactor the previous form we created to use `useActionState` and see it in action.

The `useActionState` hook is designed to streamline form state management by integrating asynchronous actions directly into the form's lifecycle. This integration reduces the need for manual state handling and side effects, leading to more maintainable code.

The first step is straightforward: you start by defining a function that represents your asynchronous operation, which must return a promise. For our example, we'll use a server action that calls our backend server to fetch user data. Here’s a simple example:

```jsx
async function fetchUserData(formData) {
	// Simulating a server call
	await new Promise((resolve) => setTimeout(resolve, 1000));
	const username = formData.get("username");
	return { message: `Hello, ${username}!` };
}
```

After defining the action, you call the `useActionState` hook, passing in the action function. In the `RefactoredForm` component, we pass `submitUserInfo` as the action function, like this:

```jsx
const [state, formAction, isPending] = useActionState(submitUserInfo, null);
```

Here, `formAction` is assigned to the `action` attribute of the `<form>` element, allowing us to link the form submission directly with our action function. The `isPending` value helps us show a loading indicator during the submission, and `state` holds the response data, which we use to display either error or success messages.

### Parameters and Return Values of `useActionState`

- **Parameters**:
  - **Action Function (`fn`)**: This function is invoked upon form submission. It receives the current state and the submitted `FormData`, allowing for processing based on both the existing state and new input.
  - **Initial State (`initialState`)**: Defines the form's state before any submissions, providing a baseline for state transitions.
  - **Permalink (optional)**: A unique URL that the form modifies, useful in scenarios involving dynamic content and progressive enhancement.
- **Return Values**:
  - **State (`state`)**: Reflects the current state, updating with each form submission based on the action function's return value.
  - **Form Action (`formAction`)**: A function assigned to the form's `action` attribute, linking the form submission to the specified action function.
  - **Pending State (`isPending`)**: A boolean indicating whether the form submission is in progress, facilitating the display of loading indicators or disabling inputs during processing.

### Refactoring the Form to Use `useActionState`

Now that we have a basic understanding of how the `useActionState` hook works, let's refactor the form to use it. It should look something like this:

```jsx
"use client";

import { useActionState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Alert, AlertDescription } from "@/components/ui/alert";

// Server action
async function submitUserInfo(prevState: any, formData: FormData) {
	await new Promise((resolve) => setTimeout(resolve, 1000)); // Simulate network delay
	const name = formData.get("name");
	if (name === "error") {
		return { error: 'Name cannot be "error"' };
	}
	return { message: `Hello, ${name}!` };
}

export default function RefactoredForm() {
	const [state, formAction, isPending] = useActionState(submitUserInfo, null);

	return (
		<form action={formAction} className="space-y-4 w-full max-w-md">
			<div>
				<Label htmlFor="name">Name</Label>
				<Input id="name" name="name" required />
			</div>
			<Button type="submit" disabled={isPending}>
				{isPending ? "Submitting..." : "Submit"}
			</Button>
			{state?.error && (
				<Alert variant="destructive">
					<AlertDescription>{state.error}</AlertDescription>
				</Alert>
			)}
			{state?.message && (
				<Alert>
					<AlertDescription>{state.message}</AlertDescription>
				</Alert>
			)}
		</form>
	);
}
```

### Key Steps with `useActionState`

The basic structure of using the `useActionState` hook involves three main steps:

1. **Defining Your Action**: In the `RefactoredForm`, we define the `submitUserInfo` function, which represents the asynchronous operation we want to perform. This function must return a promise and can include logic to handle success and errors, such as checking the input for specific values (e.g., ensuring the name is not 'error').
2. **Using the `useActionState` Hook**: We call `useActionState(submitUserInfo, null)` to link the form action with our server-side function. This results in three returned values: `state`, `formAction`, and `isPending`, which we use to handle form submission and UI updates.
3. **Handling Returned Values**: The returned values from `useActionState` make managing the form state easier. In `RefactoredForm`, the `isPending` state is used to disable the submit button and show the loading state, while `state` is used to display any success or error messages directly in the UI, reducing the need for individual states for these aspects.

As you can see in the form above, we reduced the lines of code by over 20, which is impressive for a single hook. You can already see some of the benefits here, but in the next section, let's dive deeper into those advantages.

## Benefits of Using `useActionState`

### Simplified Form Management

As we saw in the section above the `useActionState` significantly streamlines form state management by consolidating various aspects of state handling into a single, cohesive hook. Typically, managing forms requires multiple hooks such as `useState` and `useEffect` to manage state for loading, errors, and form submissions. With `useActionState`, these tasks are unified, resulting in cleaner and more maintainable code. The `isPending` state, for example, allows developers to easily track the form's loading state and provide visual feedback, such as displaying a spinner or disabling a button during asynchronous operations.

### Automatic Form Reset

Another key advantage of `useActionState` is its built-in capability to reset forms automatically after a successful submission. Traditionally, developers need to implement extra logic to handle form resets, which can add complexity and require additional code. By automating this process, `useActionState` reduces boilerplate and enhances the user experience, ensuring that forms are seamlessly reset without manual intervention.

### Enhanced User Feedback with `isPending`

The `isPending` state provided by `useActionState` is highly effective in enhancing user experience by offering real-time feedback during form submissions. This state allows developers to indicate ongoing processes by showing a loading indicator or disabling form inputs, which prevents accidental double submissions. Such visual feedback helps users understand that their request is being processed, which contributes to a smoother and more predictable interaction with the application.

### Integration with React Server Components

`useActionState` is also particularly well-suited for integrating with React Server Components. This integration allows forms to remain interactive even before the client-side JavaScript is fully loaded, which leads to improved perceived performance. By enabling server actions to be used directly in forms, `useActionState` minimizes the need for complex server endpoints and makes development more efficient. This feature helps bridge the gap between server-side logic and client-side interactivity in a seamless manner.

### Improved Security and Progressive Enhancement

When dealing with forms that require handling sensitive data, security becomes a crucial consideration. `useActionState` addresses this by keeping the business logic server-side, thereby reducing the risk of exposing sensitive operations through client-side JavaScript. Furthermore, `useActionState` supports progressive enhancement, meaning that forms can still function even if JavaScript fails to load. Users are able to submit forms via traditional methods, ensuring core functionality is always preserved, regardless of the environment.

## When and Why to Use `useActionState`

### Handling Asynchronous Operations and Server Responses

`useActionState` is an ideal choice for forms that require interaction with a server or asynchronous operations, such as validating user input or submitting data to an API. It simplifies handling server responses—such as success or error messages—making it easier to provide users with immediate and clear feedback. By enabling seamless interaction with server actions, `useActionState` optimizes both the developer's workflow and the overall user experience.

### Managing Complex Forms

For more intricate forms, such as those involving multiple steps or requiring extensive data handling, `useActionState` offers a cohesive solution for managing state. Instead of relying on a variety of different hooks to maintain state for each aspect of the form, developers can use `useActionState` to centralize state management. This reduces code complexity and ensures that forms remain organized and maintainable, which is particularly valuable for applications that require multi-step user input or sophisticated form logic.

### Enhancing the User Experience

A significant advantage of `useActionState` is its ability to enhance the user experience. By utilizing the `isPending` state, developers can communicate the status of form submissions effectively—whether by displaying loading animations or disabling input elements during processing. This ensures that users receive immediate visual feedback, fostering a sense of responsiveness and reliability in the application.

Overall, `useActionState` provides a powerful tool for managing form submissions efficiently while maintaining clean, concise code. It helps enhance security, supports complex form flows, and offers an improved user experience by ensuring clear communication of form state—all essential aspects for developing robust web applications.

### Common Considerations

When using `useActionState`, there are several key considerations to keep in mind. First, proper error handling should be integrated within the action function to ensure users receive clear feedback when something goes wrong. Second, defining an appropriate initial state is crucial for the form to behave correctly from the outset. Lastly, while leveraging `useActionState` can improve performance, developers should be mindful of how frequently state updates are triggered, especially in more complex forms, to maintain optimal efficiency.

<Callout type="info">

"When you wrap an action with useActionState, it adds the current form state as the first argument, making the submitted form data the second argument." - React documents

Simply put, `useActionState` takes the current form state as the first argument, making the form data the second argument.

</Callout>

```jsx
async function myAction(currentState, formData) {
	console.log(currentState); // The current state of the form
	console.log(formData); // Submitted form data
}
```

This example shows how `useActionState` modifies the arguments, with `currentState` being first and `formData` second.

## Conclusion

Alongside the new React compiler, this hook is one of my favorite updates in React 19. It makes developers' lives easier, simpler, and more enjoyable, revitalizing the way we handle forms in React. React has done a great job addressing previous challenges developers faced, while also preparing for how we will adapt to using forms in the future.

Whether you've used useActionState before, are currently using it, or are trying it for the first time, I’d love to hear about your experience and how useful you find it.

================
File: lib/custom-components.tsx
================
//@typescript-eslint/no-explicit-any

import defaultMdxComponents from "fumadocs-ui/mdx";
import { Accordion, Accordions } from "fumadocs-ui/components/accordion";
import { DynamicCodeBlock } from "fumadocs-ui/components/dynamic-codeblock";
import { Callout } from "fumadocs-ui/components/callout";
import { Banner } from "fumadocs-ui/components/banner";
import { File, Folder, Files } from "fumadocs-ui/components/files";
import { ImageZoom } from "fumadocs-ui/components/image-zoom";
import { InlineTOC } from "fumadocs-ui/components/inline-toc";
import { Step, Steps } from "fumadocs-ui/components/steps";
import { Tab, Tabs } from "fumadocs-ui/components/tabs";
import { TypeTable } from "fumadocs-ui/components/type-table";
import { Pre, CodeBlock } from "fumadocs-ui/components/codeblock";
import { Heading } from "fumadocs-ui/components/heading";
import CompilerComparison from "@/components/ui/blog/react-complier/compiler-comparison";
import FlowDiagram from "@/components/ui/blog/react-server-component/FlowDiagram";
const customComponents = {
	...defaultMdxComponents,
	Accordion,
	Accordions,
	DynamicCodeBlock,
	Callout,
	Banner,
	File,
	Folder,
	Files,
	ImageZoom,
	InlineTOC,
	Step,
	Steps,
	Tab,
	Tabs,
	TypeTable,
	Pre,
	CodeBlock,
	h1: (props: any) => <Heading as="h1" {...props} />,
	h2: (props: any) => <Heading as="h2" {...props} />,
	h3: (props: any) => <Heading as="h3" {...props} />,
	h4: (props: any) => <Heading as="h4" {...props} />,
	h5: (props: any) => <Heading as="h5" {...props} />,
	h6: (props: any) => <Heading as="h6" {...props} />,
	CompilerComparison,
	FlowDiagram,
};

export default customComponents;

================
File: lib/source.ts
================
import { blogPosts } from "@/.source";
import { createMDXSource } from "fumadocs-mdx";
import { loader } from "fumadocs-core/source";

export const blog = loader({
	baseUrl: "/blog",
	source: createMDXSource(blogPosts),
});

================
File: lib/utils.ts
================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: .eslintrc.json
================
{
	"extends": ["next/core-web-vitals", "next/typescript"],
	"rules": {
		"@typescript-eslint/no-explicit-any": "off"
	}
}

================
File: .gitignore
================
# deps
/node_modules

# generated content
.contentlayer
.content-collections
.source

# test & build
/coverage
/.next/
/out/
/build
*.tsbuildinfo

# misc
.DS_Store
*.pem
/.pnp
.pnp.js
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# others
.env*.local
.vercel
next-env.d.ts

================
File: components.json
================
{
	"$schema": "https://ui.shadcn.com/schema.json",
	"style": "new-york",
	"rsc": true,
	"tsx": true,
	"tailwind": {
		"config": "",
		"css": "app/global.css",
		"baseColor": "neutral",
		"cssVariables": true,
		"prefix": ""
	},
	"aliases": {
		"components": "@/components",
		"utils": "@/lib/utils",
		"ui": "@/components/ui",
		"lib": "@/lib",
		"hooks": "@/hooks"
	},
	"iconLibrary": "lucide"
}

================
File: next.config.mjs
================
import { createMDX } from 'fumadocs-mdx/next';

const withMDX = createMDX();

/** @type {import('next').NextConfig} */
const config = {
  reactStrictMode: true,
};

export default withMDX(config);

================
File: package.json
================
{
	"name": "portfolio-v.7.0",
	"version": "0.0.0",
	"private": true,
	"scripts": {
		"build": "next build",
		"dev": "next dev",
		"start": "next start",
		"postinstall": "fumadocs-mdx"
	},
	"dependencies": {
		"@hookform/resolvers": "^4.1.0",
		"@radix-ui/react-accordion": "^1.2.3",
		"@radix-ui/react-alert-dialog": "^1.1.6",
		"@radix-ui/react-aspect-ratio": "^1.1.2",
		"@radix-ui/react-avatar": "^1.1.3",
		"@radix-ui/react-checkbox": "^1.1.4",
		"@radix-ui/react-collapsible": "^1.1.3",
		"@radix-ui/react-context-menu": "^2.2.6",
		"@radix-ui/react-dialog": "^1.1.6",
		"@radix-ui/react-dropdown-menu": "^2.1.6",
		"@radix-ui/react-hover-card": "^1.1.6",
		"@radix-ui/react-label": "^2.1.2",
		"@radix-ui/react-menubar": "^1.1.6",
		"@radix-ui/react-navigation-menu": "^1.2.5",
		"@radix-ui/react-popover": "^1.1.6",
		"@radix-ui/react-progress": "^1.1.2",
		"@radix-ui/react-radio-group": "^1.2.3",
		"@radix-ui/react-scroll-area": "^1.2.3",
		"@radix-ui/react-select": "^2.1.6",
		"@radix-ui/react-separator": "^1.1.2",
		"@radix-ui/react-slider": "^1.2.3",
		"@radix-ui/react-slot": "^1.1.2",
		"@radix-ui/react-switch": "^1.1.3",
		"@radix-ui/react-tabs": "^1.1.3",
		"@radix-ui/react-toggle": "^1.1.2",
		"@radix-ui/react-toggle-group": "^1.1.2",
		"@radix-ui/react-tooltip": "^1.1.8",
		"class-variance-authority": "^0.7.1",
		"clsx": "^2.1.1",
		"cmdk": "1.0.0",
		"date-fns": "^4.1.0",
		"embla-carousel-react": "^8.5.2",
		"fumadocs-core": "15.0.1",
		"fumadocs-mdx": "11.4.0",
		"fumadocs-ui": "15.0.1",
		"input-otp": "^1.4.2",
		"lucide-react": "^0.474.0",
		"motion": "^12.0.6",
		"next": "15.1.6",
		"next-themes": "^0.4.4",
		"ogl": "^1.0.11",
		"react": "^19.0.0",
		"react-day-picker": "8.10.1",
		"react-dom": "^19.0.0",
		"react-hook-form": "^7.54.2",
		"react-resizable-panels": "^2.1.7",
		"recharts": "^2.15.1",
		"sonner": "^2.0.1",
		"tailwind-merge": "^3.0.1",
		"tailwindcss-animate": "^1.0.7",
		"vaul": "^1.1.2",
		"zod": "^3.24.1"
	},
	"devDependencies": {
		"@tailwindcss/postcss": "^4.0.2",
		"@types/mdx": "^2.0.13",
		"@types/node": "22.13.0",
		"@types/react": "^19.0.8",
		"@types/react-dom": "^19.0.3",
		"eslint": "^8",
		"eslint-config-next": "15.1.6",
		"postcss": "^8.5.1",
		"tailwindcss": "^4.0.2",
		"typescript": "^5.7.3"
	}
}

================
File: postcss.config.mjs
================
export default {
  plugins: {
    '@tailwindcss/postcss': {},
  },
};

================
File: README.md
================
# portfolio-v.7.0

This is a Next.js application generated with
[Create Fumadocs](https://github.com/fuma-nama/fumadocs).

Run development server:

```bash
npm run dev
# or
pnpm dev
# or
yarn dev
```

Open http://localhost:3000 with your browser to see the result.

## Learn More

To learn more about Next.js and Fumadocs, take a look at the following
resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js
  features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.
- [Fumadocs](https://fumadocs.vercel.app) - learn about Fumadocs

================
File: source.config.ts
================
import {
	defineDocs,
	defineConfig,
	frontmatterSchema,
	defineCollections,
} from "fumadocs-mdx/config";
import { z } from "zod";

export const { docs, meta } = defineDocs({
	dir: "content/docs",
});

export const blogPosts = defineCollections({
	type: "doc",
	dir: "content/blog",
	schema: frontmatterSchema.extend({
		author: z.string(),
		date: z.string().date().or(z.date()),
	}),
});

export default defineConfig();

================
File: tsconfig.json
================
{
	"compilerOptions": {
		"baseUrl": ".",
		"target": "ESNext",
		"lib": ["dom", "dom.iterable", "esnext"],
		"allowJs": true,
		"skipLibCheck": true,
		"strict": true,
		"noEmit": true,
		"esModuleInterop": true,
		"module": "esnext",
		"moduleResolution": "bundler",
		"resolveJsonModule": true,
		"isolatedModules": true,
		"jsx": "preserve",
		"incremental": true,
		"paths": {
			"@/*": ["./*"]
		},
		"plugins": [
			{
				"name": "next"
			}
		]
	},
	"include": [
		"next-env.d.ts",
		"**/*.ts",
		"**/*.tsx",
		".next/types/**/*.ts",
		"content/blog/react-compiler.mdx"
	],
	"exclude": ["node_modules"]
}
