This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-19T15:46:31.722Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.cursor/
  rules/
    portfolio.mdc
app/
  (home)/
    blog/
      [slug]/
        page.tsx
      page.tsx
    layout.tsx
    page.tsx
  helpers/
    Unicorn-studio.tsx
  global.css
  layout.config.tsx
  layout.tsx
  repomix-output.txt
components/
  landing/
    About.tsx
    Blog.tsx
    Contact.tsx
    Hero.tsx
    PageHeader.tsx
  UI/
    AuthorDisplay.tsx
    Badge.tsx
    BlogCard.tsx
    featureCard.tsx
    LongCards.tsx
    MidCards.tsx
    Orb.tsx
    Text-reveal.tsx
    WaveCards.tsx
  typography.tsx
content/
  blog/
    first-post.mdx
lib/
  source.ts
  utils.ts
.eslintrc.json
.gitignore
next.config.mjs
package.json
postcss.config.mjs
README.md
source.config.ts
tsconfig.json

================================================================
Repository Files
================================================================

================
File: .cursor/rules/portfolio.mdc
================
---
description: when on my potfolio
globs: 
---
Next.js Best Practices:

Utilize Next.js App Router for improved performance and easier routing
Implement proper error boundaries to handle and display errors gracefully
Use server components for better performance and reduced client-side JavaScript
Leverage Next.js built-in image optimization for faster image loading
Implement proper data fetching patterns using getServerSideProps or getStaticProps
Use Next.js built-in internationalization features for multi-language support
Implement proper security measures like CSRF protection and secure headers

React Best Practices:

Use functional components and hooks instead of class components for better code organization
Implement proper React.memo and useMemo for performance optimization
Follow the React hooks rules strictly to avoid common pitfalls
Use context API for efficient state management across components
Implement proper prop-types or TypeScript interfaces for type checking
Use React.lazy and Suspense for code-splitting and lazy loading of components
Implement proper error boundaries to catch and handle errors in components

Tailwind CSS Best Practices:

Use utility-first approach for consistent and maintainable styles
Implement proper responsive design using Tailwind's responsive utilities
Use Tailwind's custom theme configuration for consistent design system
Implement proper dark mode support using Tailwind's dark mode utilities
Use Tailwind's @apply directive for component-specific styles
Implement proper accessibility practices using Tailwind's accessibility utilities
Use Tailwind's JIT mode for faster build times and smaller CSS output

Zod Best Practices:

Use Zod for runtime type checking and validation of user inputs
Implement proper error handling and user feedback for validation errors
Use Zod's inferred types for TypeScript integration and type safety
Implement proper schema composition for complex data structures
Use Zod's built-in transformations for data normalization and processing
Implement proper unit tests for Zod schemas to ensure correctness
Use Zod's async validation for handling asynchronous data validation

Fumadocs Best Practices:

Use Fumadocs for creating consistent and maintainable documentation
Implement proper MDX support for rich content and interactive elements
Use Fumadocs' built-in search functionality for better user experience
Implement proper versioning and navigation for large documentation sets
Use Fumadocs' custom components for consistent UI across documentation
Implement proper SEO optimization for documentation pages
Use Fumadocs' built-in analytics for tracking user engagement

Lucide-react Best Practices:

Use Lucide icons for consistent and customizable iconography
Implement proper icon sizing and styling using Lucide's props
Use Lucide's built-in accessibility features for better user experience
Implement proper icon theming for dark mode and custom color schemes
Use Lucide's custom icon creation for brand-specific icons
Implement proper icon loading and caching for performance optimization
Use Lucide's icon search functionality for easy icon discovery

Framer Motion Best Practices:

Use Framer Motion for creating smooth and performant animations
Implement proper animation variants for reusable animation patterns
Use Framer Motion's built-in gesture recognition for interactive animations
Implement proper animation optimization for performance-critical scenarios
Use Framer Motion's layout animations for smooth transitions between states
Implement proper accessibility practices for animated elements
Use Framer Motion's declarative API for easier animation management

Class Variance Authority Best Practices:

Use Class Variance Authority for creating consistent and maintainable class variants
Implement proper variant composition for complex UI components
Use Class Variance Authority's built-in TypeScript support for type-safe variants
Implement proper variant naming conventions for better code readability
Use Class Variance Authority's custom variant creation for project-specific needs
Implement proper variant documentation for easier team collaboration
Use Class Variance Authority's built-in utility classes for common styling patterns

Tailwind Merge Best Practices:

Use Tailwind Merge for combining multiple Tailwind classes efficiently
Implement proper class merging for complex component styles
Use Tailwind Merge's built-in conflict resolution for handling class conflicts
Implement proper class ordering for consistent styling results
Use Tailwind Merge's custom configuration for project-specific merging rules
Implement proper performance optimization for large-scale applications
Use Tailwind Merge's TypeScript support for type-safe class merging

General Standards:

Keep components small and focused for better maintainability
Follow proper state management patterns for efficient data flow
Implement proper testing practices for ensuring code quality
Use proper code splitting and lazy loading for improved performance
Implement proper error handling and logging for better debugging
Follow proper code organization and modularization for easier maintenance
Implement proper security measures to protect against common vulnerabilities

================
File: app/(home)/blog/[slug]/page.tsx
================
import { notFound } from "next/navigation";
import Link from "next/link";
import { InlineTOC } from "fumadocs-ui/components/inline-toc";
import defaultMdxComponents from "fumadocs-ui/mdx";
import { blog } from "@/lib/source";

export default async function Page(props: {
	params: Promise<{ slug: string }>;
}) {
	const params = await props.params;
	const page = blog.getPage([params.slug]);

	if (!page) notFound();
	const Mdx = page.data.body;

	return (
		<>
			<div className="container py-12 border rounded-xl md:px-8">
				<h1 className="mb-2 text-3xl font-bold">{page.data.title}</h1>
				<p className="mb-4 text-fd-muted-foreground">{page.data.description}</p>
				<Link href="/blog">Back</Link>
			</div>
			<article className="container flex flex-col px-4 py-8">
				<div className="min-w-0 prose">
					<InlineTOC items={page.data.toc} />
					<Mdx components={defaultMdxComponents} />
				</div>
				<div className="flex flex-col gap-4 text-sm">
					<div>
						<p className="mb-1 text-fd-muted-foreground">Written by</p>
						<p className="font-medium">{page.data.author}</p>
					</div>
					<div>
						<p className="mb-1 text-sm text-fd-muted-foreground">At</p>
						<p className="font-medium">
							{new Date(page.data.date).toDateString()}
						</p>
					</div>
				</div>
			</article>
		</>
	);
}

export function generateStaticParams(): { slug: string }[] {
	return blog.getPages().map((page) => ({
		slug: page.slugs[0],
	}));
}

================
File: app/(home)/blog/page.tsx
================
import { blog } from "@/lib/source";
import MidCards from "@/components/UI/MidCards";
import LongCards from "@/components/UI/LongCards";
import FeatureCard from "@/components/UI/featureCard";

export default function Home() {
	const posts = blog.getPages();

	return (
		<main className="grow container mx-auto px-4 py-8">
			<h1 className="text-4xl font-bold mb-8">Latest Blog Posts</h1>
			<div className="grid  md:grid-cols-2">
				<FeatureCard
					title={"AI Agents"}
					description={
						"AI agents are a new way to build apps. They are a type of agent that can be used to build apps."
					}
					author={{
						name: "Stav Fernandes",
						image: "/images/profile.jpeg",
					}}
				/>
				<div>
					<MidCards
						title={"AI Agents"}
						description={
							"AI agents are a new way to build apps. They are a type of agent that can be used to build apps."
						}
						author={{
							name: "Stav Fernandes",
							image: "/images/profile.jpeg",
						}}
						className="md:border-l-0"
					/>
					<MidCards
						title={"AI Agents"}
						description={
							"AI agents are a new way to build apps. They are a type of agent that can be used to build apps."
						}
						author={{
							name: "Stav Fernandes",
							image: "/images/profile.jpeg",
						}}
						className="md:border-l-0"
					/>
				</div>
			</div>
			<div>
				<ul>
					<LongCards
						title={"Build any LLM app in TypeScript with Vercel's AI SDK"}
						description={"Build any LLM app in TypeScript with Vercel's AI SDK"}
						author={{
							name: "Stav Fernandes",
							image: "/images/profile.jpeg",
						}}
						date={"2024-01-01"}
						link={"/blog/ai-agents"}
					/>
					<LongCards
						title={"Build any LLM app in TypeScript with Vercel's AI SDK"}
						description={"Build any LLM app in TypeScript with Vercel's AI SDK"}
						author={{
							name: "Stav Fernandes",
							image: "/images/profile.jpeg",
						}}
						date={"2024-01-01"}
						link={"/blog/ai-agents"}
					/>
					<LongCards
						title={"Build any LLM app in TypeScript with Vercel's AI SDK"}
						description={"Build any LLM app in TypeScript with Vercel's AI SDK"}
						author={{
							name: "Stav Fernandes",
							image: "/images/profile.jpeg",
						}}
						date={"2024-01-01"}
						link={"/blog/ai-agents"}
					/>
					<LongCards
						title={"Build any LLM app in TypeScript with Vercel's AI SDK"}
						description={"Build any LLM app in TypeScript with Vercel's AI SDK"}
						author={{
							name: "Stav Fernandes",
							image: "/images/profile.jpeg",
						}}
						date={"2024-01-01"}
						link={"/blog/ai-agents"}
					/>
				</ul>
			</div>
		</main>
	);
}

================
File: app/(home)/layout.tsx
================
import type { ReactNode } from "react";
import { HomeLayout } from "fumadocs-ui/layouts/home";
import { baseOptions } from "@/app/layout.config";

export default function Layout({ children }: { children: ReactNode }) {
	return (
		<HomeLayout style={{ borderRadius: 0 }} {...baseOptions}>
			{children}
		</HomeLayout>
	);
}

================
File: app/(home)/page.tsx
================
import React from "react";
import Hero from "@/components/landing/Hero";
import Blog from "@/components/landing/Blog";
import About from "@/components/landing/About";
import Contact from "@/components/landing/Contact";

const Home = () => {
	return (
		<main >
			<Hero />
			<About />
			<Blog />
			<Contact />
		</main>
	);
};

export default Home;

================
File: app/helpers/Unicorn-studio.tsx
================
/* eslint-disable @typescript-eslint/no-explicit-any */
"use client";

import { useEffect, useRef, useState } from "react";

export type UnicornSceneProps = {
	projectId: string;
	width?: number | string;
	height?: number | string;
	scale?: number;
	dpi?: number;
	fps?: number;
	altText?: string;
	ariaLabel?: string;
	className?: string;
	lazyLoad?: boolean;
};

export default function UnicornScene({
	projectId,
	width = "100%",
	height = "100%",
	scale = 1,
	dpi = 1.5,
	fps = 60,
	altText = "Unicorn Studio Animation",
	ariaLabel = altText,
	className = "",
	lazyLoad = false,
}: UnicornSceneProps) {
	const elementRef = useRef<HTMLDivElement>(null);
	const sceneRef = useRef<any>(null);
	const [error, setError] = useState<string | null>(null);
	const [scriptLoaded, setScriptLoaded] = useState(false);

	useEffect(() => {
		if (typeof window === "undefined") return;

		const initializeScript = (callback: () => void) => {
			const version = "1.4.0";

			const existingScript = document.querySelector(
				'script[src^="https://cdn.unicorn.studio"]'
			);

			if (existingScript) {
				if (scriptLoaded) {
					callback();
				} else {
					existingScript.addEventListener("load", callback);
				}
				return;
			}

			const script = document.createElement("script");
			script.src = `https://cdn.unicorn.studio/v${version}/unicornStudio.umd.js`;
			script.async = true;

			script.onload = () => {
				setScriptLoaded(true);
				callback();
			};
			script.onerror = () => setError("Failed to load UnicornStudio script");

			document.body.appendChild(script);
		};

		const initializeScene = () => {
			if (!elementRef.current) return;

			const cleanProjectId = projectId.split("?")[0];

			elementRef.current.setAttribute("data-us-project", cleanProjectId);

			const UnicornStudio = (window as any).UnicornStudio;

			if (!UnicornStudio) {
				throw new Error("UnicornStudio not found");
			}

			if (sceneRef.current) {
				sceneRef.current.destroy();
			}

			UnicornStudio.init({
				scale,
				dpi,
			}).then((scenes: any[]) => {
				const ourScene = scenes.find(
					(scene) =>
						scene.element === elementRef.current ||
						scene.element.contains(elementRef.current)
				);
				if (ourScene) {
					sceneRef.current = ourScene;
				}
			});
		};

		initializeScript(initializeScene);

		return () => {
			if (sceneRef.current) {
				sceneRef.current.destroy();
				sceneRef.current = null;
			}
		};
	}, [projectId, scale, dpi]);

	return (
		<div
			ref={elementRef}
			style={{
				width: typeof width === "number" ? `${width}px` : width,
				height: typeof height === "number" ? `${height}px` : height,
			}}
			className={`relative ${className}`}
			role="img"
			aria-label={ariaLabel}
			data-us-dpi={dpi}
			data-us-scale={scale}
			data-us-fps={fps}
			data-us-alttext={altText}
			data-us-arialabel={ariaLabel}
			data-us-lazyload={lazyLoad ? "true" : ""}
			data-us-production
		>
			{error && <div className="text-red-500">{error}</div>}
		</div>
	);
}

================
File: app/global.css
================
@import "tailwindcss";
@import "fumadocs-ui/css/black.css";
@import "fumadocs-ui/css/preset.css";

@source '../node_modules/fumadocs-ui/dist/**/*.js';

@layer utilities {
	.primary-gradient {
		@apply bg-gradient-to-r from-green-200 via-teal-400 to-cyan-600 text-transparent bg-clip-text;
	}
}

================
File: app/layout.config.tsx
================
import type { BaseLayoutProps } from "fumadocs-ui/layouts/shared";

export const baseOptions: BaseLayoutProps = {
	nav: {
		title: "Stav Fernandes",
	},
	disableThemeSwitch: true,
	links: [
		{
			text: "Posts",
			url: "/blog",
			active: "nested-url",
		},
	],
};

================
File: app/layout.tsx
================
import "./global.css";
import { RootProvider } from "fumadocs-ui/provider";
import { Inter } from "next/font/google";
import type { ReactNode } from "react";

const inter = Inter({
	subsets: ["latin"],
});

export default function Layout({ children }: { children: ReactNode }) {
	return (
		<html lang="en" className={inter.className} suppressHydrationWarning>
			<body className="min-h-screen">
				<RootProvider search={{ enabled: false }}>{children}</RootProvider>
			</body>
		</html>
	);
}

================
File: app/repomix-output.txt
================
This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-02T13:51:39.223Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
(home)/
  blog/
    [slug]/
      page.tsx
    page.tsx
  layout.tsx
  page.tsx
global.css
layout.config.tsx
layout.tsx

================================================================
Repository Files
================================================================

================
File: (home)/blog/[slug]/page.tsx
================
import { notFound } from "next/navigation";
import Link from "next/link";
import { InlineTOC } from "fumadocs-ui/components/inline-toc";
import defaultMdxComponents from "fumadocs-ui/mdx";
import { blog } from "@/lib/source";

export default async function Page(props: {
	params: Promise<{ slug: string }>;
}) {
	const params = await props.params;
	const page = blog.getPage([params.slug]);

	if (!page) notFound();
	const Mdx = page.data.body;

	return (
		<>
			<div className="container py-12 border rounded-xl md:px-8">
				<h1 className="mb-2 text-3xl font-bold">{page.data.title}</h1>
				<p className="mb-4 text-fd-muted-foreground">{page.data.description}</p>
				<Link href="/blog">Back</Link>
			</div>
			<article className="container flex flex-col px-4 py-8">
				<div className="min-w-0 prose">
					<InlineTOC items={page.data.toc} />
					<Mdx components={defaultMdxComponents} />
				</div>
				<div className="flex flex-col gap-4 text-sm">
					<div>
						<p className="mb-1 text-fd-muted-foreground">Written by</p>
						<p className="font-medium">{page.data.author}</p>
					</div>
					<div>
						<p className="mb-1 text-sm text-fd-muted-foreground">At</p>
						<p className="font-medium">
							{new Date(page.data.date).toDateString()}
						</p>
					</div>
				</div>
			</article>
		</>
	);
}

export function generateStaticParams(): { slug: string }[] {
	return blog.getPages().map((page) => ({
		slug: page.slugs[0],
	}));
}

================
File: (home)/blog/page.tsx
================
import Link from "next/link";
import { blog } from "@/lib/source";

export default function Home() {
	const posts = blog.getPages();

	return (
		<main className="grow container mx-auto px-4 py-8">
			<h1 className="text-4xl font-bold mb-8">Latest Blog Posts</h1>
			<div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
				{posts.map((post) => (
					<Link
						key={post.url}
						href={post.url}
						className="block bg-fd-secondary rounded-lg shadow-md overflow-hidden p-6"
					>
						<h2 className="text-xl font-semibold mb-2">{post.data.title}</h2>
						<p className="mb-4">{post.data.description}</p>
					</Link>
				))}
			</div>
		</main>
	);
}

================
File: (home)/layout.tsx
================
import type { ReactNode } from "react";
import { HomeLayout } from "fumadocs-ui/layouts/home";
import { baseOptions } from "@/app/layout.config";

export default function Layout({ children }: { children: ReactNode }) {
	return <HomeLayout {...baseOptions}>{children}</HomeLayout>;
}

================
File: (home)/page.tsx
================
import React from "react";
import Hero from "@/components/landing/Hero";
import Blog from "@/components/landing/Blog";
import About from "@/components/landing/About";
import Contact from "@/components/landing/Contact";

const Home = () => {
	return (
		<main className="max-w-5xl mx-auto">
			<Hero />
			<About />
			<Blog />
			<Contact />
		</main>
	);
};

export default Home;

================
File: global.css
================
@import "tailwindcss";
@import "fumadocs-ui/css/neutral.css";
@import "fumadocs-ui/css/preset.css";

@source '../node_modules/fumadocs-ui/dist/**/*.js';

@custom-variant dark (&:is(.dark *));

================
File: layout.config.tsx
================
import type { BaseLayoutProps } from "fumadocs-ui/layouts/shared";

/**
 * Shared layout configurations
 *
 * you can configure layouts individually from:
 * Home Layout: app/(home)/layout.tsx
 * Docs Layout: app/docs/layout.tsx
 */
export const baseOptions: BaseLayoutProps = {
	nav: {
		title: "Stav Fernandes",
	},
	links: [
		{
			text: "Blog",
			url: "/blog",
			active: "nested-url",
		},
	],
};

================
File: layout.tsx
================
import "./global.css";
import { RootProvider } from "fumadocs-ui/provider";
import { Inter } from "next/font/google";
import type { ReactNode } from "react";

const inter = Inter({
	subsets: ["latin"],
});

export default function Layout({ children }: { children: ReactNode }) {
	return (
		<html lang="en" className={inter.className} suppressHydrationWarning>
			<body className="min-h-screen">
				<RootProvider
					search={{
						enabled: false,
					}}
				>
					{children}
				</RootProvider>
			</body>
		</html>
	);
}

================
File: components/landing/About.tsx
================
import { H2 } from "../typography";
import { TextReveal } from "../UI/Text-reveal";

const About = () => {
	return (
		<section className="max-w-5xl mx-auto ">
			<div className="text-center border border-[bg-muted-foreground] border-dashed grid grid-cols-12">
				<div className="col-span-1 border-r border-[bg-muted-foreground] border-dashed" />
				<H2 className="col-span-10 p-10">About</H2>
				<div className="col-span-1 border-l border-[bg-muted-foreground] border-dashed" />
			</div>
			<div className="z-10 flex items-center justify-center border border-[bg-mu-f] border-dashed border-t-0 min-h-64 ">
				<TextReveal
					text="Hey, I’m Stav, a software engineer passionate about creating beautiful AI-powered experiences. I thrive on learning, growing, and collaborating with ambitious teams who push boundaries and chase bold ideas. I love bringing ideas to life through code and building things that make an impact. If you love building, experimenting, and thinking big (and different), get in touch!"
					highlightWords={["learning,", "growing,", "collaborating"]}
				/>
			</div>
		</section>
	);
};

export default About;

================
File: components/landing/Blog.tsx
================
import React from "react";
import PageHeader from "./PageHeader";
import BlogCard from "../UI/BlogCard";

const Blog = () => {
	return (
		<div className="max-w-5xl mx-auto">
			<PageHeader title="Latest posts" />
			<div className=" flex  flex-col  items-center justify-center border border-[bg-muted-foreground] border-dashed border-t-0 min-h-64">
				<BlogCard
					projectId="O5x0kQ0Xk0UavLvJlv3A"
					title="Blog Post 1"
					description="This is the description of the first blog post."
					author={{
						name: "John Doe",
						avatar: "",
					}}
					date="2023-01-01"
				/>
				<BlogCard
					title="Blog Post 1"
					description="This is the description of the first blog post."
					author={{
						name: "John Doe",
						avatar: "",
					}}
					date="2023-01-01"
					projectId="kb9IHnXSZRLNGZkqtIJN"
				/>
				<BlogCard
					title="Blog Post 1"
					description="This is the description of the first blog post."
					author={{
						name: "John Doe",
						avatar: "",
					}}
					date="2023-01-01"
					projectId="VzcZVpiOIfumxV4NDHWm"
				/>
			</div>
		</div>
	);
};

export default Blog;

================
File: components/landing/Contact.tsx
================
import PageHeader from "./PageHeader";
import Link from "next/link";
import { Mail, Linkedin } from "lucide-react";
import { H3, P } from "../typography";

const Contact = () => {
	return (
		<div className="max-w-5xl mx-auto h-full">
			<PageHeader title="Contact" />
			<div className="p-5 flex flex-col items-center justify-center gap-8 min-h-[calc(100vh-20rem)] py-20 text-center border border-dashed border-t-muted-foreground">
				<H3>Want to connect?</H3>

				<P>
					I&apos;m always open to new opportunities and collaborations. Feel
					free to reach out through email or connect with me on LinkedIn.
				</P>

				<div className="flex flex-col gap-4 sm:flex-row">
					<Link
						href="mailto:your-email@example.com"
						className="inline-flex items-center gap-2 px-6 py-3 text-sm font-medium transition-colors rounded-lg bg-secondary hover:bg-secondary/80"
						target="_blank"
						rel="noopener noreferrer"
					>
						<Mail className="w-5 h-5" />
						Send Email
					</Link>

					<Link
						href="https://linkedin.com/in/your-profile"
						className="inline-flex items-center gap-2 px-6 py-3 text-sm font-medium transition-colors rounded-lg bg-secondary hover:bg-secondary/80"
						target="_blank"
						rel="noopener noreferrer"
					>
						<Linkedin className="w-5 h-5" />
						LinkedIn
					</Link>
				</div>
			</div>
		</div>
	);
};

export default Contact;

================
File: components/landing/Hero.tsx
================
import React from "react";
import { H1, H4 } from "../typography";
import Orb from "../UI/Orb";

const Hero = () => {
	return (
		<div className=" h-full max-w-5xl mx-auto">
			<div className="bg-background relative max-w-5xl max-sm:border-none border-l border-r border-dashed border-[bg-muted-foreground] mx-auto h-[calc(100vh-65px)]">
				<div className="relative w-full h-full">
					<Orb
						hoverIntensity={1}
						rotateOnHover={true}
						hue={100}
						forceHoverState={false}
					/>
					<H1 className="absolute z-10 w-full text-center -translate-x-1/2  -translate-y-12 top-1/2 left-1/2 text-balance text-foreground">
						STAV FERNANDES
					</H1>
					<H4 className="absolute z-10 w-full text-center -translate-x-1/2 translate-y-2 sm:translate-y-10 top-1/2 left-1/2 text-balance text-foreground">
						AI Engineer
					</H4>
				</div>
			</div>
		</div>
	);
};

export default Hero;

================
File: components/landing/PageHeader.tsx
================
import { H2 } from "../typography";

interface PageHeaderProps {
	title: string;
}

const PageHeader = ({ title }: PageHeaderProps) => {
	return (
		<div className="text-center border border-[bg-muted-foreground] border-dashed grid grid-cols-12">
			<div className="col-span-1 border-r border-[bg-muted-foreground] border-dashed" />
			<H2 className="col-span-10 p-10">{title}</H2>
			<div className="col-span-1 border-l border-[bg-muted-foreground] border-dashed" />
		</div>
	);
};

export default PageHeader;

================
File: components/UI/AuthorDisplay.tsx
================
import Image from "next/image";

interface AuthorDisplayProps {
	author: {
		name: string;
		image: string;
	};
	className?: string;
	imageSize?: number;
}

export default function AuthorDisplay({
	author,
	className,
	imageSize = 48,
}: AuthorDisplayProps) {
	return (
		<div className={`flex items-center gap-3 ${className}`}>
			<Image
				src={author.image}
				alt={author.name}
				className="rounded-full"
				width={imageSize}
				height={imageSize}
			/>
			<p className="text-fd-muted-foreground">{author.name}</p>
		</div>
	);
}

================
File: components/UI/Badge.tsx
================
import { cva, type VariantProps } from "class-variance-authority";
import { cn } from "@/lib/utils";

const badgeVariants = cva(
	"inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
	{
		variants: {
			variant: {
				default: "bg-primary text-primary-foreground hover:bg-primary/80",
				secondary:
					"bg-secondary text-secondary-foreground hover:bg-secondary/80",
				destructive:
					"bg-destructive text-destructive-foreground hover:bg-destructive/80",
				outline:
					"text-foreground border border-input hover:bg-accent hover:text-accent-foreground",
				custom: "", // For fully custom styles
			},
		},
		defaultVariants: {
			variant: "default",
		},
	}
);

interface BadgeProps
	extends React.HTMLAttributes<HTMLDivElement>,
		VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
	return (
		<div className={cn(badgeVariants({ variant }), className)} {...props} />
	);
}

export { Badge, badgeVariants };

================
File: components/UI/BlogCard.tsx
================
"use client";

import UnicornScene from "@/app/helpers/Unicorn-studio";
import { ArrowRightIcon } from "lucide-react";
import { motion } from "motion/react";

import Image from "next/image";

interface BlogCardProps {
	title: string;
	description: string;
	author: {
		name: string;
		avatar: string;
	};
	date: string;
	projectId: string;
}

export default function BlogCard({
	title,
	description,
	projectId,
}: BlogCardProps) {
	return (
		<motion.div
			transition={{ type: "spring", stiffness: 300, damping: 20 }}
			className="w-full cursor-pointer group"
		>
			<article className="relative w-full h-full min-h-[400px] overflow-hidden border-b border-[bg-muted-foreground] border-b-dashed text-muted-foreground">
				<UnicornScene
					height="400px"
					width="100%"
					projectId={projectId}
					className="absolute inset-0 z-10 w-full h-full object-cover"
				/>
				<div className="absolute inset-0 z-20 bg-gradient-to-b from-black via-transparent to-black" />
				<div className="absolute inset-10 z-20">
					<div className="flex items-center justify-between">
						<motion.h2
							initial={{ opacity: 0, y: 20 }}
							animate={{ opacity: 1, y: 0 }}
							className="text-2xl font-bold leading-tight tracking-tight"
						>
							{title}
						</motion.h2>
					</div>
				</div>

				<div className="absolute bottom-10 left-10 z-20">
					<motion.p
						initial={{ opacity: 0, y: 10 }}
						animate={{ opacity: 1, y: 0 }}
						transition={{ delay: 0.1 }}
						className="text-muted-foreground"
					>
						{description}
					</motion.p>
				</div>
				<div className="absolute bottom-10 right-10 z-20 flex items-center gap-2 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
					<p className="text-muted-foreground">
						Read more
					</p>
					<ArrowRightIcon className="w-6 h-6" />
				</div>
			</article>
		</motion.div>
	);
}

================
File: components/UI/featureCard.tsx
================
import { cn } from "@/lib/utils";
import Image from "next/image";
import Link from "next/link";
import { H3, P } from "../typography";
import AuthorDisplay from "./AuthorDisplay";
import WaveCards from "./WaveCards";

interface FeatureCardProps {
	tag?: string;
	title: string;
	description: string;
	author: {
		name: string;
		image: string;
	};
	className?: string;
	href?: string;
}

const FeatureCard = ({
	tag = "Featured Post",
	title,
	description,
	author,
	className,
	href = "#",
}: FeatureCardProps) => {
	return (
		<Link
			href={href}
			className={cn(
				"group flex flex-col justify-between min-h-[400px] gap-y-6 p-5 hover:bg-fd-muted/50 to  transition-all duration-300 border border-dashed border-[bg-muted-foreground]",
				className
			)}
		>
			{tag && (
				<span className="primary-gradient text-sm font-medium uppercase tracking-wider">
					{tag}
				</span>
			)}

			<div className="space-y-4">
				<H3>{title}</H3>
				<p className="text-fd-muted-foreground">{description}</p>
				<AuthorDisplay author={author} className="pt-4" />
			</div>
		</Link>
	);
};

export default FeatureCard;

================
File: components/UI/LongCards.tsx
================
"use client";

import Link from "next/link";
import { cn } from "@/lib/utils";
import { H5 } from "../typography";
import AuthorDisplay from "./AuthorDisplay";

interface LongCardProps {
	title: string;
	description: string;
	author: {
		name: string;
		image: string;
	};
	date: string;
	link: string;
	className?: string;
}

export default function LongCard({
	title,
	description,
	author,
	link,
	className,
}: LongCardProps) {
	return (
		<li
			className={cn(
				"border border-dashed border-[bg-muted-foreground] py-4 hover:bg-fd-muted/50 ",
				className
			)}
		>
			<Link
				href={link}
				className="h-full to-secondary group flex flex-col items-baseline justify-between gap-2 from-transparent px-5 py-5 transition ease-in-out hover:bg-gradient-to-l sm:py-5 md:flex-row lg:px-6 "
			>
				<div className="flex flex-col gap-2 md:w-4/6">
					<H5 className="pr-5 sm:truncate">{title}</H5>
					<p className="text-fd-muted-foreground">{description}</p>
					<AuthorDisplay
						author={author}
						className="mt-3 hidden md:flex"
						imageSize={40}
					/>
				</div>

				<div className="pt-4">
					<AuthorDisplay author={author} className="md:hidden" imageSize={40} />
				</div>
			</Link>
		</li>
	);
}

================
File: components/UI/MidCards.tsx
================
import Image from "next/image";
import Link from "next/link";
import { cn } from "@/lib/utils";
import { H4, P } from "../typography";
import AuthorDisplay from "./AuthorDisplay";

interface MidCardsProps {
	title: string;
	description: string;
	author: {
		name: string;
		image: string;
	};
	href?: string;
	className?: string;
}

export default function MidCards({
	title,
	description,
	author,
	href = "#",
	className,
}: MidCardsProps) {
	return (
		<Link
			href={href}
			className={cn(
				"block min-h-[200px]  p-5  flex-col justify-end",
				"border border-dashed border-[bg-muted-foreground] transition-colors hover:bg-fd-muted/50",
				className
			)}
		>
			<div className="max-w-3xl space-y-6">
				<H4>{title}</H4>

				<p className="text-fd-muted-foreground">{description}</p>

				<AuthorDisplay author={author} className="pt-4" />
			</div>
		</Link>
	);
}

================
File: components/UI/Orb.tsx
================
"use client";

import { useEffect, useRef } from "react";
import { Renderer, Program, Mesh, Triangle, Vec3 } from "ogl";

interface OrbProps {
	hue?: number;
	hoverIntensity?: number;
	rotateOnHover?: boolean;
	forceHoverState?: boolean;
}

export default function Orb({
	hue = 0,
	hoverIntensity = 0.2,
	rotateOnHover = true,
	forceHoverState = false,
}: OrbProps) {
	const ctnDom = useRef<HTMLDivElement>(null);

	const vert = /* glsl */ `
    precision highp float;
    attribute vec2 position;
    attribute vec2 uv;
    varying vec2 vUv;
    void main() {
      vUv = uv;
      gl_Position = vec4(position, 0.0, 1.0);
    }
  `;

	const frag = /* glsl */ `
    precision highp float;

    uniform float iTime;
    uniform vec3 iResolution;
    uniform float hue;
    uniform float hover;
    uniform float rot;
    uniform float hoverIntensity;
    varying vec2 vUv;

    vec3 rgb2yiq(vec3 c) {
      float y = dot(c, vec3(0.299, 0.587, 0.114));
      float i = dot(c, vec3(0.596, -0.274, -0.322));
      float q = dot(c, vec3(0.211, -0.523, 0.312));
      return vec3(y, i, q);
    }
    
    vec3 yiq2rgb(vec3 c) {
      float r = c.x + 0.956 * c.y + 0.621 * c.z;
      float g = c.x - 0.272 * c.y - 0.647 * c.z;
      float b = c.x - 1.106 * c.y + 1.703 * c.z;
      return vec3(r, g, b);
    }
    
    vec3 adjustHue(vec3 color, float hueDeg) {
      float hueRad = hueDeg * 3.14159265 / 180.0;
      vec3 yiq = rgb2yiq(color);
      float cosA = cos(hueRad);
      float sinA = sin(hueRad);
      float i = yiq.y * cosA - yiq.z * sinA;
      float q = yiq.y * sinA + yiq.z * cosA;
      yiq.y = i;
      yiq.z = q;
      return yiq2rgb(yiq);
    }
    
    vec3 hash33(vec3 p3) {
      p3 = fract(p3 * vec3(0.1031, 0.11369, 0.13787));
      p3 += dot(p3, p3.yxz + 19.19);
      return -1.0 + 2.0 * fract(vec3(
        p3.x + p3.y,
        p3.x + p3.z,
        p3.y + p3.z
      ) * p3.zyx);
    }
    
    float snoise3(vec3 p) {
      const float K1 = 0.333333333;
      const float K2 = 0.166666667;
      vec3 i = floor(p + (p.x + p.y + p.z) * K1);
      vec3 d0 = p - (i - (i.x + i.y + i.z) * K2);
      vec3 e = step(vec3(0.0), d0 - d0.yzx);
      vec3 i1 = e * (1.0 - e.zxy);
      vec3 i2 = 1.0 - e.zxy * (1.0 - e);
      vec3 d1 = d0 - (i1 - K2);
      vec3 d2 = d0 - (i2 - K1);
      vec3 d3 = d0 - 0.5;
      vec4 h = max(0.6 - vec4(
        dot(d0, d0),
        dot(d1, d1),
        dot(d2, d2),
        dot(d3, d3)
      ), 0.0);
      vec4 n = h * h * h * h * vec4(
        dot(d0, hash33(i)),
        dot(d1, hash33(i + i1)),
        dot(d2, hash33(i + i2)),
        dot(d3, hash33(i + 1.0))
      );
      return dot(vec4(31.316), n);
    }
    
    vec4 extractAlpha(vec3 colorIn) {
      float a = max(max(colorIn.r, colorIn.g), colorIn.b);
      return vec4(colorIn.rgb / (a + 1e-5), a);
    }
    
    const vec3 baseColor1 = vec3(0.611765, 0.262745, 0.996078);
    const vec3 baseColor2 = vec3(0.298039, 0.760784, 0.913725);
    const vec3 baseColor3 = vec3(0.062745, 0.078431, 0.600000);
    const float innerRadius = 0.6;
    const float noiseScale = 0.65;
    
    float light1(float intensity, float attenuation, float dist) {
      return intensity / (1.0 + dist * attenuation);
    }
    
    float light2(float intensity, float attenuation, float dist) {
      return intensity / (1.0 + dist * dist * attenuation);
    }
    
    vec4 draw(vec2 uv) {
      vec3 color1 = adjustHue(baseColor1, hue);
      vec3 color2 = adjustHue(baseColor2, hue);
      vec3 color3 = adjustHue(baseColor3, hue);
      
      float ang = atan(uv.y, uv.x);
      float len = length(uv);
      float invLen = len > 0.0 ? 1.0 / len : 0.0;
      
      float n0 = snoise3(vec3(uv * noiseScale, iTime * 0.5)) * 0.5 + 0.5;
      float r0 = mix(mix(innerRadius, 1.0, 0.4), mix(innerRadius, 1.0, 0.6), n0);
      float d0 = distance(uv, (r0 * invLen) * uv);
      float v0 = light1(1.0, 10.0, d0);
      v0 *= smoothstep(r0 * 1.05, r0, len);
      float cl = cos(ang + iTime * 2.0) * 0.5 + 0.5;
      
      float a = iTime * -1.0;
      vec2 pos = vec2(cos(a), sin(a)) * r0;
      float d = distance(uv, pos);
      float v1 = light2(1.5, 5.0, d);
      v1 *= light1(1.0, 50.0, d0);
      
      float v2 = smoothstep(1.0, mix(innerRadius, 1.0, n0 * 0.5), len);
      float v3 = smoothstep(innerRadius, mix(innerRadius, 1.0, 0.5), len);
      
      vec3 col = mix(color1, color2, cl);
      col = mix(color3, col, v0);
      col = (col + v1) * v2 * v3;
      col = clamp(col, 0.0, 1.0);
      
      return extractAlpha(col);
    }
    
    vec4 mainImage(vec2 fragCoord) {
      vec2 center = iResolution.xy * 0.5;
      float size = min(iResolution.x, iResolution.y);
      vec2 uv = (fragCoord - center) / size * 2.0;
      
      float angle = rot;
      float s = sin(angle);
      float c = cos(angle);
      uv = vec2(c * uv.x - s * uv.y, s * uv.x + c * uv.y);
      
      uv.x += hover * hoverIntensity * 0.1 * sin(uv.y * 10.0 + iTime);
      uv.y += hover * hoverIntensity * 0.1 * sin(uv.x * 10.0 + iTime);
      
      return draw(uv);
    }
    
    void main() {
      vec2 fragCoord = vUv * iResolution.xy;
      vec4 col = mainImage(fragCoord);
      gl_FragColor = vec4(col.rgb * col.a, col.a);
    }
  `;

	useEffect(() => {
		const container = ctnDom.current;
		if (!container) return;

		const renderer = new Renderer({ alpha: true, premultipliedAlpha: false });
		const gl = renderer.gl;
		gl.clearColor(0, 0, 0, 0);
		container.appendChild(gl.canvas);

		const geometry = new Triangle(gl);
		const program = new Program(gl, {
			vertex: vert,
			fragment: frag,
			uniforms: {
				iTime: { value: 0 },
				iResolution: {
					value: new Vec3(
						gl.canvas.width,
						gl.canvas.height,
						gl.canvas.width / gl.canvas.height
					),
				},
				hue: { value: hue },
				hover: { value: 0 },
				rot: { value: 0 },
				hoverIntensity: { value: hoverIntensity },
			},
		});

		const mesh = new Mesh(gl, { geometry, program });

		function resize() {
			if (!container) return;
			const dpr = window.devicePixelRatio || 1;
			const width = container.clientWidth;
			const height = container.clientHeight;
			renderer.setSize(width * dpr, height * dpr);
			gl.canvas.style.width = width + "px";
			gl.canvas.style.height = height + "px";
			program.uniforms.iResolution.value.set(
				gl.canvas.width,
				gl.canvas.height,
				gl.canvas.width / gl.canvas.height
			);
		}
		window.addEventListener("resize", resize);
		resize();

		let targetHover = 0;
		let lastTime = 0;
		let currentRot = 0;
		const rotationSpeed = 0.3; // radians per second

		const handleMouseMove = (e: MouseEvent) => {
			const rect = container.getBoundingClientRect();
			const x = e.clientX - rect.left;
			const y = e.clientY - rect.top;
			const width = rect.width;
			const height = rect.height;
			const size = Math.min(width, height);
			const centerX = width / 2;
			const centerY = height / 2;
			const uvX = ((x - centerX) / size) * 2.0;
			const uvY = ((y - centerY) / size) * 2.0;

			if (Math.sqrt(uvX * uvX + uvY * uvY) < 0.8) {
				targetHover = 1;
			} else {
				targetHover = 0;
			}
		};

		const handleMouseLeave = () => {
			targetHover = 0;
		};

		container.addEventListener("mousemove", handleMouseMove);
		container.addEventListener("mouseleave", handleMouseLeave);

		let rafId: number;
		const update = (t: number) => {
			rafId = requestAnimationFrame(update);
			const dt = (t - lastTime) * 0.001;
			lastTime = t;
			program.uniforms.iTime.value = t * 0.001;
			program.uniforms.hue.value = hue;
			program.uniforms.hoverIntensity.value = hoverIntensity;

			const effectiveHover = forceHoverState ? 1 : targetHover;
			program.uniforms.hover.value +=
				(effectiveHover - program.uniforms.hover.value) * 0.1;

			if (rotateOnHover && effectiveHover > 0.5) {
				currentRot += dt * rotationSpeed;
			}
			program.uniforms.rot.value = currentRot;

			renderer.render({ scene: mesh });
		};
		rafId = requestAnimationFrame(update);

		return () => {
			cancelAnimationFrame(rafId);
			window.removeEventListener("resize", resize);
			container.removeEventListener("mousemove", handleMouseMove);
			container.removeEventListener("mouseleave", handleMouseLeave);
			container.removeChild(gl.canvas);
			gl.getExtension("WEBGL_lose_context")?.loseContext();
		};
	}, [hue, hoverIntensity, rotateOnHover, forceHoverState]);

	return <div ref={ctnDom} className="w-full h-full" />;
}

================
File: components/UI/Text-reveal.tsx
================
"use client";

import {
	motion,
	type MotionValue,
	useScroll,
	useTransform,
} from "framer-motion";
import {
	type ComponentPropsWithoutRef,
	type FC,
	type ReactNode,
	useRef,
} from "react";

import { cn } from "@/lib/utils";

export interface TextRevealProps extends ComponentPropsWithoutRef<"div"> {
	text: string;
	highlightWords: string[];
}

export const TextReveal: FC<TextRevealProps> = ({
	text,
	highlightWords,
	className,
}) => {
	const targetRef = useRef<HTMLDivElement | null>(null);

	const { scrollYProgress } = useScroll({
		target: targetRef,
	});
	const words = text.split(" ");

	return (
		<div ref={targetRef} className={cn("relative z-0 h-[200vh]", className)}>
			<div
				className={
					"sticky top-0 mx-auto flex h-[50%] max-w-4xl items-center bg-transparent px-[1rem] py-[5rem] "
				}
			>
				<p
					ref={targetRef}
					className={
						"flex  flex-wrap p-5 text-2xl font-bold text-black/20 dark:text-white/20 md:p-8 md:text-3xl lg:p-10 lg:text-4xl xl:text-5xl"
					}
				>
					{words.map((word, i) => {
						const start = i / words.length;
						const end = start + 1 / words.length;
						return (
							<Word
								key={i}
								progress={scrollYProgress}
								range={[start, end]}
								isHighlighted={highlightWords.includes(word)}
							>
								{word}
							</Word>
						);
					})}
				</p>
			</div>
		</div>
	);
};

interface WordProps {
	children: ReactNode;
	progress: MotionValue<number>;
	range: [number, number];
	isHighlighted: boolean;
}

const Word: FC<WordProps> = ({ children, progress, range, isHighlighted }) => {
	const opacity = useTransform(progress, range, [0, 1]);
	return (
		<span className="xl:lg-3 relative mx-1 lg:mx-2.5">
			<span className={"absolute opacity-30"}>{children}</span>
			<motion.span
				style={{ opacity: opacity }}
				className={cn(
					"dark:text-white",
					isHighlighted &&
						"text-gradient-to-r from-yellow-300 to-lime-400 bg-clip-text text-transparent"
				)}
			>
				{children}
			</motion.span>
		</span>
	);
};

export default TextReveal;

================
File: components/UI/WaveCards.tsx
================
"use client";

import React, { useEffect, useRef } from "react";
import { Renderer, Program, Mesh, Triangle, Color } from "ogl";

interface ThreadsProps {
	color?: [number, number, number];
	amplitude?: number;
	distance?: number;
	enableMouseInteraction?: boolean;
}

const vertexShader = `
attribute vec2 position;
attribute vec2 uv;
varying vec2 vUv;
void main() {
  vUv = uv;
  gl_Position = vec4(position, 0.0, 1.0);
}
`;

const fragmentShader = `
precision highp float;
uniform float iTime;
uniform vec3 iResolution;
uniform vec3 uColor;
uniform float uAmplitude;
uniform float uDistance;
uniform vec2 uMouse;

#define PI 3.1415926538

const int u_line_count = 40;
const float u_line_width = 7.0;
const float u_line_blur = 10.0;

float pixel(float count, vec2 resolution) {
    return 1.0 / max(resolution.x, resolution.y) * count;
}

float Perlin2D(vec2 P)
{
    vec2 Pi = floor(P);
    vec4 Pf_Pfmin1 = P.xyxy - vec4(Pi, Pi + 1.0);
    vec4 Pt = vec4(Pi.xy, Pi.xy + 1.0);
    Pt = Pt - floor(Pt * (1.0 / 71.0)) * 71.0;
    Pt += vec2(26.0, 161.0).xyxy;
    Pt *= Pt;
    Pt = Pt.xzxz * Pt.yyww;
    vec4 hash_x = fract(Pt * (1.0 / 951.135664));
    vec4 hash_y = fract(Pt * (1.0 / 642.949883));
    vec4 grad_x = hash_x - 0.49999;
    vec4 grad_y = hash_y - 0.49999;
    vec4 grad_results = inversesqrt(grad_x * grad_x + grad_y * grad_y) * (grad_x * Pf_Pfmin1.xzxz + grad_y * Pf_Pfmin1.yyww);
    grad_results *= 1.4142135623730950488016887242097;
    vec2 blend = Pf_Pfmin1.xy * Pf_Pfmin1.xy * Pf_Pfmin1.xy * (Pf_Pfmin1.xy * (Pf_Pfmin1.xy * 6.0 - 15.0) + 10.0);
    vec4 blend2 = vec4(blend, vec2(1.0 - blend));
    return dot(grad_results, blend2.zxzx * blend2.wwyy);
}

float line(vec2 st, float width, float perc, float offset) {
    float split_offset = (perc * 0.4);
    float split_point = 0.1 + split_offset;
    
    float amplitude_normal = smoothstep(split_point, 0.7, st.x);
    float amplitude_strength = 0.5;
    // Reduced modulation intensity (20% influence from mouse Y)
    float amplitude = amplitude_normal * amplitude_strength * uAmplitude * (1.0 + (uMouse.y - 0.5) * 0.2);

    // Reduced time modulation (only 1.0 factor)
    float time_scaled = iTime / 10.0 + (uMouse.x - 0.5) * 1.0;
    
    float blur = smoothstep(split_point, split_point + 0.05, st.x) * perc;

    float xnoise = mix(
        Perlin2D(vec2(time_scaled, st.x + perc) * 2.5),
        Perlin2D(vec2(time_scaled, st.x + time_scaled) * 3.5) / 1.5,
        st.x * 0.3
    );

    float y = 0.5 + (perc - 0.5) * uDistance + xnoise / 2.0 * amplitude;

    float line_start = smoothstep(
        y + (width / 2.0) + (u_line_blur * pixel(1.0, iResolution.xy) * blur),
        y,
        st.y
    );
        
    float line_end = smoothstep(
        y,
        y - (width / 2.0) - (u_line_blur * pixel(1.0, iResolution.xy) * blur),
        st.y
    );
    
    return clamp(
        (line_start - line_end) * (1.0 - smoothstep(0.0, 1.0, pow(perc, 0.3))),
        0.0,
        1.0
    );
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec2 uv = fragCoord / iResolution.xy;
    
    float line_strength = 1.0;

    for (int i = 0; i < u_line_count; i++) {
        line_strength *= (1.0 - line(
            uv,
            u_line_width * pixel(1.0, iResolution.xy) * (1.0 - float(i) / float(u_line_count)),
            float(i) / float(u_line_count),
            (PI * 1.0) * float(i) / float(u_line_count)
        ));
    }
    
    float color = 1.0 - line_strength;
    fragColor = vec4(uColor * color, color);
}

void main() {
    mainImage(gl_FragColor, gl_FragCoord.xy);
}
`;

const Threads: React.FC<ThreadsProps> = ({
	color = [1, 1, 1],
	amplitude = 1,
	distance = 0,
	enableMouseInteraction = false,
	...rest
}) => {
	const containerRef = useRef<HTMLDivElement>(null);
	const animationFrameId = useRef<number>(null);

	useEffect(() => {
		if (!containerRef.current) return;
		const container = containerRef.current;

		const renderer = new Renderer({ dpr: devicePixelRatio, alpha: true });
		const gl = renderer.gl;
		gl.clearColor(0, 0, 0, 0);
		gl.enable(gl.BLEND);
		gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
		container.appendChild(gl.canvas);

		const geometry = new Triangle(gl);
		const program = new Program(gl, {
			vertex: vertexShader,
			fragment: fragmentShader,
			uniforms: {
				iTime: { value: 0 },
				iResolution: {
					value: new Color(
						gl.canvas.width,
						gl.canvas.height,
						gl.canvas.width / gl.canvas.height
					),
				},
				uColor: { value: new Color(...color) },
				uAmplitude: { value: amplitude },
				uDistance: { value: distance },
				uMouse: { value: new Float32Array([0.5, 0.5]) },
			},
		});
		const mesh = new Mesh(gl, { geometry, program });

		function resize() {
			const { clientWidth, clientHeight } = container;
			renderer.setSize(clientWidth, clientHeight);
			program.uniforms.iResolution.value = new Color(
				clientWidth,
				clientHeight,
				clientWidth / clientHeight
			);
		}
		window.addEventListener("resize", resize);
		resize();

		let currentMouse = [0.5, 0.5];
		let targetMouse = [0.5, 0.5];

		function handleMouseMove(e: MouseEvent) {
			const rect = container.getBoundingClientRect();
			const x = (e.clientX - rect.left) / rect.width;
			const y = 1.0 - (e.clientY - rect.top) / rect.height;
			targetMouse = [x, y];
		}
		function handleMouseLeave() {
			targetMouse = [0.5, 0.5];
		}
		if (enableMouseInteraction) {
			container.addEventListener("mousemove", handleMouseMove);
			container.addEventListener("mouseleave", handleMouseLeave);
		}

		function update(t: number) {
			if (enableMouseInteraction) {
				// Smoothly interpolate the current mouse position toward the target.
				const smoothing = 0.05;
				currentMouse[0] += smoothing * (targetMouse[0] - currentMouse[0]);
				currentMouse[1] += smoothing * (targetMouse[1] - currentMouse[1]);
				program.uniforms.uMouse.value[0] = currentMouse[0];
				program.uniforms.uMouse.value[1] = currentMouse[1];
			} else {
				program.uniforms.uMouse.value[0] = 0.5;
				program.uniforms.uMouse.value[1] = 0.5;
			}
			program.uniforms.iTime.value = t * 0.001;
			renderer.render({ scene: mesh });
			animationFrameId.current = requestAnimationFrame(update);
		}
		animationFrameId.current = requestAnimationFrame(update);

		return () => {
			if (animationFrameId.current)
				cancelAnimationFrame(animationFrameId.current);
			window.removeEventListener("resize", resize);
			if (enableMouseInteraction) {
				container.removeEventListener("mousemove", handleMouseMove);
				container.removeEventListener("mouseleave", handleMouseLeave);
			}
			if (container.contains(gl.canvas)) container.removeChild(gl.canvas);
			gl.getExtension("WEBGL_lose_context")?.loseContext();
		};
	}, [color, amplitude, distance, enableMouseInteraction]);

	return (
		<div ref={containerRef} className="w-full  h-full relative" {...rest} />
	);
};

export default Threads;

================
File: components/typography.tsx
================
import { cn } from "@/lib/utils";

interface TypographyProps extends React.HTMLAttributes<HTMLElement> {
	children: React.ReactNode;
	className?: string;
}

export function H1({ children, className, ...props }: TypographyProps) {
	return (
		<h1
			className={cn(
				"prose-h1 text-4xl font-bold tracking-tight sm:text-4xl md:text-6xl lg:text-7xl prose-headings:mx-auto prose-headings:max-w-3xl ",
				className
			)}
			{...props}
		>
			{children}
		</h1>
	);
}

export function H2({ children, className, ...props }: TypographyProps) {
	return (
		<h2
			className={cn(
				"prose-h2  text-3xl font-semibold tracking-tight sm:text-4xl md:text-5xl prose-headings:mx-auto prose-headings:max-w-3xl",
				className
			)}
			{...props}
		>
			{children}
		</h2>
	);
}

export function H3({ children, className, ...props }: TypographyProps) {
	return (
		<h3
			className={cn(
				"prose-h3 text-fd-accent-foreground/85 text-2xl font-semibold tracking-tight sm:text-3xl md:text-4xl prose-headings:mx-auto prose-headings:max-w-3xl",
				className
			)}
			{...props}
		>
			{children}
		</h3>
	);
}

export function H4({ children, className, ...props }: TypographyProps) {
	return (
		<h4
			className={cn(
				"prose-h4 text-fd-accent-foreground/85  text-xl font-semibold tracking-tight sm:text-2xl md:text-3xl prose-headings:mx-auto prose-headings:max-w-3xl",
				className
			)}
			{...props}
		>
			{children}
		</h4>
	);
}

export function H5({ children, className, ...props }: TypographyProps) {
	return (
		<h5
			className={cn(
				"prose-h5 text-fd-accent-foreground/85  text-lg font-medium tracking-tight sm:text-xl md:text-2xl prose-headings:mx-auto prose-headings:max-w-3xl",
				className
			)}
			{...props}
		>
			{children}
		</h5>
	);
}

export function H6({ children, className, ...props }: TypographyProps) {
	return (
		<h6
			className={cn(
				"prose-h6  text-fd-accent-foreground/85 text-base font-medium tracking-tight sm:text-lg md:text-xl prose-headings:mx-auto prose-headings:max-w-3xl",
				className
			)}
			{...props}
		>
			{children}
		</h6>
	);
}

export function P({ children, className, ...props }: TypographyProps) {
	return (
		<p
			className={cn(
				"prose-p  text-xl leading-7 [&:not(:first-child)]:mt-6 prose-p:mx-auto prose-p:max-w-3xl text-fd-muted-foreground",
				className
			)}
			{...props}
		>
			{children}
		</p>
	);
}

export function Caption({ children, className, ...props }: TypographyProps) {
	return (
		<p className={cn("prose-sm  text-sm text-muted", className)} {...props}>
			{children}
		</p>
	);
}

export function SmallPrint({ children, className, ...props }: TypographyProps) {
	return (
		<p className={cn("prose-xs  text-xs text-muted", className)} {...props}>
			{children}
		</p>
	);
}

================
File: content/blog/first-post.mdx
================
---
title: blog-post
description: Your first document
author: Stav Fernandes
date: 2025-02-02
---

## Hello World

================
File: lib/source.ts
================
import { blogPosts } from "@/.source";
import { createMDXSource } from "fumadocs-mdx";
import { loader } from "fumadocs-core/source";

export const blog = loader({
	baseUrl: "/blog",
	source: createMDXSource(blogPosts),
});

================
File: lib/utils.ts
================
import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
	return twMerge(clsx(inputs));
}

================
File: .eslintrc.json
================
{
  "extends": ["next/core-web-vitals", "next/typescript"]
}

================
File: .gitignore
================
# deps
/node_modules

# generated content
.contentlayer
.content-collections
.source

# test & build
/coverage
/.next/
/out/
/build
*.tsbuildinfo

# misc
.DS_Store
*.pem
/.pnp
.pnp.js
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# others
.env*.local
.vercel
next-env.d.ts

================
File: next.config.mjs
================
import { createMDX } from 'fumadocs-mdx/next';

const withMDX = createMDX();

/** @type {import('next').NextConfig} */
const config = {
  reactStrictMode: true,
};

export default withMDX(config);

================
File: package.json
================
{
  "name": "portfolio-v.7.0",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "build": "next build",
    "dev": "next dev",
    "start": "next start",
    "postinstall": "fumadocs-mdx"
  },
  "dependencies": {
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "fumadocs-core": "15.0.1",
    "fumadocs-mdx": "11.4.0",
    "fumadocs-ui": "15.0.1",
    "lucide-react": "^0.474.0",
    "motion": "^12.0.6",
    "next": "15.1.6",
    "ogl": "^1.0.11",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "tailwind-merge": "^3.0.1",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@tailwindcss/postcss": "^4.0.2",
    "@types/mdx": "^2.0.13",
    "@types/node": "22.13.0",
    "@types/react": "^19.0.8",
    "@types/react-dom": "^19.0.3",
    "eslint": "^8",
    "eslint-config-next": "15.1.6",
    "postcss": "^8.5.1",
    "tailwindcss": "^4.0.2",
    "typescript": "^5.7.3"
  }
}

================
File: postcss.config.mjs
================
export default {
  plugins: {
    '@tailwindcss/postcss': {},
  },
};

================
File: README.md
================
# portfolio-v.7.0

This is a Next.js application generated with
[Create Fumadocs](https://github.com/fuma-nama/fumadocs).

Run development server:

```bash
npm run dev
# or
pnpm dev
# or
yarn dev
```

Open http://localhost:3000 with your browser to see the result.

## Learn More

To learn more about Next.js and Fumadocs, take a look at the following
resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js
  features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.
- [Fumadocs](https://fumadocs.vercel.app) - learn about Fumadocs

================
File: source.config.ts
================
import {
	defineDocs,
	defineConfig,
	frontmatterSchema,
	defineCollections,
} from "fumadocs-mdx/config";
import { z } from "zod";

export const { docs, meta } = defineDocs({
	dir: "content/docs",
});

export const blogPosts = defineCollections({
	type: "doc",
	dir: "content/blog",
	schema: frontmatterSchema.extend({
		author: z.string(),
		date: z.string().date().or(z.date()),
	}),
});

export default defineConfig();

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "baseUrl": ".",
    "target": "ESNext",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "paths": {
      "@/*": ["./*"]
    },
    "plugins": [
      {
        "name": "next"
      }
    ]
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
